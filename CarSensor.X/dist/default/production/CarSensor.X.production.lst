

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Apr 30 04:47:31 2019

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           	psect	idataCOMRAM
    51  003114                     __pidataCOMRAM:
    52                           	opt stack 0
    53                           
    54                           ;initializer for _LCD_INIT_STRING
    55  003114  28                 	db	40
    56  003115  0C                 	db	12
    57  003116  01                 	db	1
    58  003117  06                 	db	6
    59                           
    60                           	psect	smallconst
    61  001000                     __psmallconst:
    62                           	opt stack 0
    63  001000  00                 	db	0
    64  001001                     _dpowers:
    65                           	opt stack 0
    66  001001  0001               	dw	1
    67  001003  0000               	dw	0
    68  001005  000A               	dw	10
    69  001007  0000               	dw	0
    70  001009  0064               	dw	100
    71  00100B  0000               	dw	0
    72  00100D  03E8               	dw	1000
    73  00100F  0000               	dw	0
    74  001011  2710               	dw	10000
    75  001013  0000               	dw	0
    76  001015  86A0               	dw	34464
    77  001017  0001               	dw	1
    78  001019  4240               	dw	16960
    79  00101B  000F               	dw	15
    80  00101D  9680               	dw	38528
    81  00101F  0098               	dw	152
    82  001021  E100               	dw	57600
    83  001023  05F5               	dw	1525
    84  001025  CA00               	dw	51712
    85  001027  3B9A               	dw	15258
    86  001029                     __end_of_dpowers:
    87                           	opt stack 0
    88  001029                     __npowers_:
    89                           	opt stack 0
    90  001029  00                 	db	0
    91  00102A  80                 	db	128
    92  00102B  3F                 	db	63
    93  00102C  CD                 	db	205
    94  00102D  CC                 	db	204
    95  00102E  3D                 	db	61
    96  00102F  D7                 	db	215
    97  001030  23                 	db	35
    98  001031  3C                 	db	60
    99  001032  12                 	db	18
   100  001033  83                 	db	131
   101  001034  3A                 	db	58
   102  001035  B7                 	db	183
   103  001036  D1                 	db	209
   104  001037  38                 	db	56
   105  001038  C6                 	db	198
   106  001039  27                 	db	39
   107  00103A  37                 	db	55
   108  00103B  38                 	db	56
   109  00103C  86                 	db	134
   110  00103D  35                 	db	53
   111  00103E  C0                 	db	192
   112  00103F  D6                 	db	214
   113  001040  33                 	db	51
   114  001041  CC                 	db	204
   115  001042  2B                 	db	43
   116  001043  32                 	db	50
   117  001044  70                 	db	112
   118  001045  89                 	db	137
   119  001046  30                 	db	48
   120  001047  E7                 	db	231
   121  001048  DB                 	db	219
   122  001049  2E                 	db	46
   123  00104A  E5                 	db	229
   124  00104B  3C                 	db	60
   125  00104C  1E                 	db	30
   126  00104D  42                 	db	66
   127  00104E  A2                 	db	162
   128  00104F  0D                 	db	13
   129  001050                     __end_of__npowers_:
   130                           	opt stack 0
   131  001050                     __powers_:
   132                           	opt stack 0
   133  001050  00                 	db	0
   134  001051  80                 	db	128
   135  001052  3F                 	db	63
   136  001053  00                 	db	0
   137  001054  20                 	db	32
   138  001055  41                 	db	65
   139  001056  00                 	db	0
   140  001057  C8                 	db	200
   141  001058  42                 	db	66
   142  001059  00                 	db	0
   143  00105A  7A                 	db	122
   144  00105B  44                 	db	68
   145  00105C  40                 	db	64
   146  00105D  1C                 	db	28
   147  00105E  46                 	db	70
   148  00105F  50                 	db	80
   149  001060  C3                 	db	195
   150  001061  47                 	db	71
   151  001062  24                 	db	36
   152  001063  74                 	db	116
   153  001064  49                 	db	73
   154  001065  97                 	db	151
   155  001066  18                 	db	24
   156  001067  4B                 	db	75
   157  001068  BC                 	db	188
   158  001069  BE                 	db	190
   159  00106A  4C                 	db	76
   160  00106B  6B                 	db	107
   161  00106C  6E                 	db	110
   162  00106D  4E                 	db	78
   163  00106E  03                 	db	3
   164  00106F  15                 	db	21
   165  001070  50                 	db	80
   166  001071  79                 	db	121
   167  001072  AD                 	db	173
   168  001073  60                 	db	96
   169  001074  F3                 	db	243
   170  001075  49                 	db	73
   171  001076  71                 	db	113
   172  001077                     __end_of__powers_:
   173                           	opt stack 0
   174  0000                     _ADCON0	set	4034
   175  0000                     _ADCON1	set	4033
   176  0000                     _CCP1CON	set	4029
   177  0000                     _CCP1CONbits	set	4029
   178  0000                     _CCP2CON	set	4026
   179  0000                     _CCP2CONbits	set	4026
   180  0000                     _CCPR1L	set	4030
   181  0000                     _CCPR2L	set	4027
   182  0000                     _PORTBbits	set	3969
   183  0000                     _PORTDbits	set	3971
   184  0000                     _PR2	set	4043
   185  0000                     _T1CON	set	4045
   186  0000                     _T1CONbits	set	4045
   187  0000                     _T2CON	set	4042
   188  0000                     _T2CONbits	set	4042
   189  0000                     _TMR1H	set	4047
   190  0000                     _TMR1L	set	4046
   191  0000                     _TRISA	set	3986
   192  0000                     _TRISB	set	3987
   193  0000                     _TRISC	set	3988
   194  0000                     _TRISCbits	set	3988
   195  0000                     _TRISD	set	3989
   196  0000                     _TRISE	set	3990
   197  001077                     STR_2:
   198  001077  20                 	db	32
   199  001078  20                 	db	32
   200  001079  20                 	db	32
   201  00107A  20                 	db	32
   202  00107B  20                 	db	32
   203  00107C  20                 	db	32
   204  00107D  20                 	db	32
   205  00107E  20                 	db	32
   206  00107F  20                 	db	32
   207  001080  20                 	db	32
   208  001081  20                 	db	32
   209  001082  20                 	db	32
   210  001083  20                 	db	32
   211  001084  20                 	db	32
   212  001085  20                 	db	32
   213  001086  20                 	db	32
   214  001087  20                 	db	32
   215  001088  20                 	db	32
   216  001089  20                 	db	32
   217  00108A  20                 	db	32
   218  00108B  20                 	db	32
   219  00108C  20                 	db	32
   220  00108D  20                 	db	32
   221  00108E  20                 	db	32
   222  00108F  20                 	db	32
   223  001090  20                 	db	32
   224  001091  20                 	db	32
   225  001092  20                 	db	32
   226  001093  20                 	db	32
   227  001094  20                 	db	32
   228  001095  20                 	db	32
   229  001096  00                 	db	0
   230  001097                     STR_1:
   231  001097  54                 	db	84	;'T'
   232  001098  68                 	db	104	;'h'
   233  001099  69                 	db	105	;'i'
   234  00109A  73                 	db	115	;'s'
   235  00109B  20                 	db	32
   236  00109C  69                 	db	105	;'i'
   237  00109D  73                 	db	115	;'s'
   238  00109E  20                 	db	32
   239  00109F  64                 	db	100	;'d'
   240  0010A0  6F                 	db	111	;'o'
   241  0010A1  6E                 	db	110	;'n'
   242  0010A2  65                 	db	101	;'e'
   243  0010A3  20                 	db	32
   244  0010A4  62                 	db	98	;'b'
   245  0010A5  79                 	db	121	;'y'
   246  0010A6  20                 	db	32
   247  0010A7  6E                 	db	110	;'n'
   248  0010A8  6F                 	db	111	;'o'
   249  0010A9  6F                 	db	111	;'o'
   250  0010AA  72                 	db	114	;'r'
   251  0010AB  20                 	db	32
   252  0010AC  61                 	db	97	;'a'
   253  0010AD  6E                 	db	110	;'n'
   254  0010AE  64                 	db	100	;'d'
   255  0010AF  20                 	db	32
   256  0010B0  6F                 	db	111	;'o'
   257  0010B1  6D                 	db	109	;'m'
   258  0010B2  61                 	db	97	;'a'
   259  0010B3  72                 	db	114	;'r'
   260  0010B4  00                 	db	0
   261  0010B5                     STR_3:
   262  0010B5  44                 	db	68	;'D'
   263  0010B6  69                 	db	105	;'i'
   264  0010B7  73                 	db	115	;'s'
   265  0010B8  74                 	db	116	;'t'
   266  0010B9  61                 	db	97	;'a'
   267  0010BA  6E                 	db	110	;'n'
   268  0010BB  63                 	db	99	;'c'
   269  0010BC  65                 	db	101	;'e'
   270  0010BD  20                 	db	32
   271  0010BE  69                 	db	105	;'i'
   272  0010BF  73                 	db	115	;'s'
   273  0010C0  20                 	db	32
   274  0010C1  3A                 	db	58	;':'
   275  0010C2  20                 	db	32
   276  0010C3  00                 	db	0
   277  0010C4                     STR_4:
   278  0010C4  20                 	db	32
   279  0010C5  20                 	db	32
   280  0010C6  25                 	db	37
   281  0010C7  36                 	db	54	;'6'
   282  0010C8  2E                 	db	46
   283  0010C9  32                 	db	50	;'2'
   284  0010CA  66                 	db	102	;'f'
   285  0010CB  00                 	db	0
   286                           
   287                           ; #config settings
   288  0010CC  00                 	db	0	; dummy byte at the end
   289  0000                     
   290                           	psect	cinit
   291  002FE2                     __pcinit:
   292                           	opt stack 0
   293  002FE2                     start_initialization:
   294                           	opt stack 0
   295  002FE2                     __initialization:
   296                           	opt stack 0
   297                           
   298                           ; Initialize objects allocated to COMRAM (4 bytes)
   299                           ; load TBLPTR registers with __pidataCOMRAM
   300  002FE2  0E14               	movlw	low __pidataCOMRAM
   301  002FE4  6EF6               	movwf	tblptrl,c
   302  002FE6  0E31               	movlw	high __pidataCOMRAM
   303  002FE8  6EF7               	movwf	tblptrh,c
   304  002FEA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   305  002FEC  6EF8               	movwf	tblptru,c
   306  002FEE  EE00  F071         	lfsr	0,__pdataCOMRAM
   307  002FF2  EE10 F004          	lfsr	1,4
   308  002FF6                     copy_data0:
   309  002FF6  0009               	tblrd		*+
   310  002FF8  CFF5 FFEE          	movff	tablat,postinc0
   311  002FFC  50E5               	movf	postdec1,w,c
   312  002FFE  50E1               	movf	fsr1l,w,c
   313  003000  E1FA               	bnz	copy_data0
   314  003002                     end_of_initialization:
   315                           	opt stack 0
   316  003002                     __end_of__initialization:
   317                           	opt stack 0
   318  003002  0E00               	movlw	low (__Lmediumconst shr (0+16))
   319  003004  6EF8               	movwf	tblptru,c
   320  003006  0100               	movlb	0
   321  003008  EF98  F00E         	goto	_main	;jump to C main() function
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           postdec1	equ	0xFE5
   328                           fsr1l	equ	0xFE1
   329                           
   330                           	psect	dataCOMRAM
   331  000071                     __pdataCOMRAM:
   332                           	opt stack 0
   333  000071                     _LCD_INIT_STRING:
   334                           	opt stack 0
   335  000071                     	ds	4
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           postinc0	equ	0xFEE
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	cstackBANK0
   345  000080                     __pcstackBANK0:
   346                           	opt stack 0
   347  000080                     main@buff:
   348                           	opt stack 0
   349                           
   350                           ; 32 bytes @ 0x0
   351  000080                     	ds	32
   352  0000A0                     _main$1118:
   353                           	opt stack 0
   354                           
   355                           ; 3 bytes @ 0x20
   356  0000A0                     	ds	3
   357  0000A3                     main@time:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x23
   361  0000A3                     	ds	2
   362  0000A5                     main@distance:
   363                           	opt stack 0
   364                           
   365                           ; 3 bytes @ 0x25
   366  0000A5                     	ds	3
   367                           tblptru	equ	0xFF8
   368                           tblptrh	equ	0xFF7
   369                           tblptrl	equ	0xFF6
   370                           tablat	equ	0xFF5
   371                           postinc0	equ	0xFEE
   372                           postdec1	equ	0xFE5
   373                           fsr1l	equ	0xFE1
   374                           
   375                           	psect	cstackCOMRAM
   376  000001                     __pcstackCOMRAM:
   377                           	opt stack 0
   378  000001                     ??_delay_ms:
   379  000001                     ??_isdigit:
   380  000001                     ??_delay_cycles:
   381  000001                     ?___awmod:
   382                           	opt stack 0
   383  000001                     ?___ftpack:
   384                           	opt stack 0
   385  000001                     ?___ftneg:
   386                           	opt stack 0
   387  000001                     ?__tdiv_to_l_:
   388                           	opt stack 0
   389  000001                     ?__div_to_l_:
   390                           	opt stack 0
   391  000001                     ?___lldiv:
   392                           	opt stack 0
   393  000001                     ?___llmod:
   394                           	opt stack 0
   395  000001                     set_pwm1_raw@raw_value:
   396                           	opt stack 0
   397  000001                     set_pwm2_raw@raw_value:
   398                           	opt stack 0
   399  000001                     ___awmod@dividend:
   400                           	opt stack 0
   401  000001                     __div_to_l_@f1:
   402                           	opt stack 0
   403  000001                     ___ftpack@arg:
   404                           	opt stack 0
   405  000001                     __tdiv_to_l_@f1:
   406                           	opt stack 0
   407  000001                     ___ftge@ff1:
   408                           	opt stack 0
   409  000001                     ___ftneg@f1:
   410                           	opt stack 0
   411  000001                     ___lldiv@dividend:
   412                           	opt stack 0
   413  000001                     ___llmod@dividend:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x0
   417  000001                     	ds	1
   418  000002                     _isdigit$793:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1
   422  000002                     	ds	1
   423  000003                     ??_set_pwm1_raw:
   424  000003                     ??_set_pwm2_raw:
   425  000003                     isdigit@c:
   426                           	opt stack 0
   427  000003                     ___awmod@divisor:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x2
   431  000003                     	ds	1
   432  000004                     delay_ms@n:
   433                           	opt stack 0
   434  000004                     delay_cycles@n:
   435                           	opt stack 0
   436  000004                     ___ftpack@exp:
   437                           	opt stack 0
   438  000004                     __div_to_l_@f2:
   439                           	opt stack 0
   440  000004                     __tdiv_to_l_@f2:
   441                           	opt stack 0
   442  000004                     ___ftge@ff2:
   443                           	opt stack 0
   444                           
   445                           ; 3 bytes @ 0x3
   446  000004                     	ds	1
   447  000005                     ___awmod@counter:
   448                           	opt stack 0
   449  000005                     ___ftpack@sign:
   450                           	opt stack 0
   451  000005                     delay_ms@x:
   452                           	opt stack 0
   453  000005                     delay_cycles@x:
   454                           	opt stack 0
   455  000005                     ___lldiv@divisor:
   456                           	opt stack 0
   457  000005                     ___llmod@divisor:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x4
   461  000005                     	ds	1
   462  000006                     ??___ftpack:
   463  000006                     ___awmod@sign:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x5
   467  000006                     	ds	1
   468  000007                     ??__tdiv_to_l_:
   469  000007                     ??_lcd_send_nibble:
   470  000007                     ??___ftge:
   471  000007                     ?___awdiv:
   472                           	opt stack 0
   473  000007                     ___awdiv@dividend:
   474                           	opt stack 0
   475  000007                     __div_to_l_@quot:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x6
   479  000007                     	ds	1
   480  000008                     lcd_send_nibble@n:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x7
   484  000008                     	ds	1
   485  000009                     ?___lltoft:
   486                           	opt stack 0
   487  000009                     ?___lwtoft:
   488                           	opt stack 0
   489  000009                     lcd_send_byte@n:
   490                           	opt stack 0
   491  000009                     ___llmod@counter:
   492                           	opt stack 0
   493  000009                     ___awdiv@divisor:
   494                           	opt stack 0
   495  000009                     ___lwtoft@c:
   496                           	opt stack 0
   497  000009                     ___lldiv@quotient:
   498                           	opt stack 0
   499  000009                     ___lltoft@c:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x8
   503  000009                     	ds	1
   504  00000A                     lcd_send_byte@cm_data:
   505                           	opt stack 0
   506  00000A                     __tdiv_to_l_@quot:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x9
   510  00000A                     	ds	1
   511  00000B                     lcd_init@i:
   512                           	opt stack 0
   513  00000B                     lcd_gotoxy@y:
   514                           	opt stack 0
   515  00000B                     ___awdiv@counter:
   516                           	opt stack 0
   517  00000B                     __div_to_l_@cntr:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0xA
   521  00000B                     	ds	1
   522  00000C                     lcd_gotoxy@x:
   523                           	opt stack 0
   524  00000C                     ___awdiv@sign:
   525                           	opt stack 0
   526  00000C                     __div_to_l_@exp1:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0xB
   530  00000C                     	ds	1
   531  00000D                     ??___lltoft:
   532  00000D                     lcd_gotoxy@address:
   533                           	opt stack 0
   534  00000D                     ___lldiv@counter:
   535                           	opt stack 0
   536  00000D                     ___awdiv@quotient:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0xC
   540  00000D                     	ds	1
   541  00000E                     lcd_putc@c:
   542                           	opt stack 0
   543  00000E                     __tdiv_to_l_@cntr:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0xD
   547  00000E                     	ds	1
   548  00000F                     ?___wmul:
   549                           	opt stack 0
   550  00000F                     __tdiv_to_l_@exp1:
   551                           	opt stack 0
   552  00000F                     lcd_puts@s:
   553                           	opt stack 0
   554  00000F                     ___wmul@multiplier:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0xE
   558  00000F                     	ds	2
   559  000011                     ___lltoft@exp:
   560                           	opt stack 0
   561  000011                     ___wmul@multiplicand:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x10
   565  000011                     	ds	2
   566  000013                     ___wmul@product:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x12
   570  000013                     	ds	2
   571  000015                     ?___ftmul:
   572                           	opt stack 0
   573  000015                     ___ftmul@f1:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x14
   577  000015                     	ds	3
   578  000018                     ___ftmul@f2:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x17
   582  000018                     	ds	3
   583  00001B                     ??___ftmul:
   584                           
   585                           ; 1 bytes @ 0x1A
   586  00001B                     	ds	3
   587  00001E                     ___ftmul@exp:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x1D
   591  00001E                     	ds	1
   592  00001F                     ___ftmul@f3_as_product:
   593                           	opt stack 0
   594                           
   595                           ; 3 bytes @ 0x1E
   596  00001F                     	ds	3
   597  000022                     ___ftmul@cntr:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x21
   601  000022                     	ds	1
   602  000023                     ___ftmul@sign:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x22
   606  000023                     	ds	1
   607  000024                     ?___ftdiv:
   608                           	opt stack 0
   609  000024                     ?_fround:
   610                           	opt stack 0
   611  000024                     ?_scale:
   612                           	opt stack 0
   613  000024                     ___ftdiv@f1:
   614                           	opt stack 0
   615                           
   616                           ; 3 bytes @ 0x23
   617  000024                     	ds	3
   618  000027                     ___ftdiv@f2:
   619                           	opt stack 0
   620  000027                     _fround$1120:
   621                           	opt stack 0
   622  000027                     _scale$1121:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x26
   626  000027                     	ds	3
   627  00002A                     ??___ftdiv:
   628  00002A                     scale@scl:
   629                           	opt stack 0
   630  00002A                     _fround$1119:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0x29
   634  00002A                     	ds	3
   635  00002D                     fround@prec:
   636                           	opt stack 0
   637  00002D                     ___ftdiv@cntr:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x2C
   641  00002D                     	ds	1
   642  00002E                     ?___ftadd:
   643                           	opt stack 0
   644  00002E                     ___ftadd@f1:
   645                           	opt stack 0
   646  00002E                     ___ftdiv@f3:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x2D
   650  00002E                     	ds	3
   651  000031                     ___ftdiv@exp:
   652                           	opt stack 0
   653  000031                     ___ftadd@f2:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x30
   657  000031                     	ds	1
   658  000032                     ___ftdiv@sign:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x31
   662  000032                     	ds	2
   663  000034                     ??___ftadd:
   664                           
   665                           ; 1 bytes @ 0x33
   666  000034                     	ds	3
   667  000037                     ___ftadd@sign:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x36
   671  000037                     	ds	1
   672  000038                     ___ftadd@exp2:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x37
   676  000038                     	ds	1
   677  000039                     ___ftadd@exp1:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x38
   681  000039                     	ds	1
   682  00003A                     ?___ftsub:
   683                           	opt stack 0
   684  00003A                     ?___fttol:
   685                           	opt stack 0
   686  00003A                     ___ftsub@f1:
   687                           	opt stack 0
   688  00003A                     ___fttol@f1:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x39
   692  00003A                     	ds	3
   693  00003D                     ___ftsub@f2:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x3C
   697  00003D                     	ds	1
   698  00003E                     ??___fttol:
   699                           
   700                           ; 1 bytes @ 0x3D
   701  00003E                     	ds	2
   702  000040                     
   703                           ; 1 bytes @ 0x3F
   704  000040                     	ds	3
   705  000043                     ___fttol@sign1:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x42
   709  000043                     	ds	1
   710  000044                     ___fttol@lval:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x43
   714  000044                     	ds	4
   715  000048                     ___fttol@exp1:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x47
   719  000048                     	ds	1
   720  000049                     ?_sprintf:
   721                           	opt stack 0
   722  000049                     sprintf@sp:
   723                           	opt stack 0
   724  000049                     set_pwm1_voltage@value:
   725                           	opt stack 0
   726  000049                     set_pwm2_voltage@value:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0x48
   730  000049                     	ds	2
   731  00004B                     sprintf@f:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x4A
   735  00004B                     	ds	1
   736  00004C                     set_pwm1_voltage@tmp:
   737                           	opt stack 0
   738  00004C                     set_pwm2_voltage@tmp:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x4B
   742  00004C                     	ds	3
   743  00004F                     set_pwm1_voltage@raw_val:
   744                           	opt stack 0
   745  00004F                     set_pwm2_voltage@raw_val:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x4E
   749  00004F                     	ds	1
   750  000050                     ??_sprintf:
   751                           
   752                           ; 1 bytes @ 0x4F
   753  000050                     	ds	6
   754  000056                     _sprintf$1122:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x55
   758  000056                     	ds	3
   759  000059                     sprintf@ap:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x58
   763  000059                     	ds	2
   764  00005B                     sprintf@val:
   765                           	opt stack 0
   766                           
   767                           ; 4 bytes @ 0x5A
   768  00005B                     	ds	4
   769  00005F                     sprintf@flag:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x5E
   773  00005F                     	ds	2
   774  000061                     sprintf@width:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x60
   778  000061                     	ds	2
   779  000063                     sprintf@tmpval:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x62
   783  000063                     	ds	4
   784  000067                     sprintf@exp:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x66
   788  000067                     	ds	2
   789  000069                     sprintf@fval:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x68
   793  000069                     	ds	3
   794  00006C                     sprintf@prec:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x6B
   798  00006C                     	ds	2
   799  00006E                     sprintf@c:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x6D
   803  00006E                     	ds	1
   804  00006F                     ??_main:
   805                           
   806                           ; 1 bytes @ 0x6E
   807  00006F                     	ds	2
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           postdec1	equ	0xFE5
   814                           fsr1l	equ	0xFE1
   815                           
   816 ;;
   817 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   818 ;;
   819 ;; *************** function _main *****************
   820 ;; Defined at:
   821 ;;		line 100 in file "carsensor.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;  buff           32    0[BANK0 ] unsigned char [32]
   826 ;;  distance        3   37[BANK0 ] float 
   827 ;;  time            2   35[BANK0 ] unsigned int 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Totals:         2      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;Total ram usage:       42 bytes
   842 ;; Hardware stack levels required when called:    6
   843 ;; This function calls:
   844 ;;		___ftdiv
   845 ;;		___ftge
   846 ;;		___lwtoft
   847 ;;		_delay_ms
   848 ;;		_init_pwm1
   849 ;;		_lcd_gotoxy
   850 ;;		_lcd_puts
   851 ;;		_set_pwm1_voltage
   852 ;;		_set_pwm2_voltage
   853 ;;		_setupPorts
   854 ;;		_sprintf
   855 ;; This function is called by:
   856 ;;		Startup code after reset
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text0
   861  001D30                     __ptext0:
   862                           	opt stack 0
   863  001D30                     _main:
   864                           	opt stack 25
   865                           
   866                           ;carsensor.c: 101: setupPorts();
   867                           
   868                           ;incstack = 0
   869  001D30  EC70  F018         	call	_setupPorts	;wreg free
   870                           
   871                           ;carsensor.c: 102: init_pwm1();
   872  001D34  EC7F  F018         	call	_init_pwm1	;wreg free
   873                           
   874                           ;carsensor.c: 103: lcd_puts((char *) "This is done by noor and omar");
   875  001D38  0E97               	movlw	low STR_1
   876  001D3A  6E0F               	movwf	lcd_puts@s,c
   877  001D3C  0E10               	movlw	high STR_1
   878  001D3E  6E10               	movwf	lcd_puts@s+1,c
   879  001D40  EC06  F017         	call	_lcd_puts	;wreg free
   880  001D44  0004               	clrwdt		;# 
   881                           
   882                           ;carsensor.c: 105: delay_ms(10000);
   883  001D46  0E10               	movlw	16
   884  001D48  EC79  F017         	call	_delay_ms
   885                           
   886                           ;carsensor.c: 106: lcd_gotoxy(1, 1);
   887  001D4C  0E01               	movlw	1
   888  001D4E  6E0B               	movwf	lcd_gotoxy@y,c
   889  001D50  0E01               	movlw	1
   890  001D52  EC50  F018         	call	_lcd_gotoxy
   891                           
   892                           ;carsensor.c: 107: unsigned int time = 0;
   893  001D56  0E00               	movlw	0
   894  001D58  0100               	movlb	0	; () banked
   895  001D5A  6FA4               	movwf	(main@time+1)& (0+255),b
   896  001D5C  0E00               	movlw	0
   897  001D5E  6FA3               	movwf	main@time& (0+255),b
   898                           
   899                           ; BSR set to: 0
   900                           ;carsensor.c: 108: float distance;
   901                           ;carsensor.c: 109: char buff[32];
   902                           ;carsensor.c: 110: lcd_puts((char *) "                               ");
   903  001D60  0E77               	movlw	low STR_2
   904  001D62  6E0F               	movwf	lcd_puts@s,c
   905  001D64  0E10               	movlw	high STR_2
   906  001D66  6E10               	movwf	lcd_puts@s+1,c
   907  001D68  EC06  F017         	call	_lcd_puts	;wreg free
   908                           
   909                           ;carsensor.c: 111: sprintf(buff, "Distance is : ");
   910  001D6C  0E80               	movlw	low main@buff
   911  001D6E  6E49               	movwf	sprintf@sp,c
   912  001D70  0E00               	movlw	high main@buff
   913  001D72  6E4A               	movwf	sprintf@sp+1,c
   914  001D74  0EB5               	movlw	low STR_3
   915  001D76  6E4B               	movwf	sprintf@f,c
   916  001D78  0E10               	movlw	high STR_3
   917  001D7A  6E4C               	movwf	sprintf@f+1,c
   918  001D7C  EC67  F008         	call	_sprintf	;wreg free
   919                           
   920                           ;carsensor.c: 112: lcd_puts(buff);
   921  001D80  0E80               	movlw	low main@buff
   922  001D82  6E0F               	movwf	lcd_puts@s,c
   923  001D84  0E00               	movlw	high main@buff
   924  001D86  6E10               	movwf	lcd_puts@s+1,c
   925  001D88  EC06  F017         	call	_lcd_puts	;wreg free
   926                           
   927                           ;carsensor.c: 113: while (1) {
   928  001D8C  0004               	clrwdt		;# 
   929                           
   930                           ;carsensor.c: 115: T1CON = 0x30;
   931  001D8E  0E30               	movlw	48
   932  001D90  6ECD               	movwf	4045,c	;volatile
   933                           
   934                           ;carsensor.c: 116: TMR1H = 0;
   935  001D92  0E00               	movlw	0
   936  001D94  6ECF               	movwf	4047,c	;volatile
   937                           
   938                           ;carsensor.c: 117: TMR1L = 0;
   939  001D96  0E00               	movlw	0
   940  001D98  6ECE               	movwf	4046,c	;volatile
   941                           
   942                           ;carsensor.c: 118: PORTDbits.RD0 = 0;
   943  001D9A  9083               	bcf	3971,0,c	;volatile
   944                           
   945                           ;carsensor.c: 119: delay_ms(5);
   946  001D9C  0E05               	movlw	5
   947  001D9E  EC79  F017         	call	_delay_ms
   948                           
   949                           ;carsensor.c: 120: PORTDbits.RD0 = 1;
   950  001DA2  8083               	bsf	3971,0,c	;volatile
   951                           
   952                           ;carsensor.c: 121: delay_ms(10);
   953  001DA4  0E0A               	movlw	10
   954  001DA6  EC79  F017         	call	_delay_ms
   955                           
   956                           ;carsensor.c: 122: PORTDbits.RD0 = 0;
   957  001DAA  9083               	bcf	3971,0,c	;volatile
   958  001DAC                     l76:
   959  001DAC  A081               	btfss	3969,0,c	;volatile
   960  001DAE  D7FE               	goto	l76
   961                           
   962                           ;carsensor.c: 124: T1CONbits.TMR1ON = 1;
   963  001DB0  80CD               	bsf	4045,0,c	;volatile
   964  001DB2                     l79:
   965  001DB2  B081               	btfsc	3969,0,c	;volatile
   966  001DB4  D7FE               	goto	l79
   967                           
   968                           ;carsensor.c: 126: T1CONbits.TMR1ON = 0;
   969  001DB6  90CD               	bcf	4045,0,c	;volatile
   970                           
   971                           ;carsensor.c: 127: time = (TMR1H << 8) | TMR1L;
   972  001DB8  50CE               	movf	4046,w,c	;volatile
   973  001DBA  CFCF F06F          	movff	4047,??_main	;volatile
   974  001DBE  6A70               	clrf	(??_main+1)& (0+255),c
   975  001DC0  C06F  F070         	movff	??_main,??_main+1
   976  001DC4  6A6F               	clrf	??_main,c
   977  001DC6  106F               	iorwf	??_main,w,c
   978  001DC8  0100               	movlb	0	; () banked
   979  001DCA  6FA3               	movwf	main@time& (0+255),b
   980  001DCC  5070               	movf	??_main+1,w,c
   981  001DCE  0100               	movlb	0	; () banked
   982  001DD0  6FA4               	movwf	(main@time+1)& (0+255),b
   983                           
   984                           ; BSR set to: 0
   985                           ;carsensor.c: 128: distance = ((float) (8 * time) / 1000000.0) / 58.82;
   986  001DD2  0E24               	movlw	36
   987  001DD4  6E27               	movwf	___ftdiv@f2,c
   988  001DD6  0E74               	movlw	116
   989  001DD8  6E28               	movwf	___ftdiv@f2+1,c
   990  001DDA  0E49               	movlw	73
   991  001DDC  6E29               	movwf	___ftdiv@f2+2,c
   992  001DDE  C0A3  F06F         	movff	main@time,??_main
   993  001DE2  C0A4  F070         	movff	main@time+1,??_main+1
   994  001DE6  90D8               	bcf	status,0,c
   995  001DE8  366F               	rlcf	??_main,f,c
   996  001DEA  3670               	rlcf	??_main+1,f,c
   997  001DEC  90D8               	bcf	status,0,c
   998  001DEE  366F               	rlcf	??_main,f,c
   999  001DF0  3670               	rlcf	??_main+1,f,c
  1000  001DF2  90D8               	bcf	status,0,c
  1001  001DF4  366F               	rlcf	??_main,f,c
  1002  001DF6  3670               	rlcf	??_main+1,f,c
  1003  001DF8  C06F  F009         	movff	??_main,___lwtoft@c
  1004  001DFC  C070  F00A         	movff	??_main+1,___lwtoft@c+1
  1005  001E00  EC3E  F018         	call	___lwtoft	;wreg free
  1006  001E04  C009  F024         	movff	?___lwtoft,___ftdiv@f1
  1007  001E08  C00A  F025         	movff	?___lwtoft+1,___ftdiv@f1+1
  1008  001E0C  C00B  F026         	movff	?___lwtoft+2,___ftdiv@f1+2
  1009  001E10  EC15  F014         	call	___ftdiv	;wreg free
  1010  001E14  C024  F0A0         	movff	?___ftdiv,_main$1118
  1011  001E18  C025  F0A1         	movff	?___ftdiv+1,_main$1118+1
  1012  001E1C  C026  F0A2         	movff	?___ftdiv+2,_main$1118+2
  1013                           
  1014                           ;carsensor.c: 128: distance = ((float) (8 * time) / 1000000.0) / 58.82;
  1015  001E20  C0A0  F024         	movff	_main$1118,___ftdiv@f1
  1016  001E24  C0A1  F025         	movff	_main$1118+1,___ftdiv@f1+1
  1017  001E28  C0A2  F026         	movff	_main$1118+2,___ftdiv@f1+2
  1018  001E2C  0E48               	movlw	72
  1019  001E2E  6E27               	movwf	___ftdiv@f2,c
  1020  001E30  0E6B               	movlw	107
  1021  001E32  6E28               	movwf	___ftdiv@f2+1,c
  1022  001E34  0E42               	movlw	66
  1023  001E36  6E29               	movwf	___ftdiv@f2+2,c
  1024  001E38  EC15  F014         	call	___ftdiv	;wreg free
  1025  001E3C  C024  F0A5         	movff	?___ftdiv,main@distance
  1026  001E40  C025  F0A6         	movff	?___ftdiv+1,main@distance+1
  1027  001E44  C026  F0A7         	movff	?___ftdiv+2,main@distance+2
  1028                           
  1029                           ;carsensor.c: 129: sprintf(buff, "  %6.2f", distance);
  1030  001E48  0E80               	movlw	low main@buff
  1031  001E4A  6E49               	movwf	sprintf@sp,c
  1032  001E4C  0E00               	movlw	high main@buff
  1033  001E4E  6E4A               	movwf	sprintf@sp+1,c
  1034  001E50  0EC4               	movlw	low STR_4
  1035  001E52  6E4B               	movwf	sprintf@f,c
  1036  001E54  0E10               	movlw	high STR_4
  1037  001E56  6E4C               	movwf	sprintf@f+1,c
  1038  001E58  C0A5  F04D         	movff	main@distance,?_sprintf+4
  1039  001E5C  C0A6  F04E         	movff	main@distance+1,?_sprintf+5
  1040  001E60  C0A7  F04F         	movff	main@distance+2,?_sprintf+6
  1041  001E64  EC67  F008         	call	_sprintf	;wreg free
  1042                           
  1043                           ;carsensor.c: 130: lcd_gotoxy(1, 2);
  1044  001E68  0E02               	movlw	2
  1045  001E6A  6E0B               	movwf	lcd_gotoxy@y,c
  1046  001E6C  0E01               	movlw	1
  1047  001E6E  EC50  F018         	call	_lcd_gotoxy
  1048                           
  1049                           ;carsensor.c: 131: lcd_puts(buff);
  1050  001E72  0E80               	movlw	low main@buff
  1051  001E74  6E0F               	movwf	lcd_puts@s,c
  1052  001E76  0E00               	movlw	high main@buff
  1053  001E78  6E10               	movwf	lcd_puts@s+1,c
  1054  001E7A  EC06  F017         	call	_lcd_puts	;wreg free
  1055                           
  1056                           ;carsensor.c: 132: if (distance >= 300) {
  1057  001E7E  C0A5  F001         	movff	main@distance,___ftge@ff1
  1058  001E82  C0A6  F002         	movff	main@distance+1,___ftge@ff1+1
  1059  001E86  C0A7  F003         	movff	main@distance+2,___ftge@ff1+2
  1060  001E8A  0E00               	movlw	0
  1061  001E8C  6E04               	movwf	___ftge@ff2,c
  1062  001E8E  0E96               	movlw	150
  1063  001E90  6E05               	movwf	___ftge@ff2+1,c
  1064  001E92  0E43               	movlw	67
  1065  001E94  6E06               	movwf	___ftge@ff2+2,c
  1066  001E96  EC77  F015         	call	___ftge	;wreg free
  1067  001E9A  A0D8               	btfss	status,0,c
  1068  001E9C  D012               	goto	l3072
  1069                           
  1070                           ;carsensor.c: 133: set_pwm1_voltage(4);
  1071  001E9E  0E00               	movlw	0
  1072  001EA0  6E49               	movwf	set_pwm1_voltage@value,c
  1073  001EA2  0E80               	movlw	128
  1074  001EA4  6E4A               	movwf	set_pwm1_voltage@value+1,c
  1075  001EA6  0E40               	movlw	64
  1076  001EA8  6E4B               	movwf	set_pwm1_voltage@value+2,c
  1077  001EAA  EC2B  F015         	call	_set_pwm1_voltage	;wreg free
  1078                           
  1079                           ;carsensor.c: 134: set_pwm2_voltage(0.5);
  1080  001EAE  0E00               	movlw	0
  1081  001EB0  6E49               	movwf	set_pwm2_voltage@value,c
  1082  001EB2  0E00               	movlw	0
  1083  001EB4  6E4A               	movwf	set_pwm2_voltage@value+1,c
  1084  001EB6  0E3F               	movlw	63
  1085  001EB8  6E4B               	movwf	set_pwm2_voltage@value+2,c
  1086  001EBA  ECDF  F014         	call	_set_pwm2_voltage	;wreg free
  1087                           
  1088                           ;carsensor.c: 135: } else if (distance >= 200) {
  1089  001EBE  EF80  F001         	goto	start
  1090  001EC2                     l3072:
  1091  001EC2  C0A5  F001         	movff	main@distance,___ftge@ff1
  1092  001EC6  C0A6  F002         	movff	main@distance+1,___ftge@ff1+1
  1093  001ECA  C0A7  F003         	movff	main@distance+2,___ftge@ff1+2
  1094  001ECE  0E00               	movlw	0
  1095  001ED0  6E04               	movwf	___ftge@ff2,c
  1096  001ED2  0E48               	movlw	72
  1097  001ED4  6E05               	movwf	___ftge@ff2+1,c
  1098  001ED6  0E43               	movlw	67
  1099  001ED8  6E06               	movwf	___ftge@ff2+2,c
  1100  001EDA  EC77  F015         	call	___ftge	;wreg free
  1101  001EDE  A0D8               	btfss	status,0,c
  1102  001EE0  D012               	goto	l3076
  1103                           
  1104                           ;carsensor.c: 136: set_pwm1_voltage(4);
  1105  001EE2  0E00               	movlw	0
  1106  001EE4  6E49               	movwf	set_pwm1_voltage@value,c
  1107  001EE6  0E80               	movlw	128
  1108  001EE8  6E4A               	movwf	set_pwm1_voltage@value+1,c
  1109  001EEA  0E40               	movlw	64
  1110  001EEC  6E4B               	movwf	set_pwm1_voltage@value+2,c
  1111  001EEE  EC2B  F015         	call	_set_pwm1_voltage	;wreg free
  1112                           
  1113                           ;carsensor.c: 137: set_pwm2_voltage(1.5);
  1114  001EF2  0E00               	movlw	0
  1115  001EF4  6E49               	movwf	set_pwm2_voltage@value,c
  1116  001EF6  0EC0               	movlw	192
  1117  001EF8  6E4A               	movwf	set_pwm2_voltage@value+1,c
  1118  001EFA  0E3F               	movlw	63
  1119  001EFC  6E4B               	movwf	set_pwm2_voltage@value+2,c
  1120  001EFE  ECDF  F014         	call	_set_pwm2_voltage	;wreg free
  1121                           
  1122                           ;carsensor.c: 138: } else if (distance >= 100) {
  1123  001F02  EF80  F001         	goto	start
  1124  001F06                     l3076:
  1125  001F06  C0A5  F001         	movff	main@distance,___ftge@ff1
  1126  001F0A  C0A6  F002         	movff	main@distance+1,___ftge@ff1+1
  1127  001F0E  C0A7  F003         	movff	main@distance+2,___ftge@ff1+2
  1128  001F12  0E00               	movlw	0
  1129  001F14  6E04               	movwf	___ftge@ff2,c
  1130  001F16  0EC8               	movlw	200
  1131  001F18  6E05               	movwf	___ftge@ff2+1,c
  1132  001F1A  0E42               	movlw	66
  1133  001F1C  6E06               	movwf	___ftge@ff2+2,c
  1134  001F1E  EC77  F015         	call	___ftge	;wreg free
  1135  001F22  A0D8               	btfss	status,0,c
  1136  001F24  D012               	goto	l3080
  1137                           
  1138                           ;carsensor.c: 139: set_pwm1_voltage(2.5);
  1139  001F26  0E00               	movlw	0
  1140  001F28  6E49               	movwf	set_pwm1_voltage@value,c
  1141  001F2A  0E20               	movlw	32
  1142  001F2C  6E4A               	movwf	set_pwm1_voltage@value+1,c
  1143  001F2E  0E40               	movlw	64
  1144  001F30  6E4B               	movwf	set_pwm1_voltage@value+2,c
  1145  001F32  EC2B  F015         	call	_set_pwm1_voltage	;wreg free
  1146                           
  1147                           ;carsensor.c: 140: set_pwm2_voltage(3);
  1148  001F36  0E00               	movlw	0
  1149  001F38  6E49               	movwf	set_pwm2_voltage@value,c
  1150  001F3A  0E40               	movlw	64
  1151  001F3C  6E4A               	movwf	set_pwm2_voltage@value+1,c
  1152  001F3E  0E40               	movlw	64
  1153  001F40  6E4B               	movwf	set_pwm2_voltage@value+2,c
  1154  001F42  ECDF  F014         	call	_set_pwm2_voltage	;wreg free
  1155                           
  1156                           ;carsensor.c: 141: } else if (distance >= 75) {
  1157  001F46  EF80  F001         	goto	start
  1158  001F4A                     l3080:
  1159  001F4A  C0A5  F001         	movff	main@distance,___ftge@ff1
  1160  001F4E  C0A6  F002         	movff	main@distance+1,___ftge@ff1+1
  1161  001F52  C0A7  F003         	movff	main@distance+2,___ftge@ff1+2
  1162  001F56  0E00               	movlw	0
  1163  001F58  6E04               	movwf	___ftge@ff2,c
  1164  001F5A  0E96               	movlw	150
  1165  001F5C  6E05               	movwf	___ftge@ff2+1,c
  1166  001F5E  0E42               	movlw	66
  1167  001F60  6E06               	movwf	___ftge@ff2+2,c
  1168  001F62  EC77  F015         	call	___ftge	;wreg free
  1169  001F66  A0D8               	btfss	status,0,c
  1170  001F68  D012               	goto	l3084
  1171                           
  1172                           ;carsensor.c: 142: set_pwm1_voltage(0.5);
  1173  001F6A  0E00               	movlw	0
  1174  001F6C  6E49               	movwf	set_pwm1_voltage@value,c
  1175  001F6E  0E00               	movlw	0
  1176  001F70  6E4A               	movwf	set_pwm1_voltage@value+1,c
  1177  001F72  0E3F               	movlw	63
  1178  001F74  6E4B               	movwf	set_pwm1_voltage@value+2,c
  1179  001F76  EC2B  F015         	call	_set_pwm1_voltage	;wreg free
  1180                           
  1181                           ;carsensor.c: 143: set_pwm2_voltage(3);
  1182  001F7A  0E00               	movlw	0
  1183  001F7C  6E49               	movwf	set_pwm2_voltage@value,c
  1184  001F7E  0E40               	movlw	64
  1185  001F80  6E4A               	movwf	set_pwm2_voltage@value+1,c
  1186  001F82  0E40               	movlw	64
  1187  001F84  6E4B               	movwf	set_pwm2_voltage@value+2,c
  1188  001F86  ECDF  F014         	call	_set_pwm2_voltage	;wreg free
  1189                           
  1190                           ;carsensor.c: 144: } else if (distance >= 50) {
  1191  001F8A  EF80  F001         	goto	start
  1192  001F8E                     l3084:
  1193  001F8E  C0A5  F001         	movff	main@distance,___ftge@ff1
  1194  001F92  C0A6  F002         	movff	main@distance+1,___ftge@ff1+1
  1195  001F96  C0A7  F003         	movff	main@distance+2,___ftge@ff1+2
  1196  001F9A  0E00               	movlw	0
  1197  001F9C  6E04               	movwf	___ftge@ff2,c
  1198  001F9E  0E48               	movlw	72
  1199  001FA0  6E05               	movwf	___ftge@ff2+1,c
  1200  001FA2  0E42               	movlw	66
  1201  001FA4  6E06               	movwf	___ftge@ff2+2,c
  1202  001FA6  EC77  F015         	call	___ftge	;wreg free
  1203  001FAA  A0D8               	btfss	status,0,c
  1204  001FAC  D012               	goto	l3088
  1205                           
  1206                           ;carsensor.c: 145: set_pwm1_voltage(0.5);
  1207  001FAE  0E00               	movlw	0
  1208  001FB0  6E49               	movwf	set_pwm1_voltage@value,c
  1209  001FB2  0E00               	movlw	0
  1210  001FB4  6E4A               	movwf	set_pwm1_voltage@value+1,c
  1211  001FB6  0E3F               	movlw	63
  1212  001FB8  6E4B               	movwf	set_pwm1_voltage@value+2,c
  1213  001FBA  EC2B  F015         	call	_set_pwm1_voltage	;wreg free
  1214                           
  1215                           ;carsensor.c: 146: set_pwm2_voltage(4);
  1216  001FBE  0E00               	movlw	0
  1217  001FC0  6E49               	movwf	set_pwm2_voltage@value,c
  1218  001FC2  0E80               	movlw	128
  1219  001FC4  6E4A               	movwf	set_pwm2_voltage@value+1,c
  1220  001FC6  0E40               	movlw	64
  1221  001FC8  6E4B               	movwf	set_pwm2_voltage@value+2,c
  1222  001FCA  ECDF  F014         	call	_set_pwm2_voltage	;wreg free
  1223                           
  1224                           ;carsensor.c: 147: } else {
  1225  001FCE  EF80  F001         	goto	start
  1226  001FD2                     l3088:
  1227                           
  1228                           ;carsensor.c: 148: set_pwm1_voltage(0.05);
  1229  001FD2  0ECD               	movlw	205
  1230  001FD4  6E49               	movwf	set_pwm1_voltage@value,c
  1231  001FD6  0E4C               	movlw	76
  1232  001FD8  6E4A               	movwf	set_pwm1_voltage@value+1,c
  1233  001FDA  0E3D               	movlw	61
  1234  001FDC  6E4B               	movwf	set_pwm1_voltage@value+2,c
  1235  001FDE  EC2B  F015         	call	_set_pwm1_voltage	;wreg free
  1236                           
  1237                           ;carsensor.c: 149: set_pwm2_voltage(4.8);
  1238  001FE2  0E9A               	movlw	154
  1239  001FE4  6E49               	movwf	set_pwm2_voltage@value,c
  1240  001FE6  0E99               	movlw	153
  1241  001FE8  6E4A               	movwf	set_pwm2_voltage@value+1,c
  1242  001FEA  0E40               	movlw	64
  1243  001FEC  6E4B               	movwf	set_pwm2_voltage@value+2,c
  1244  001FEE  ECDF  F014         	call	_set_pwm2_voltage	;wreg free
  1245                           
  1246                           ;carsensor.c: 151: }
  1247                           ;carsensor.c: 153: return;
  1248  001FF2  EF80  F001         	goto	start
  1249  001FF6                     __end_of_main:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           postinc0	equ	0xFEE
  1256                           postdec1	equ	0xFE5
  1257                           fsr1l	equ	0xFE1
  1258                           status	equ	0xFD8
  1259                           
  1260 ;; *************** function _sprintf *****************
  1261 ;; Defined at:
  1262 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;  sp              2   72[COMRAM] PTR unsigned char 
  1265 ;;		 -> main@buff(32), 
  1266 ;;  f               2   74[COMRAM] PTR const unsigned char 
  1267 ;;		 -> STR_4(8), STR_3(15), 
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;  tmpval          4   98[COMRAM] struct .
  1270 ;;  val             4   90[COMRAM] unsigned long 
  1271 ;;  fval            3  104[COMRAM] unsigned long 
  1272 ;;  cp              3    0        PTR const unsigned char 
  1273 ;;  prec            2  107[COMRAM] int 
  1274 ;;  exp             2  102[COMRAM] int 
  1275 ;;  width           2   96[COMRAM] int 
  1276 ;;  flag            2   94[COMRAM] unsigned short 
  1277 ;;  ap              2   88[COMRAM] PTR void [1]
  1278 ;;		 -> ?_sprintf(2), 
  1279 ;;  len             2    0        unsigned int 
  1280 ;;  c               1  109[COMRAM] char 
  1281 ;;  d               1    0        unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  2   72[COMRAM] int 
  1284 ;; Registers used:
  1285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1291 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;Total ram usage:       38 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    3
  1298 ;; This function calls:
  1299 ;;		___awdiv
  1300 ;;		___ftadd
  1301 ;;		___ftge
  1302 ;;		___ftmul
  1303 ;;		___ftneg
  1304 ;;		___ftsub
  1305 ;;		___fttol
  1306 ;;		___lldiv
  1307 ;;		___llmod
  1308 ;;		___lltoft
  1309 ;;		___wmul
  1310 ;;		__div_to_l_
  1311 ;;		__tdiv_to_l_
  1312 ;;		_fround
  1313 ;;		_isdigit
  1314 ;;		_scale
  1315 ;; This function is called by:
  1316 ;;		_main
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text1
  1321  0010CE                     __ptext1:
  1322                           	opt stack 0
  1323  0010CE                     _sprintf:
  1324                           	opt stack 27
  1325                           
  1326                           ;doprnt.c: 494: va_list ap;
  1327                           ;doprnt.c: 499: signed char c;
  1328                           ;doprnt.c: 501: int width;
  1329                           ;doprnt.c: 504: int prec;
  1330                           ;doprnt.c: 508: unsigned short flag;
  1331                           ;doprnt.c: 515: char d;
  1332                           ;doprnt.c: 516: double fval;
  1333                           ;doprnt.c: 517: int exp;
  1334                           ;doprnt.c: 523: union {
  1335                           ;doprnt.c: 524: unsigned long vd;
  1336                           ;doprnt.c: 525: double integ;
  1337                           ;doprnt.c: 526: } tmpval;
  1338                           ;doprnt.c: 528: unsigned long val;
  1339                           ;doprnt.c: 529: unsigned len;
  1340                           ;doprnt.c: 530: const char * cp;
  1341                           ;doprnt.c: 533: *ap = __va_start();
  1342                           
  1343                           ;incstack = 0
  1344  0010CE  0E4D               	movlw	low (?_sprintf+4)
  1345  0010D0  6E59               	movwf	sprintf@ap,c
  1346  0010D2  0E00               	movlw	high (?_sprintf+4)
  1347  0010D4  6E5A               	movwf	sprintf@ap+1,c
  1348                           
  1349                           ;doprnt.c: 536: while(c = *f++) {
  1350  0010D6  EF8C  F00C         	goto	l2996
  1351  0010DA                     l2742:
  1352                           
  1353                           ;doprnt.c: 538: if(c != '%')
  1354  0010DA  0E25               	movlw	37
  1355  0010DC  186E               	xorwf	sprintf@c,w,c
  1356  0010DE  B4D8               	btfsc	status,2,c
  1357  0010E0  D008               	goto	l2748
  1358                           
  1359                           ;doprnt.c: 540: {
  1360                           ;doprnt.c: 541: ((*sp++ = (c)));
  1361  0010E2  C049  FFD9         	movff	sprintf@sp,fsr2l
  1362  0010E6  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  1363  0010EA  C06E  FFDF         	movff	sprintf@c,indf2
  1364  0010EE  EF8A  F00C         	goto	l2994
  1365  0010F2                     l2748:
  1366                           
  1367                           ;doprnt.c: 543: }
  1368                           ;doprnt.c: 546: width = 0;
  1369  0010F2  0E00               	movlw	0
  1370  0010F4  6E62               	movwf	sprintf@width+1,c
  1371  0010F6  0E00               	movlw	0
  1372  0010F8  6E61               	movwf	sprintf@width,c
  1373                           
  1374                           ;doprnt.c: 548: flag = 0;
  1375  0010FA  0E00               	movlw	0
  1376  0010FC  6E60               	movwf	sprintf@flag+1,c
  1377  0010FE  0E00               	movlw	0
  1378  001100  6E5F               	movwf	sprintf@flag,c
  1379                           
  1380                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1381  001102  C04B  FFF6         	movff	sprintf@f,tblptrl
  1382  001106  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  1383  00110A                     	if	0	;tblptru may be non-zero
  1384  00110A                     	endif
  1385  00110A                     	if	0	;tblptru may be non-zero
  1386  00110A                     	endif
  1387  00110A  0008               	tblrd		*
  1388  00110C  50F5               	movf	tablat,w,c
  1389  00110E  EC61  F018         	call	_isdigit
  1390  001112  A0D8               	btfss	status,0,c
  1391  001114  D032               	goto	l2762
  1392                           
  1393                           ;doprnt.c: 598: width = 0;
  1394  001116  0E00               	movlw	0
  1395  001118  6E62               	movwf	sprintf@width+1,c
  1396  00111A  0E00               	movlw	0
  1397  00111C  6E61               	movwf	sprintf@width,c
  1398  00111E                     l2754:
  1399                           
  1400                           ;doprnt.c: 600: width *= 10;
  1401  00111E  C061  F00F         	movff	sprintf@width,___wmul@multiplier
  1402  001122  C062  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1403  001126  0E00               	movlw	0
  1404  001128  6E12               	movwf	___wmul@multiplicand+1,c
  1405  00112A  0E0A               	movlw	10
  1406  00112C  6E11               	movwf	___wmul@multiplicand,c
  1407  00112E  EC06  F018         	call	___wmul	;wreg free
  1408  001132  C00F  F061         	movff	?___wmul,sprintf@width
  1409  001136  C010  F062         	movff	?___wmul+1,sprintf@width+1
  1410                           
  1411                           ;doprnt.c: 601: width += *f++ - '0';
  1412  00113A  0ED0               	movlw	208
  1413  00113C  6E50               	movwf	??_sprintf& (0+255),c
  1414  00113E  0EFF               	movlw	255
  1415  001140  6E51               	movwf	(??_sprintf+1)& (0+255),c
  1416  001142  C04B  FFF6         	movff	sprintf@f,tblptrl
  1417  001146  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  1418  00114A                     	if	0	;tblptru may be non-zero
  1419  00114A                     	endif
  1420  00114A                     	if	0	;tblptru may be non-zero
  1421  00114A                     	endif
  1422  00114A  0008               	tblrd		*
  1423  00114C  50F5               	movf	tablat,w,c
  1424  00114E  6E52               	movwf	(??_sprintf+2)& (0+255),c
  1425  001150  6A53               	clrf	(??_sprintf+3)& (0+255),c
  1426  001152  5050               	movf	??_sprintf,w,c
  1427  001154  2652               	addwf	??_sprintf+2,f,c
  1428  001156  5051               	movf	??_sprintf+1,w,c
  1429  001158  2253               	addwfc	??_sprintf+3,f,c
  1430  00115A  5052               	movf	??_sprintf+2,w,c
  1431  00115C  2661               	addwf	sprintf@width,f,c
  1432  00115E  5053               	movf	??_sprintf+3,w,c
  1433  001160  2262               	addwfc	sprintf@width+1,f,c
  1434  001162  4A4B               	infsnz	sprintf@f,f,c
  1435  001164  2A4C               	incf	sprintf@f+1,f,c
  1436                           
  1437                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1438  001166  C04B  FFF6         	movff	sprintf@f,tblptrl
  1439  00116A  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  1440  00116E                     	if	0	;tblptru may be non-zero
  1441  00116E                     	endif
  1442  00116E                     	if	0	;tblptru may be non-zero
  1443  00116E                     	endif
  1444  00116E  0008               	tblrd		*
  1445  001170  50F5               	movf	tablat,w,c
  1446  001172  EC61  F018         	call	_isdigit
  1447  001176  B0D8               	btfsc	status,0,c
  1448  001178  D7D2               	goto	l2754
  1449  00117A                     l2762:
  1450                           
  1451                           ;doprnt.c: 608: }
  1452                           ;doprnt.c: 611: if(*f == '.') {
  1453  00117A  C04B  FFF6         	movff	sprintf@f,tblptrl
  1454  00117E  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  1455  001182                     	if	0	;tblptru may be non-zero
  1456  001182                     	endif
  1457  001182                     	if	0	;tblptru may be non-zero
  1458  001182                     	endif
  1459  001182  0008               	tblrd		*
  1460  001184  50F5               	movf	tablat,w,c
  1461  001186  0A2E               	xorlw	46
  1462  001188  A4D8               	btfss	status,2,c
  1463  00118A  D02E               	goto	l2774
  1464                           
  1465                           ;doprnt.c: 612: flag |= 0x4000;
  1466  00118C  8C60               	bsf	sprintf@flag+1,6,c
  1467                           
  1468                           ;doprnt.c: 613: f++;
  1469  00118E  4A4B               	infsnz	sprintf@f,f,c
  1470  001190  2A4C               	incf	sprintf@f+1,f,c
  1471                           
  1472                           ;doprnt.c: 620: {
  1473                           ;doprnt.c: 621: prec = 0;
  1474  001192  0E00               	movlw	0
  1475  001194  6E6D               	movwf	sprintf@prec+1,c
  1476  001196  0E00               	movlw	0
  1477  001198  6E6C               	movwf	sprintf@prec,c
  1478                           
  1479                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1480  00119A  D01B               	goto	l2772
  1481  00119C                     l2768:
  1482                           
  1483                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1484  00119C  C06C  F00F         	movff	sprintf@prec,___wmul@multiplier
  1485  0011A0  C06D  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1486  0011A4  0E00               	movlw	0
  1487  0011A6  6E12               	movwf	___wmul@multiplicand+1,c
  1488  0011A8  0E0A               	movlw	10
  1489  0011AA  6E11               	movwf	___wmul@multiplicand,c
  1490  0011AC  EC06  F018         	call	___wmul	;wreg free
  1491  0011B0  C04B  FFF6         	movff	sprintf@f,tblptrl
  1492  0011B4  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  1493  0011B8                     	if	0	;tblptru may be non-zero
  1494  0011B8                     	endif
  1495  0011B8                     	if	0	;tblptru may be non-zero
  1496  0011B8                     	endif
  1497  0011B8  0008               	tblrd		*
  1498  0011BA  50F5               	movf	tablat,w,c
  1499  0011BC  260F               	addwf	?___wmul,f,c
  1500  0011BE  0E00               	movlw	0
  1501  0011C0  2210               	addwfc	?___wmul+1,f,c
  1502  0011C2  0ED0               	movlw	208
  1503  0011C4  240F               	addwf	?___wmul,w,c
  1504  0011C6  6E6C               	movwf	sprintf@prec,c
  1505  0011C8  0EFF               	movlw	255
  1506  0011CA  2010               	addwfc	?___wmul+1,w,c
  1507  0011CC  6E6D               	movwf	sprintf@prec+1,c
  1508  0011CE  4A4B               	infsnz	sprintf@f,f,c
  1509  0011D0  2A4C               	incf	sprintf@f+1,f,c
  1510  0011D2                     l2772:
  1511  0011D2  C04B  FFF6         	movff	sprintf@f,tblptrl
  1512  0011D6  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  1513  0011DA                     	if	0	;tblptru may be non-zero
  1514  0011DA                     	endif
  1515  0011DA                     	if	0	;tblptru may be non-zero
  1516  0011DA                     	endif
  1517  0011DA  0008               	tblrd		*
  1518  0011DC  50F5               	movf	tablat,w,c
  1519  0011DE  EC61  F018         	call	_isdigit
  1520  0011E2  A0D8               	btfss	status,0,c
  1521  0011E4  D009               	goto	l2782
  1522  0011E6  D7DA               	goto	l2768
  1523  0011E8                     l2774:
  1524                           
  1525                           ;doprnt.c: 626: prec = 0;
  1526  0011E8  0E00               	movlw	0
  1527  0011EA  6E6D               	movwf	sprintf@prec+1,c
  1528  0011EC  0E00               	movlw	0
  1529  0011EE  6E6C               	movwf	sprintf@prec,c
  1530                           
  1531                           ;doprnt.c: 628: flag |= 0x1000;
  1532  0011F0  8860               	bsf	sprintf@flag+1,4,c
  1533                           
  1534                           ;doprnt.c: 630: }
  1535                           ;doprnt.c: 635: switch(c = *f++) {
  1536  0011F2  D002               	goto	l2782
  1537  0011F4                     l2778:
  1538                           
  1539                           ;doprnt.c: 663: flag |= 0x400;
  1540  0011F4  8460               	bsf	sprintf@flag+1,2,c
  1541                           
  1542                           ;doprnt.c: 664: break;
  1543  0011F6  D011               	goto	l2784
  1544  0011F8                     l2782:
  1545  0011F8  C04B  FFF6         	movff	sprintf@f,tblptrl
  1546  0011FC  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  1547  001200  4A4B               	infsnz	sprintf@f,f,c
  1548  001202  2A4C               	incf	sprintf@f+1,f,c
  1549  001204                     	if	0	;tblptru may be non-zero
  1550  001204                     	endif
  1551  001204                     	if	0	;tblptru may be non-zero
  1552  001204                     	endif
  1553  001204  0008               	tblrd		*
  1554  001206  CFF5 F06E          	movff	tablat,sprintf@c
  1555  00120A  506E               	movf	sprintf@c,w,c
  1556                           
  1557                           ; Switch size 1, requested type "space"
  1558                           ; Number of cases is 2, Range of values is 0 to 102
  1559                           ; switch strategies available:
  1560                           ; Name         Instructions Cycles
  1561                           ; simple_byte            7     4 (average)
  1562                           ;	Chosen strategy is simple_byte
  1563  00120C  0A00               	xorlw	0	; case 0
  1564  00120E  B4D8               	btfsc	status,2,c
  1565  001210  D390               	goto	l2998
  1566  001212  0A66               	xorlw	102	; case 102
  1567  001214  B4D8               	btfsc	status,2,c
  1568  001216  D7EE               	goto	l2778
  1569  001218  D37F               	goto	l2996
  1570  00121A                     l2784:
  1571                           
  1572                           ;doprnt.c: 825: if(flag & (0x700)) {
  1573  00121A  0E07               	movlw	7
  1574  00121C  1460               	andwf	sprintf@flag+1,w,c
  1575  00121E  B4D8               	btfsc	status,2,c
  1576  001220  D2F0               	goto	l2948
  1577                           
  1578                           ;doprnt.c: 827: if(flag & 0x1000)
  1579  001222  A860               	btfss	sprintf@flag+1,4,c
  1580  001224  D004               	goto	l2790
  1581                           
  1582                           ;doprnt.c: 829: prec = 6;
  1583  001226  0E00               	movlw	0
  1584  001228  6E6D               	movwf	sprintf@prec+1,c
  1585  00122A  0E06               	movlw	6
  1586  00122C  6E6C               	movwf	sprintf@prec,c
  1587  00122E                     l2790:
  1588                           
  1589                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1590  00122E  C059  FFD9         	movff	sprintf@ap,fsr2l
  1591  001232  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  1592  001236  CFDE F069          	movff	postinc2,sprintf@fval
  1593  00123A  CFDE F06A          	movff	postinc2,sprintf@fval+1
  1594  00123E  CFDD F06B          	movff	postdec2,sprintf@fval+2
  1595  001242  0E03               	movlw	3
  1596  001244  2659               	addwf	sprintf@ap,f,c
  1597  001246  0E00               	movlw	0
  1598  001248  225A               	addwfc	sprintf@ap+1,f,c
  1599                           
  1600                           ;doprnt.c: 831: if(fval < 0.0) {
  1601  00124A  AE6B               	btfss	sprintf@fval+2,7,c
  1602  00124C  D010               	goto	l2800
  1603                           
  1604                           ;doprnt.c: 832: fval = -fval;
  1605  00124E  C069  F001         	movff	sprintf@fval,___ftneg@f1
  1606  001252  C06A  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1607  001256  C06B  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1608  00125A  EC2C  F018         	call	___ftneg	;wreg free
  1609  00125E  C001  F069         	movff	?___ftneg,sprintf@fval
  1610  001262  C002  F06A         	movff	?___ftneg+1,sprintf@fval+1
  1611  001266  C003  F06B         	movff	?___ftneg+2,sprintf@fval+2
  1612                           
  1613                           ;doprnt.c: 833: flag |= 0x03;
  1614  00126A  0E03               	movlw	3
  1615  00126C  125F               	iorwf	sprintf@flag,f,c
  1616  00126E                     l2800:
  1617                           
  1618                           ;doprnt.c: 834: }
  1619                           ;doprnt.c: 835: exp = 0;
  1620  00126E  0E00               	movlw	0
  1621  001270  6E68               	movwf	sprintf@exp+1,c
  1622  001272  0E00               	movlw	0
  1623  001274  6E67               	movwf	sprintf@exp,c
  1624                           
  1625                           ;doprnt.c: 836: if( fval!=0) {
  1626  001276  5069               	movf	sprintf@fval,w,c
  1627  001278  106A               	iorwf	sprintf@fval+1,w,c
  1628  00127A  106B               	iorwf	sprintf@fval+2,w,c
  1629  00127C  B4D8               	btfsc	status,2,c
  1630  00127E  D083               	goto	l2828
  1631                           
  1632                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1633  001280  0E82               	movlw	130
  1634  001282  6E50               	movwf	??_sprintf& (0+255),c
  1635  001284  0EFF               	movlw	255
  1636  001286  6E51               	movwf	(??_sprintf+1)& (0+255),c
  1637  001288  C069  F052         	movff	sprintf@fval,??_sprintf+2
  1638  00128C  C06A  F053         	movff	sprintf@fval+1,??_sprintf+3
  1639  001290  C06B  F054         	movff	sprintf@fval+2,??_sprintf+4
  1640  001294  C06C  F055         	movff	sprintf@fval+3,??_sprintf+5
  1641  001298  0E10               	movlw	16
  1642  00129A  D005               	goto	u2800
  1643  00129C                     u2805:
  1644  00129C  90D8               	bcf	status,0,c
  1645  00129E  3255               	rrcf	??_sprintf+5,f,c
  1646  0012A0  3254               	rrcf	??_sprintf+4,f,c
  1647  0012A2  3253               	rrcf	??_sprintf+3,f,c
  1648  0012A4  3252               	rrcf	??_sprintf+2,f,c
  1649  0012A6                     u2800:
  1650  0012A6  2EE8               	decfsz	wreg,f,c
  1651  0012A8  D7F9               	goto	u2805
  1652  0012AA  5052               	movf	??_sprintf+2,w,c
  1653  0012AC  2450               	addwf	??_sprintf,w,c
  1654  0012AE  6E67               	movwf	sprintf@exp,c
  1655  0012B0  0E00               	movlw	0
  1656  0012B2  2051               	addwfc	??_sprintf+1,w,c
  1657  0012B4  6E68               	movwf	sprintf@exp+1,c
  1658                           
  1659                           ;doprnt.c: 838: exp--;
  1660  0012B6  0667               	decf	sprintf@exp,f,c
  1661  0012B8  A0D8               	btfss	status,0,c
  1662  0012BA  0668               	decf	sprintf@exp+1,f,c
  1663                           
  1664                           ;doprnt.c: 839: exp *= 3;
  1665  0012BC  C067  F00F         	movff	sprintf@exp,___wmul@multiplier
  1666  0012C0  C068  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1667  0012C4  0E00               	movlw	0
  1668  0012C6  6E12               	movwf	___wmul@multiplicand+1,c
  1669  0012C8  0E03               	movlw	3
  1670  0012CA  6E11               	movwf	___wmul@multiplicand,c
  1671  0012CC  EC06  F018         	call	___wmul	;wreg free
  1672  0012D0  C00F  F067         	movff	?___wmul,sprintf@exp
  1673  0012D4  C010  F068         	movff	?___wmul+1,sprintf@exp+1
  1674                           
  1675                           ;doprnt.c: 840: exp /= 10;
  1676  0012D8  C067  F007         	movff	sprintf@exp,___awdiv@dividend
  1677  0012DC  C068  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1678  0012E0  0E00               	movlw	0
  1679  0012E2  6E0A               	movwf	___awdiv@divisor+1,c
  1680  0012E4  0E0A               	movlw	10
  1681  0012E6  6E09               	movwf	___awdiv@divisor,c
  1682  0012E8  ECBF  F015         	call	___awdiv	;wreg free
  1683  0012EC  C007  F067         	movff	?___awdiv,sprintf@exp
  1684  0012F0  C008  F068         	movff	?___awdiv+1,sprintf@exp+1
  1685                           
  1686                           ;doprnt.c: 841: if(exp < 0)
  1687  0012F4  AE68               	btfss	sprintf@exp+1,7,c
  1688  0012F6  D003               	goto	l2816
  1689                           
  1690                           ;doprnt.c: 842: exp--;
  1691  0012F8  0667               	decf	sprintf@exp,f,c
  1692  0012FA  A0D8               	btfss	status,0,c
  1693  0012FC  0668               	decf	sprintf@exp+1,f,c
  1694  0012FE                     l2816:
  1695                           
  1696                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1697  0012FE  5067               	movf	sprintf@exp,w,c
  1698  001300  0800               	sublw	0
  1699  001302  ECA0  F00C         	call	_scale
  1700  001306  C024  F063         	movff	?_scale,sprintf@tmpval
  1701  00130A  C025  F064         	movff	?_scale+1,sprintf@tmpval+1
  1702  00130E  C026  F065         	movff	?_scale+2,sprintf@tmpval+2
  1703                           
  1704                           ;doprnt.c: 847: tmpval.integ *= fval;
  1705  001312  C063  F015         	movff	sprintf@tmpval,___ftmul@f1
  1706  001316  C064  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1707  00131A  C065  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1708  00131E  C069  F018         	movff	sprintf@fval,___ftmul@f2
  1709  001322  C06A  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1710  001326  C06B  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1711  00132A  EC9B  F013         	call	___ftmul	;wreg free
  1712  00132E  C015  F063         	movff	?___ftmul,sprintf@tmpval
  1713  001332  C016  F064         	movff	?___ftmul+1,sprintf@tmpval+1
  1714  001336  C017  F065         	movff	?___ftmul+2,sprintf@tmpval+2
  1715                           
  1716                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1717  00133A  C063  F001         	movff	sprintf@tmpval,___ftge@ff1
  1718  00133E  C064  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1719  001342  C065  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1720  001346  0E00               	movlw	0
  1721  001348  6E04               	movwf	___ftge@ff2,c
  1722  00134A  0E80               	movlw	128
  1723  00134C  6E05               	movwf	___ftge@ff2+1,c
  1724  00134E  0E3F               	movlw	63
  1725  001350  6E06               	movwf	___ftge@ff2+2,c
  1726  001352  EC77  F015         	call	___ftge	;wreg free
  1727  001356  B0D8               	btfsc	status,0,c
  1728  001358  D004               	goto	l2824
  1729                           
  1730                           ;doprnt.c: 849: exp--;
  1731  00135A  0667               	decf	sprintf@exp,f,c
  1732  00135C  A0D8               	btfss	status,0,c
  1733  00135E  0668               	decf	sprintf@exp+1,f,c
  1734  001360  D012               	goto	l2828
  1735  001362                     l2824:
  1736                           
  1737                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1738  001362  C063  F001         	movff	sprintf@tmpval,___ftge@ff1
  1739  001366  C064  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1740  00136A  C065  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1741  00136E  0E00               	movlw	0
  1742  001370  6E04               	movwf	___ftge@ff2,c
  1743  001372  0E20               	movlw	32
  1744  001374  6E05               	movwf	___ftge@ff2+1,c
  1745  001376  0E41               	movlw	65
  1746  001378  6E06               	movwf	___ftge@ff2+2,c
  1747  00137A  EC77  F015         	call	___ftge	;wreg free
  1748  00137E  A0D8               	btfss	status,0,c
  1749  001380  D002               	goto	l2828
  1750                           
  1751                           ;doprnt.c: 851: exp++;
  1752  001382  4A67               	infsnz	sprintf@exp,f,c
  1753  001384  2A68               	incf	sprintf@exp+1,f,c
  1754  001386                     l2828:
  1755                           
  1756                           ;doprnt.c: 852: }
  1757                           ;doprnt.c: 1112: if(prec <= 12)
  1758  001386  BE6D               	btfsc	sprintf@prec+1,7,c
  1759  001388  D006               	goto	l2830
  1760  00138A  506D               	movf	sprintf@prec+1,w,c
  1761  00138C  E11B               	bnz	l2832
  1762  00138E  0E0D               	movlw	13
  1763  001390  5C6C               	subwf	sprintf@prec,w,c
  1764  001392  B0D8               	btfsc	status,0,c
  1765  001394  D017               	goto	l2832
  1766  001396                     l2830:
  1767                           
  1768                           ;doprnt.c: 1113: fval += fround(prec);
  1769  001396  C069  F02E         	movff	sprintf@fval,___ftadd@f1
  1770  00139A  C06A  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1771  00139E  C06B  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1772  0013A2  506C               	movf	sprintf@prec,w,c
  1773  0013A4  ECFB  F00F         	call	_fround
  1774  0013A8  C024  F031         	movff	?_fround,___ftadd@f2
  1775  0013AC  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1776  0013B0  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1777  0013B4  EC1E  F011         	call	___ftadd	;wreg free
  1778  0013B8  C02E  F069         	movff	?___ftadd,sprintf@fval
  1779  0013BC  C02F  F06A         	movff	?___ftadd+1,sprintf@fval+1
  1780  0013C0  C030  F06B         	movff	?___ftadd+2,sprintf@fval+2
  1781  0013C4                     l2832:
  1782                           
  1783                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1784  0013C4  BE68               	btfsc	sprintf@exp+1,7,c
  1785  0013C6  D006               	goto	l2834
  1786  0013C8  5068               	movf	sprintf@exp+1,w,c
  1787  0013CA  E11E               	bnz	l2840
  1788  0013CC  0E0A               	movlw	10
  1789  0013CE  5C67               	subwf	sprintf@exp,w,c
  1790  0013D0  B0D8               	btfsc	status,0,c
  1791  0013D2  D01A               	goto	l2840
  1792  0013D4                     l2834:
  1793  0013D4  5069               	movf	sprintf@fval,w,c
  1794  0013D6  106A               	iorwf	sprintf@fval+1,w,c
  1795  0013D8  106B               	iorwf	sprintf@fval+2,w,c
  1796  0013DA  B4D8               	btfsc	status,2,c
  1797  0013DC  D051               	goto	l2854
  1798  0013DE  C069  F03A         	movff	sprintf@fval,___fttol@f1
  1799  0013E2  C06A  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  1800  0013E6  C06B  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  1801  0013EA  EC21  F013         	call	___fttol	;wreg free
  1802  0013EE  503A               	movf	?___fttol,w,c
  1803  0013F0  103B               	iorwf	?___fttol+1,w,c
  1804  0013F2  103C               	iorwf	?___fttol+2,w,c
  1805  0013F4  103D               	iorwf	?___fttol+3,w,c
  1806  0013F6  B4D8               	btfsc	status,2,c
  1807  0013F8  BE68               	btfsc	sprintf@exp+1,7,c
  1808  0013FA  D042               	goto	l2854
  1809  0013FC  5068               	movf	sprintf@exp+1,w,c
  1810  0013FE  E104               	bnz	l2840
  1811  001400  0E02               	movlw	2
  1812  001402  5C67               	subwf	sprintf@exp,w,c
  1813  001404  A0D8               	btfss	status,0,c
  1814  001406  D03C               	goto	l2854
  1815  001408                     l2840:
  1816                           
  1817                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1818  001408  C063  F001         	movff	sprintf@tmpval,___ftge@ff1
  1819  00140C  C064  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1820  001410  C065  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1821  001414  0E70               	movlw	112
  1822  001416  6E04               	movwf	___ftge@ff2,c
  1823  001418  0E89               	movlw	137
  1824  00141A  6E05               	movwf	___ftge@ff2+1,c
  1825  00141C  0E40               	movlw	64
  1826  00141E  6E06               	movwf	___ftge@ff2+2,c
  1827  001420  EC77  F015         	call	___ftge	;wreg free
  1828  001424  B0D8               	btfsc	status,0,c
  1829  001426  D002               	goto	l2844
  1830                           
  1831                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1832  001428  0EF7               	movlw	247
  1833  00142A  D001               	goto	L1
  1834  00142C                     l2844:
  1835                           
  1836                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1837  00142C  0EF8               	movlw	248
  1838  00142E                     L1:
  1839  00142E  2667               	addwf	sprintf@exp,f,c
  1840  001430  0EFF               	movlw	255
  1841  001432  2268               	addwfc	sprintf@exp+1,f,c
  1842                           
  1843                           ;doprnt.c: 1124: }
  1844                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1845  001434  5067               	movf	sprintf@exp,w,c
  1846  001436  ECA0  F00C         	call	_scale
  1847  00143A  C024  F063         	movff	?_scale,sprintf@tmpval
  1848  00143E  C025  F064         	movff	?_scale+1,sprintf@tmpval+1
  1849  001442  C026  F065         	movff	?_scale+2,sprintf@tmpval+2
  1850                           
  1851                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1852  001446  C069  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1853  00144A  C06A  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1854  00144E  C06B  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1855  001452  C063  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1856  001456  C064  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1857  00145A  C065  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1858  00145E  ECF4  F011         	call	__tdiv_to_l_	;wreg free
  1859  001462  C001  F05B         	movff	?__tdiv_to_l_,sprintf@val
  1860  001466  C002  F05C         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1861  00146A  C003  F05D         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1862  00146E  C004  F05E         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1863                           
  1864                           ;doprnt.c: 1129: fval = 0.0;
  1865  001472  0E00               	movlw	0
  1866  001474  6E69               	movwf	sprintf@fval,c
  1867  001476  0E00               	movlw	0
  1868  001478  6E6A               	movwf	sprintf@fval+1,c
  1869  00147A  0E00               	movlw	0
  1870  00147C  6E6B               	movwf	sprintf@fval+2,c
  1871                           
  1872                           ;doprnt.c: 1130: } else {
  1873  00147E  D032               	goto	l2858
  1874  001480                     l2854:
  1875                           
  1876                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1877  001480  C069  F03A         	movff	sprintf@fval,___fttol@f1
  1878  001484  C06A  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  1879  001488  C06B  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  1880  00148C  EC21  F013         	call	___fttol	;wreg free
  1881  001490  C03A  F05B         	movff	?___fttol,sprintf@val
  1882  001494  C03B  F05C         	movff	?___fttol+1,sprintf@val+1
  1883  001498  C03C  F05D         	movff	?___fttol+2,sprintf@val+2
  1884  00149C  C03D  F05E         	movff	?___fttol+3,sprintf@val+3
  1885                           
  1886                           ;doprnt.c: 1132: fval -= (double)val;
  1887  0014A0  C069  F03A         	movff	sprintf@fval,___ftsub@f1
  1888  0014A4  C06A  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1889  0014A8  C06B  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1890  0014AC  C05B  F009         	movff	sprintf@val,___lltoft@c
  1891  0014B0  C05C  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1892  0014B4  C05D  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1893  0014B8  C05E  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1894  0014BC  ECAD  F016         	call	___lltoft	;wreg free
  1895  0014C0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1896  0014C4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1897  0014C8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1898  0014CC  EC59  F017         	call	___ftsub	;wreg free
  1899  0014D0  C03A  F069         	movff	?___ftsub,sprintf@fval
  1900  0014D4  C03B  F06A         	movff	?___ftsub+1,sprintf@fval+1
  1901  0014D8  C03C  F06B         	movff	?___ftsub+2,sprintf@fval+2
  1902                           
  1903                           ;doprnt.c: 1133: exp = 0;
  1904  0014DC  0E00               	movlw	0
  1905  0014DE  6E68               	movwf	sprintf@exp+1,c
  1906  0014E0  0E00               	movlw	0
  1907  0014E2  6E67               	movwf	sprintf@exp,c
  1908  0014E4                     l2858:
  1909                           
  1910                           ;doprnt.c: 1134: }
  1911                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1912  0014E4  0E01               	movlw	1
  1913  0014E6  6E6E               	movwf	sprintf@c,c
  1914  0014E8                     l2860:
  1915  0014E8  0E0A               	movlw	10
  1916  0014EA  186E               	xorwf	sprintf@c,w,c
  1917  0014EC  B4D8               	btfsc	status,2,c
  1918  0014EE  D018               	goto	l2872
  1919                           
  1920                           ;doprnt.c: 1137: if(val < dpowers[c])
  1921  0014F0  506E               	movf	sprintf@c,w,c
  1922  0014F2  0D04               	mullw	4
  1923  0014F4  0E01               	movlw	low _dpowers
  1924  0014F6  24F3               	addwf	prodl,w,c
  1925  0014F8  6EF6               	movwf	tblptrl,c
  1926  0014FA  0E10               	movlw	high _dpowers
  1927  0014FC  20F4               	addwfc	prodh,w,c
  1928  0014FE  6EF7               	movwf	tblptrh,c
  1929  001500                     	if	0	;There are less than 3 active tblptr bytes
  1930  001500                     	endif
  1931  001500  0009               	tblrd		*+
  1932  001502  50F5               	movf	tablat,w,c
  1933  001504  5C5B               	subwf	sprintf@val,w,c
  1934  001506  0009               	tblrd		*+
  1935  001508  50F5               	movf	tablat,w,c
  1936  00150A  585C               	subwfb	sprintf@val+1,w,c
  1937  00150C  0009               	tblrd		*+
  1938  00150E  50F5               	movf	tablat,w,c
  1939  001510  585D               	subwfb	sprintf@val+2,w,c
  1940  001512  0009               	tblrd		*+
  1941  001514  50F5               	movf	tablat,w,c
  1942  001516  585E               	subwfb	sprintf@val+3,w,c
  1943  001518  A0D8               	btfss	status,0,c
  1944  00151A  D002               	goto	l2872
  1945                           
  1946                           ;doprnt.c: 1138: break;
  1947  00151C  2A6E               	incf	sprintf@c,f,c
  1948  00151E  D7E4               	goto	l2860
  1949  001520                     l2872:
  1950                           
  1951                           ;doprnt.c: 1142: width -= prec + c + exp;
  1952  001520  C06E  F050         	movff	sprintf@c,??_sprintf
  1953  001524  6A51               	clrf	(??_sprintf+1)& (0+255),c
  1954  001526  BE50               	btfsc	??_sprintf& (0+255),7,c
  1955  001528  0651               	decf	(??_sprintf+1)& (0+255),f,c
  1956  00152A  506C               	movf	sprintf@prec,w,c
  1957  00152C  2650               	addwf	??_sprintf,f,c
  1958  00152E  506D               	movf	sprintf@prec+1,w,c
  1959  001530  2251               	addwfc	??_sprintf+1,f,c
  1960  001532  5067               	movf	sprintf@exp,w,c
  1961  001534  2650               	addwf	??_sprintf,f,c
  1962  001536  5068               	movf	sprintf@exp+1,w,c
  1963  001538  2251               	addwfc	??_sprintf+1,f,c
  1964  00153A  5050               	movf	??_sprintf,w,c
  1965  00153C  5E61               	subwf	sprintf@width,f,c
  1966  00153E  5051               	movf	??_sprintf+1,w,c
  1967  001540  5A62               	subwfb	sprintf@width+1,f,c
  1968                           
  1969                           ;doprnt.c: 1143: if(
  1970                           ;doprnt.c: 1147: prec)
  1971  001542  506C               	movf	sprintf@prec,w,c
  1972  001544  106D               	iorwf	sprintf@prec+1,w,c
  1973  001546  B4D8               	btfsc	status,2,c
  1974  001548  D003               	goto	l2876
  1975                           
  1976                           ;doprnt.c: 1148: width--;
  1977  00154A  0661               	decf	sprintf@width,f,c
  1978  00154C  A0D8               	btfss	status,0,c
  1979  00154E  0662               	decf	sprintf@width+1,f,c
  1980  001550                     l2876:
  1981                           
  1982                           ;doprnt.c: 1149: if(flag & 0x03)
  1983  001550  0E03               	movlw	3
  1984  001552  145F               	andwf	sprintf@flag,w,c
  1985  001554  6E50               	movwf	??_sprintf& (0+255),c
  1986  001556  0E00               	movlw	0
  1987  001558  1460               	andwf	sprintf@flag+1,w,c
  1988  00155A  6E51               	movwf	(??_sprintf+1)& (0+255),c
  1989  00155C  5050               	movf	??_sprintf,w,c
  1990  00155E  1051               	iorwf	??_sprintf+1,w,c
  1991  001560  B4D8               	btfsc	status,2,c
  1992  001562  D00C               	goto	l2886
  1993  001564  D008               	goto	l2884
  1994  001566                     l2880:
  1995                           
  1996                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1997  001566  C049  FFD9         	movff	sprintf@sp,fsr2l
  1998  00156A  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  1999  00156E  0E20               	movlw	32
  2000  001570  6EDF               	movwf	indf2,c
  2001  001572  4A49               	infsnz	sprintf@sp,f,c
  2002  001574  2A4A               	incf	sprintf@sp+1,f,c
  2003  001576                     l2884:
  2004                           
  2005                           ;doprnt.c: 1182: width--;
  2006  001576  0661               	decf	sprintf@width,f,c
  2007  001578  A0D8               	btfss	status,0,c
  2008  00157A  0662               	decf	sprintf@width+1,f,c
  2009  00157C                     l2886:
  2010  00157C  BE62               	btfsc	sprintf@width+1,7,c
  2011  00157E  D005               	goto	l2888
  2012  001580  5062               	movf	sprintf@width+1,w,c
  2013  001582  E1F1               	bnz	l2880
  2014  001584  0461               	decf	sprintf@width,w,c
  2015  001586  B0D8               	btfsc	status,0,c
  2016  001588  D7EE               	goto	l2880
  2017  00158A                     l2888:
  2018                           
  2019                           ;doprnt.c: 1183: }
  2020                           ;doprnt.c: 1188: if(flag & 0x03)
  2021  00158A  0E03               	movlw	3
  2022  00158C  145F               	andwf	sprintf@flag,w,c
  2023  00158E  6E50               	movwf	??_sprintf& (0+255),c
  2024  001590  0E00               	movlw	0
  2025  001592  1460               	andwf	sprintf@flag+1,w,c
  2026  001594  6E51               	movwf	(??_sprintf+1)& (0+255),c
  2027  001596  5050               	movf	??_sprintf,w,c
  2028  001598  1051               	iorwf	??_sprintf+1,w,c
  2029  00159A  B4D8               	btfsc	status,2,c
  2030  00159C  D051               	goto	l2902
  2031                           
  2032                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2033  00159E  C049  FFD9         	movff	sprintf@sp,fsr2l
  2034  0015A2  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2035  0015A6  0E2D               	movlw	45
  2036  0015A8  D049               	goto	L2
  2037  0015AA                     l2892:
  2038  0015AA  4A49               	infsnz	sprintf@sp,f,c
  2039  0015AC  2A4A               	incf	sprintf@sp+1,f,c
  2040                           
  2041                           ;doprnt.c: 1195: }
  2042                           ;doprnt.c: 1196: while(c--) {
  2043  0015AE  D048               	goto	l2902
  2044  0015B0                     l2894:
  2045                           
  2046                           ;doprnt.c: 1200: {
  2047                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2048  0015B0  C05B  F001         	movff	sprintf@val,___lldiv@dividend
  2049  0015B4  C05C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2050  0015B8  C05D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2051  0015BC  C05E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2052  0015C0  506E               	movf	sprintf@c,w,c
  2053  0015C2  0D04               	mullw	4
  2054  0015C4  0E01               	movlw	low _dpowers
  2055  0015C6  24F3               	addwf	prodl,w,c
  2056  0015C8  6EF6               	movwf	tblptrl,c
  2057  0015CA  0E10               	movlw	high _dpowers
  2058  0015CC  20F4               	addwfc	prodh,w,c
  2059  0015CE  6EF7               	movwf	tblptrh,c
  2060  0015D0                     	if	0	;There are less than 3 active tblptr bytes
  2061  0015D0                     	endif
  2062  0015D0  0009               	tblrd		*+
  2063  0015D2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2064  0015D6  0009               	tblrd		*+
  2065  0015D8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2066  0015DC  0009               	tblrd		*+
  2067  0015DE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2068  0015E2  000A               	tblrd		*-
  2069  0015E4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2070  0015E8  EC01  F016         	call	___lldiv	;wreg free
  2071  0015EC  C001  F063         	movff	?___lldiv,sprintf@tmpval
  2072  0015F0  C002  F064         	movff	?___lldiv+1,sprintf@tmpval+1
  2073  0015F4  C003  F065         	movff	?___lldiv+2,sprintf@tmpval+2
  2074  0015F8  C004  F066         	movff	?___lldiv+3,sprintf@tmpval+3
  2075                           
  2076                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2077  0015FC  C063  F001         	movff	sprintf@tmpval,___llmod@dividend
  2078  001600  C064  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2079  001604  C065  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2080  001608  C066  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2081  00160C  0E0A               	movlw	10
  2082  00160E  6E05               	movwf	___llmod@divisor,c
  2083  001610  0E00               	movlw	0
  2084  001612  6E06               	movwf	___llmod@divisor+1,c
  2085  001614  0E00               	movlw	0
  2086  001616  6E07               	movwf	___llmod@divisor+2,c
  2087  001618  0E00               	movlw	0
  2088  00161A  6E08               	movwf	___llmod@divisor+3,c
  2089  00161C  EC7A  F016         	call	___llmod	;wreg free
  2090  001620  C001  F063         	movff	?___llmod,sprintf@tmpval
  2091  001624  C002  F064         	movff	?___llmod+1,sprintf@tmpval+1
  2092  001628  C003  F065         	movff	?___llmod+2,sprintf@tmpval+2
  2093  00162C  C004  F066         	movff	?___llmod+3,sprintf@tmpval+3
  2094                           
  2095                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2096  001630  5063               	movf	sprintf@tmpval,w,c
  2097  001632  0F30               	addlw	48
  2098  001634  C049  FFD9         	movff	sprintf@sp,fsr2l
  2099  001638  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2100  00163C                     L2:
  2101  00163C  6EDF               	movwf	indf2,c
  2102  00163E  D7B5               	goto	l2892
  2103  001640                     l2902:
  2104  001640  066E               	decf	sprintf@c,f,c
  2105  001642  286E               	incf	sprintf@c,w,c
  2106  001644  B4D8               	btfsc	status,2,c
  2107  001646  D00C               	goto	l2910
  2108  001648  D7B3               	goto	l2894
  2109  00164A                     l2904:
  2110                           
  2111                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2112  00164A  C049  FFD9         	movff	sprintf@sp,fsr2l
  2113  00164E  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2114  001652  0E30               	movlw	48
  2115  001654  6EDF               	movwf	indf2,c
  2116  001656  4A49               	infsnz	sprintf@sp,f,c
  2117  001658  2A4A               	incf	sprintf@sp+1,f,c
  2118                           
  2119                           ;doprnt.c: 1209: exp--;
  2120  00165A  0667               	decf	sprintf@exp,f,c
  2121  00165C  A0D8               	btfss	status,0,c
  2122  00165E  0668               	decf	sprintf@exp+1,f,c
  2123  001660                     l2910:
  2124  001660  BE68               	btfsc	sprintf@exp+1,7,c
  2125  001662  D005               	goto	l2912
  2126  001664  5068               	movf	sprintf@exp+1,w,c
  2127  001666  E1F1               	bnz	l2904
  2128  001668  0467               	decf	sprintf@exp,w,c
  2129  00166A  B0D8               	btfsc	status,0,c
  2130  00166C  D7EE               	goto	l2904
  2131  00166E                     l2912:
  2132                           
  2133                           ;doprnt.c: 1210: }
  2134                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2135  00166E  BE6D               	btfsc	sprintf@prec+1,7,c
  2136  001670  D009               	goto	l247
  2137  001672  506D               	movf	sprintf@prec+1,w,c
  2138  001674  E104               	bnz	u2990
  2139  001676  0E09               	movlw	9
  2140  001678  5C6C               	subwf	sprintf@prec,w,c
  2141  00167A  A0D8               	btfss	status,0,c
  2142  00167C  D003               	goto	l247
  2143  00167E                     u2990:
  2144                           
  2145                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2146  00167E  0E08               	movlw	8
  2147  001680  6E6E               	movwf	sprintf@c,c
  2148  001682  D002               	goto	l2916
  2149  001684                     l247:
  2150                           
  2151                           ;doprnt.c: 1213: else
  2152                           ;doprnt.c: 1214: c = prec;
  2153  001684  C06C  F06E         	movff	sprintf@prec,sprintf@c
  2154  001688                     l2916:
  2155                           
  2156                           ;doprnt.c: 1215: prec -= c;
  2157  001688  506E               	movf	sprintf@c,w,c
  2158  00168A  5E6C               	subwf	sprintf@prec,f,c
  2159  00168C  0E00               	movlw	0
  2160  00168E  BE6E               	btfsc	sprintf@c,7,c
  2161  001690  0EFF               	movlw	255
  2162  001692  5A6D               	subwfb	sprintf@prec+1,f,c
  2163                           
  2164                           ;doprnt.c: 1219: if(c)
  2165  001694  506E               	movf	sprintf@c,w,c
  2166  001696  B4D8               	btfsc	status,2,c
  2167  001698  D008               	goto	l2924
  2168                           
  2169                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2170  00169A  C049  FFD9         	movff	sprintf@sp,fsr2l
  2171  00169E  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2172  0016A2  0E2E               	movlw	46
  2173  0016A4  6EDF               	movwf	indf2,c
  2174  0016A6  4A49               	infsnz	sprintf@sp,f,c
  2175  0016A8  2A4A               	incf	sprintf@sp+1,f,c
  2176  0016AA                     l2924:
  2177                           
  2178                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2179  0016AA  506E               	movf	sprintf@c,w,c
  2180  0016AC  ECA0  F00C         	call	_scale
  2181  0016B0  C024  F056         	movff	?_scale,_sprintf$1122
  2182  0016B4  C025  F057         	movff	?_scale+1,_sprintf$1122+1
  2183  0016B8  C026  F058         	movff	?_scale+2,_sprintf$1122+2
  2184                           
  2185                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2186  0016BC  C069  F018         	movff	sprintf@fval,___ftmul@f2
  2187  0016C0  C06A  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2188  0016C4  C06B  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2189  0016C8  C056  F015         	movff	_sprintf$1122,___ftmul@f1
  2190  0016CC  C057  F016         	movff	_sprintf$1122+1,___ftmul@f1+1
  2191  0016D0  C058  F017         	movff	_sprintf$1122+2,___ftmul@f1+2
  2192  0016D4  EC9B  F013         	call	___ftmul	;wreg free
  2193  0016D8  C015  F03A         	movff	?___ftmul,___fttol@f1
  2194  0016DC  C016  F03B         	movff	?___ftmul+1,___fttol@f1+1
  2195  0016E0  C017  F03C         	movff	?___ftmul+2,___fttol@f1+2
  2196  0016E4  EC21  F013         	call	___fttol	;wreg free
  2197  0016E8  C03A  F05B         	movff	?___fttol,sprintf@val
  2198  0016EC  C03B  F05C         	movff	?___fttol+1,sprintf@val+1
  2199  0016F0  C03C  F05D         	movff	?___fttol+2,sprintf@val+2
  2200  0016F4  C03D  F05E         	movff	?___fttol+3,sprintf@val+3
  2201                           
  2202                           ;doprnt.c: 1228: while(c--) {
  2203  0016F8  D06F               	goto	l2938
  2204  0016FA                     l2928:
  2205                           
  2206                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2207  0016FA  C05B  F001         	movff	sprintf@val,___lldiv@dividend
  2208  0016FE  C05C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2209  001702  C05D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2210  001706  C05E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2211  00170A  506E               	movf	sprintf@c,w,c
  2212  00170C  0D04               	mullw	4
  2213  00170E  0E01               	movlw	low _dpowers
  2214  001710  24F3               	addwf	prodl,w,c
  2215  001712  6EF6               	movwf	tblptrl,c
  2216  001714  0E10               	movlw	high _dpowers
  2217  001716  20F4               	addwfc	prodh,w,c
  2218  001718  6EF7               	movwf	tblptrh,c
  2219  00171A                     	if	0	;There are less than 3 active tblptr bytes
  2220  00171A                     	endif
  2221  00171A  0009               	tblrd		*+
  2222  00171C  CFF5 F005          	movff	tablat,___lldiv@divisor
  2223  001720  0009               	tblrd		*+
  2224  001722  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2225  001726  0009               	tblrd		*+
  2226  001728  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2227  00172C  000A               	tblrd		*-
  2228  00172E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2229  001732  EC01  F016         	call	___lldiv	;wreg free
  2230  001736  C001  F063         	movff	?___lldiv,sprintf@tmpval
  2231  00173A  C002  F064         	movff	?___lldiv+1,sprintf@tmpval+1
  2232  00173E  C003  F065         	movff	?___lldiv+2,sprintf@tmpval+2
  2233  001742  C004  F066         	movff	?___lldiv+3,sprintf@tmpval+3
  2234                           
  2235                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2236  001746  C063  F001         	movff	sprintf@tmpval,___llmod@dividend
  2237  00174A  C064  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2238  00174E  C065  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2239  001752  C066  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2240  001756  0E0A               	movlw	10
  2241  001758  6E05               	movwf	___llmod@divisor,c
  2242  00175A  0E00               	movlw	0
  2243  00175C  6E06               	movwf	___llmod@divisor+1,c
  2244  00175E  0E00               	movlw	0
  2245  001760  6E07               	movwf	___llmod@divisor+2,c
  2246  001762  0E00               	movlw	0
  2247  001764  6E08               	movwf	___llmod@divisor+3,c
  2248  001766  EC7A  F016         	call	___llmod	;wreg free
  2249  00176A  C001  F063         	movff	?___llmod,sprintf@tmpval
  2250  00176E  C002  F064         	movff	?___llmod+1,sprintf@tmpval+1
  2251  001772  C003  F065         	movff	?___llmod+2,sprintf@tmpval+2
  2252  001776  C004  F066         	movff	?___llmod+3,sprintf@tmpval+3
  2253                           
  2254                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2255  00177A  5063               	movf	sprintf@tmpval,w,c
  2256  00177C  0F30               	addlw	48
  2257  00177E  C049  FFD9         	movff	sprintf@sp,fsr2l
  2258  001782  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2259  001786  6EDF               	movwf	indf2,c
  2260  001788  4A49               	infsnz	sprintf@sp,f,c
  2261  00178A  2A4A               	incf	sprintf@sp+1,f,c
  2262                           
  2263                           ;doprnt.c: 1232: val %= dpowers[c];
  2264  00178C  C05B  F001         	movff	sprintf@val,___llmod@dividend
  2265  001790  C05C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2266  001794  C05D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2267  001798  C05E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2268  00179C  506E               	movf	sprintf@c,w,c
  2269  00179E  0D04               	mullw	4
  2270  0017A0  0E01               	movlw	low _dpowers
  2271  0017A2  24F3               	addwf	prodl,w,c
  2272  0017A4  6EF6               	movwf	tblptrl,c
  2273  0017A6  0E10               	movlw	high _dpowers
  2274  0017A8  20F4               	addwfc	prodh,w,c
  2275  0017AA  6EF7               	movwf	tblptrh,c
  2276  0017AC                     	if	0	;There are less than 3 active tblptr bytes
  2277  0017AC                     	endif
  2278  0017AC  0009               	tblrd		*+
  2279  0017AE  CFF5 F005          	movff	tablat,___llmod@divisor
  2280  0017B2  0009               	tblrd		*+
  2281  0017B4  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2282  0017B8  0009               	tblrd		*+
  2283  0017BA  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2284  0017BE  000A               	tblrd		*-
  2285  0017C0  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2286  0017C4  EC7A  F016         	call	___llmod	;wreg free
  2287  0017C8  C001  F05B         	movff	?___llmod,sprintf@val
  2288  0017CC  C002  F05C         	movff	?___llmod+1,sprintf@val+1
  2289  0017D0  C003  F05D         	movff	?___llmod+2,sprintf@val+2
  2290  0017D4  C004  F05E         	movff	?___llmod+3,sprintf@val+3
  2291  0017D8                     l2938:
  2292  0017D8  066E               	decf	sprintf@c,f,c
  2293  0017DA  286E               	incf	sprintf@c,w,c
  2294  0017DC  B4D8               	btfsc	status,2,c
  2295  0017DE  D00C               	goto	l2946
  2296  0017E0  D78C               	goto	l2928
  2297  0017E2                     l2940:
  2298                           
  2299                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2300  0017E2  C049  FFD9         	movff	sprintf@sp,fsr2l
  2301  0017E6  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2302  0017EA  0E30               	movlw	48
  2303  0017EC  6EDF               	movwf	indf2,c
  2304  0017EE  4A49               	infsnz	sprintf@sp,f,c
  2305  0017F0  2A4A               	incf	sprintf@sp+1,f,c
  2306                           
  2307                           ;doprnt.c: 1237: prec--;
  2308  0017F2  066C               	decf	sprintf@prec,f,c
  2309  0017F4  A0D8               	btfss	status,0,c
  2310  0017F6  066D               	decf	sprintf@prec+1,f,c
  2311  0017F8                     l2946:
  2312  0017F8  506C               	movf	sprintf@prec,w,c
  2313  0017FA  106D               	iorwf	sprintf@prec+1,w,c
  2314  0017FC  B4D8               	btfsc	status,2,c
  2315  0017FE  D08C               	goto	l2996
  2316  001800  D7F0               	goto	l2940
  2317  001802                     l2948:
  2318                           
  2319                           ;doprnt.c: 1246: }
  2320                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2321  001802  506C               	movf	sprintf@prec,w,c
  2322  001804  106D               	iorwf	sprintf@prec+1,w,c
  2323  001806  A4D8               	btfss	status,2,c
  2324  001808  D008               	goto	l2954
  2325  00180A  505B               	movf	sprintf@val,w,c
  2326  00180C  105C               	iorwf	sprintf@val+1,w,c
  2327  00180E  105D               	iorwf	sprintf@val+2,w,c
  2328  001810  105E               	iorwf	sprintf@val+3,w,c
  2329  001812  A4D8               	btfss	status,2,c
  2330  001814  D002               	goto	l2954
  2331                           
  2332                           ;doprnt.c: 1291: prec++;
  2333  001816  4A6C               	infsnz	sprintf@prec,f,c
  2334  001818  2A6D               	incf	sprintf@prec+1,f,c
  2335  00181A                     l2954:
  2336                           
  2337                           ;doprnt.c: 1339: if(c < prec)
  2338  00181A  0E80               	movlw	128
  2339  00181C  BE6E               	btfsc	sprintf@c,7,c
  2340  00181E  0E7F               	movlw	127
  2341  001820  6E50               	movwf	??_sprintf& (0+255),c
  2342  001822  506C               	movf	sprintf@prec,w,c
  2343  001824  5C6E               	subwf	sprintf@c,w,c
  2344  001826  506D               	movf	sprintf@prec+1,w,c
  2345  001828  0A80               	xorlw	128
  2346  00182A  5850               	subwfb	??_sprintf& (0+255),w,c
  2347  00182C  B0D8               	btfsc	status,0,c
  2348  00182E  D003               	goto	l2958
  2349                           
  2350                           ;doprnt.c: 1340: c = prec;
  2351  001830  C06C  F06E         	movff	sprintf@prec,sprintf@c
  2352  001834  D010               	goto	l2962
  2353  001836                     l2958:
  2354                           
  2355                           ;doprnt.c: 1341: else if(prec < c)
  2356  001836  506D               	movf	sprintf@prec+1,w,c
  2357  001838  0A80               	xorlw	128
  2358  00183A  6E50               	movwf	??_sprintf& (0+255),c
  2359  00183C  506E               	movf	sprintf@c,w,c
  2360  00183E  5C6C               	subwf	sprintf@prec,w,c
  2361  001840  0E80               	movlw	128
  2362  001842  BE6E               	btfsc	sprintf@c,7,c
  2363  001844  0E7F               	movlw	127
  2364  001846  5850               	subwfb	??_sprintf& (0+255),w,c
  2365  001848  B0D8               	btfsc	status,0,c
  2366  00184A  D005               	goto	l2962
  2367                           
  2368                           ;doprnt.c: 1342: prec = c;
  2369  00184C  506E               	movf	sprintf@c,w,c
  2370  00184E  6E6C               	movwf	sprintf@prec,c
  2371  001850  6A6D               	clrf	sprintf@prec+1,c
  2372  001852  BE6C               	btfsc	sprintf@prec,7,c
  2373  001854  066D               	decf	sprintf@prec+1,f,c
  2374  001856                     l2962:
  2375                           
  2376                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2377  001856  5061               	movf	sprintf@width,w,c
  2378  001858  1062               	iorwf	sprintf@width+1,w,c
  2379  00185A  B4D8               	btfsc	status,2,c
  2380  00185C  D00D               	goto	l2968
  2381  00185E  0E03               	movlw	3
  2382  001860  145F               	andwf	sprintf@flag,w,c
  2383  001862  6E50               	movwf	??_sprintf& (0+255),c
  2384  001864  0E00               	movlw	0
  2385  001866  1460               	andwf	sprintf@flag+1,w,c
  2386  001868  6E51               	movwf	(??_sprintf+1)& (0+255),c
  2387  00186A  5050               	movf	??_sprintf,w,c
  2388  00186C  1051               	iorwf	??_sprintf+1,w,c
  2389  00186E  B4D8               	btfsc	status,2,c
  2390  001870  D003               	goto	l2968
  2391                           
  2392                           ;doprnt.c: 1346: width--;
  2393  001872  0661               	decf	sprintf@width,f,c
  2394  001874  A0D8               	btfss	status,0,c
  2395  001876  0662               	decf	sprintf@width+1,f,c
  2396  001878                     l2968:
  2397                           
  2398                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2399  001878  AC60               	btfss	sprintf@flag+1,6,c
  2400  00187A  D013               	goto	l2976
  2401                           
  2402                           ;doprnt.c: 1349: if(width > prec)
  2403  00187C  5061               	movf	sprintf@width,w,c
  2404  00187E  5C6C               	subwf	sprintf@prec,w,c
  2405  001880  506D               	movf	sprintf@prec+1,w,c
  2406  001882  0A80               	xorlw	128
  2407  001884  6E50               	movwf	??_sprintf& (0+255),c
  2408  001886  5062               	movf	sprintf@width+1,w,c
  2409  001888  0A80               	xorlw	128
  2410  00188A  5850               	subwfb	??_sprintf& (0+255),w,c
  2411  00188C  B0D8               	btfsc	status,0,c
  2412  00188E  D005               	goto	l2974
  2413                           
  2414                           ;doprnt.c: 1350: width -= prec;
  2415  001890  506C               	movf	sprintf@prec,w,c
  2416  001892  5E61               	subwf	sprintf@width,f,c
  2417  001894  506D               	movf	sprintf@prec+1,w,c
  2418  001896  5A62               	subwfb	sprintf@width+1,f,c
  2419  001898  D004               	goto	l2976
  2420  00189A                     l2974:
  2421                           
  2422                           ;doprnt.c: 1351: else
  2423                           ;doprnt.c: 1352: width = 0;
  2424  00189A  0E00               	movlw	0
  2425  00189C  6E62               	movwf	sprintf@width+1,c
  2426  00189E  0E00               	movlw	0
  2427  0018A0  6E61               	movwf	sprintf@width,c
  2428  0018A2                     l2976:
  2429                           
  2430                           ;doprnt.c: 1353: }
  2431                           ;doprnt.c: 1381: if(width > c)
  2432  0018A2  0E80               	movlw	128
  2433  0018A4  BE6E               	btfsc	sprintf@c,7,c
  2434  0018A6  0E7F               	movlw	127
  2435  0018A8  6E50               	movwf	??_sprintf& (0+255),c
  2436  0018AA  5061               	movf	sprintf@width,w,c
  2437  0018AC  5C6E               	subwf	sprintf@c,w,c
  2438  0018AE  5062               	movf	sprintf@width+1,w,c
  2439  0018B0  0A80               	xorlw	128
  2440  0018B2  5850               	subwfb	??_sprintf& (0+255),w,c
  2441  0018B4  B0D8               	btfsc	status,0,c
  2442  0018B6  D007               	goto	l2980
  2443                           
  2444                           ;doprnt.c: 1382: width -= c;
  2445  0018B8  506E               	movf	sprintf@c,w,c
  2446  0018BA  5E61               	subwf	sprintf@width,f,c
  2447  0018BC  0E00               	movlw	0
  2448  0018BE  BE6E               	btfsc	sprintf@c,7,c
  2449  0018C0  0EFF               	movlw	255
  2450  0018C2  5A62               	subwfb	sprintf@width+1,f,c
  2451  0018C4  D004               	goto	l2982
  2452  0018C6                     l2980:
  2453                           
  2454                           ;doprnt.c: 1383: else
  2455                           ;doprnt.c: 1384: width = 0;
  2456  0018C6  0E00               	movlw	0
  2457  0018C8  6E62               	movwf	sprintf@width+1,c
  2458  0018CA  0E00               	movlw	0
  2459  0018CC  6E61               	movwf	sprintf@width,c
  2460  0018CE                     l2982:
  2461                           
  2462                           ;doprnt.c: 1422: {
  2463                           ;doprnt.c: 1424: if(width
  2464                           ;doprnt.c: 1428: )
  2465  0018CE  5061               	movf	sprintf@width,w,c
  2466  0018D0  1062               	iorwf	sprintf@width+1,w,c
  2467  0018D2  B4D8               	btfsc	status,2,c
  2468  0018D4  D00F               	goto	l2990
  2469  0018D6                     l2984:
  2470                           
  2471                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2472  0018D6  C049  FFD9         	movff	sprintf@sp,fsr2l
  2473  0018DA  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2474  0018DE  0E20               	movlw	32
  2475  0018E0  6EDF               	movwf	indf2,c
  2476  0018E2  4A49               	infsnz	sprintf@sp,f,c
  2477  0018E4  2A4A               	incf	sprintf@sp+1,f,c
  2478                           
  2479                           ;doprnt.c: 1431: while(--width);
  2480  0018E6  0661               	decf	sprintf@width,f,c
  2481  0018E8  A0D8               	btfss	status,0,c
  2482  0018EA  0662               	decf	sprintf@width+1,f,c
  2483  0018EC  5061               	movf	sprintf@width,w,c
  2484  0018EE  1062               	iorwf	sprintf@width+1,w,c
  2485  0018F0  A4D8               	btfss	status,2,c
  2486  0018F2  D7F1               	goto	l2984
  2487  0018F4                     l2990:
  2488                           
  2489                           ;doprnt.c: 1438: if(flag & 0x03)
  2490  0018F4  0E03               	movlw	3
  2491  0018F6  145F               	andwf	sprintf@flag,w,c
  2492  0018F8  6E50               	movwf	??_sprintf& (0+255),c
  2493  0018FA  0E00               	movlw	0
  2494  0018FC  1460               	andwf	sprintf@flag+1,w,c
  2495  0018FE  6E51               	movwf	(??_sprintf+1)& (0+255),c
  2496  001900  5050               	movf	??_sprintf,w,c
  2497  001902  1051               	iorwf	??_sprintf+1,w,c
  2498  001904  B4D8               	btfsc	status,2,c
  2499  001906  D008               	goto	l2996
  2500                           
  2501                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2502  001908  C049  FFD9         	movff	sprintf@sp,fsr2l
  2503  00190C  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2504  001910  0E2D               	movlw	45
  2505  001912  6EDF               	movwf	indf2,c
  2506  001914                     l2994:
  2507  001914  4A49               	infsnz	sprintf@sp,f,c
  2508  001916  2A4A               	incf	sprintf@sp+1,f,c
  2509  001918                     l2996:
  2510  001918  C04B  FFF6         	movff	sprintf@f,tblptrl
  2511  00191C  C04C  FFF7         	movff	sprintf@f+1,tblptrh
  2512  001920  4A4B               	infsnz	sprintf@f,f,c
  2513  001922  2A4C               	incf	sprintf@f+1,f,c
  2514  001924                     	if	0	;tblptru may be non-zero
  2515  001924                     	endif
  2516  001924                     	if	0	;tblptru may be non-zero
  2517  001924                     	endif
  2518  001924  0008               	tblrd		*
  2519  001926  CFF5 F06E          	movff	tablat,sprintf@c
  2520  00192A  506E               	movf	sprintf@c,w,c
  2521  00192C  A4D8               	btfss	status,2,c
  2522  00192E  EF6D  F008         	goto	l2742
  2523  001932                     l2998:
  2524                           
  2525                           ;doprnt.c: 1538: *sp = 0;
  2526  001932  C049  FFD9         	movff	sprintf@sp,fsr2l
  2527  001936  C04A  FFDA         	movff	sprintf@sp+1,fsr2h
  2528  00193A  0E00               	movlw	0
  2529  00193C  6EDF               	movwf	indf2,c
  2530  00193E  0012               	return	
  2531  001940                     __end_of_sprintf:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           postinc0	equ	0xFEE
  2540                           wreg	equ	0xFE8
  2541                           postdec1	equ	0xFE5
  2542                           fsr1l	equ	0xFE1
  2543                           indf2	equ	0xFDF
  2544                           postinc2	equ	0xFDE
  2545                           postdec2	equ	0xFDD
  2546                           fsr2h	equ	0xFDA
  2547                           fsr2l	equ	0xFD9
  2548                           status	equ	0xFD8
  2549                           
  2550 ;; *************** function _scale *****************
  2551 ;; Defined at:
  2552 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  scl             1    wreg     char 
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;  scl             1   41[COMRAM] char 
  2557 ;; Return value:  Size  Location     Type
  2558 ;;                  3   35[COMRAM] char 
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2566 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;Total ram usage:        7 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    2
  2573 ;; This function calls:
  2574 ;;		___awdiv
  2575 ;;		___awmod
  2576 ;;		___ftmul
  2577 ;;		___wmul
  2578 ;; This function is called by:
  2579 ;;		_sprintf
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text2
  2584  001940                     __ptext2:
  2585                           	opt stack 0
  2586  001940                     _scale:
  2587                           	opt stack 27
  2588                           
  2589                           ;incstack = 0
  2590                           ;scale@scl stored from wreg
  2591  001940  6E2A               	movwf	scale@scl,c
  2592                           
  2593                           ;doprnt.c: 428: if(scl < 0) {
  2594  001942  AE2A               	btfss	scale@scl,7,c
  2595  001944  D0FB               	goto	l2396
  2596                           
  2597                           ;doprnt.c: 429: scl = -scl;
  2598  001946  6C2A               	negf	scale@scl,c
  2599                           
  2600                           ;doprnt.c: 430: if(scl>=110)
  2601  001948  502A               	movf	scale@scl,w,c
  2602  00194A  0A80               	xorlw	128
  2603  00194C  0F12               	addlw	-238
  2604  00194E  A0D8               	btfss	status,0,c
  2605  001950  D091               	goto	l2386
  2606                           
  2607                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2608  001952  0E00               	movlw	0
  2609  001954  6E12               	movwf	___wmul@multiplicand+1,c
  2610  001956  0E03               	movlw	3
  2611  001958  6E11               	movwf	___wmul@multiplicand,c
  2612  00195A  0E00               	movlw	0
  2613  00195C  6E0A               	movwf	___awdiv@divisor+1,c
  2614  00195E  0E0A               	movlw	10
  2615  001960  6E09               	movwf	___awdiv@divisor,c
  2616  001962  0E00               	movlw	0
  2617  001964  6E04               	movwf	___awmod@divisor+1,c
  2618  001966  0E64               	movlw	100
  2619  001968  6E03               	movwf	___awmod@divisor,c
  2620  00196A  502A               	movf	scale@scl,w,c
  2621  00196C  6E01               	movwf	___awmod@dividend,c
  2622  00196E  6A02               	clrf	___awmod@dividend+1,c
  2623  001970  BE01               	btfsc	___awmod@dividend,7,c
  2624  001972  0602               	decf	___awmod@dividend+1,f,c
  2625  001974  EC42  F016         	call	___awmod	;wreg free
  2626  001978  C001  F007         	movff	?___awmod,___awdiv@dividend
  2627  00197C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2628  001980  ECBF  F015         	call	___awdiv	;wreg free
  2629  001984  0E09               	movlw	9
  2630  001986  2407               	addwf	?___awdiv,w,c
  2631  001988  6E0F               	movwf	___wmul@multiplier,c
  2632  00198A  0E00               	movlw	0
  2633  00198C  2008               	addwfc	?___awdiv+1,w,c
  2634  00198E  6E10               	movwf	___wmul@multiplier+1,c
  2635  001990  EC06  F018         	call	___wmul	;wreg free
  2636  001994  0E29               	movlw	low __npowers_
  2637  001996  240F               	addwf	?___wmul,w,c
  2638  001998  6EF6               	movwf	tblptrl,c
  2639  00199A  0E10               	movlw	high __npowers_
  2640  00199C  2010               	addwfc	?___wmul+1,w,c
  2641  00199E  6EF7               	movwf	tblptrh,c
  2642  0019A0                     	if	0	;There are less than 3 active tblptr bytes
  2643  0019A0                     	endif
  2644  0019A0  0009               	tblrd		*+
  2645  0019A2  CFF5 F018          	movff	tablat,___ftmul@f2
  2646  0019A6  0009               	tblrd		*+
  2647  0019A8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2648  0019AC  000A               	tblrd		*-
  2649  0019AE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2650  0019B2  0E00               	movlw	0
  2651  0019B4  6E0A               	movwf	___awdiv@divisor+1,c
  2652  0019B6  0E64               	movlw	100
  2653  0019B8  6E09               	movwf	___awdiv@divisor,c
  2654  0019BA  502A               	movf	scale@scl,w,c
  2655  0019BC  6E07               	movwf	___awdiv@dividend,c
  2656  0019BE  6A08               	clrf	___awdiv@dividend+1,c
  2657  0019C0  BE07               	btfsc	___awdiv@dividend,7,c
  2658  0019C2  0608               	decf	___awdiv@dividend+1,f,c
  2659  0019C4  ECBF  F015         	call	___awdiv	;wreg free
  2660  0019C8  0E12               	movlw	18
  2661  0019CA  2407               	addwf	?___awdiv,w,c
  2662  0019CC  6E0F               	movwf	___wmul@multiplier,c
  2663  0019CE  0E00               	movlw	0
  2664  0019D0  2008               	addwfc	?___awdiv+1,w,c
  2665  0019D2  6E10               	movwf	___wmul@multiplier+1,c
  2666  0019D4  0E00               	movlw	0
  2667  0019D6  6E12               	movwf	___wmul@multiplicand+1,c
  2668  0019D8  0E03               	movlw	3
  2669  0019DA  6E11               	movwf	___wmul@multiplicand,c
  2670  0019DC  EC06  F018         	call	___wmul	;wreg free
  2671  0019E0  0E29               	movlw	low __npowers_
  2672  0019E2  240F               	addwf	?___wmul,w,c
  2673  0019E4  6EF6               	movwf	tblptrl,c
  2674  0019E6  0E10               	movlw	high __npowers_
  2675  0019E8  2010               	addwfc	?___wmul+1,w,c
  2676  0019EA  6EF7               	movwf	tblptrh,c
  2677  0019EC                     	if	0	;There are less than 3 active tblptr bytes
  2678  0019EC                     	endif
  2679  0019EC  0009               	tblrd		*+
  2680  0019EE  CFF5 F015          	movff	tablat,___ftmul@f1
  2681  0019F2  0009               	tblrd		*+
  2682  0019F4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2683  0019F8  000A               	tblrd		*-
  2684  0019FA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2685  0019FE  EC9B  F013         	call	___ftmul	;wreg free
  2686  001A02  C015  F027         	movff	?___ftmul,_scale$1121
  2687  001A06  C016  F028         	movff	?___ftmul+1,_scale$1121+1
  2688  001A0A  C017  F029         	movff	?___ftmul+2,_scale$1121+2
  2689                           
  2690                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2691  001A0E  C027  F015         	movff	_scale$1121,___ftmul@f1
  2692  001A12  C028  F016         	movff	_scale$1121+1,___ftmul@f1+1
  2693  001A16  C029  F017         	movff	_scale$1121+2,___ftmul@f1+2
  2694  001A1A  0E00               	movlw	0
  2695  001A1C  6E12               	movwf	___wmul@multiplicand+1,c
  2696  001A1E  0E03               	movlw	3
  2697  001A20  6E11               	movwf	___wmul@multiplicand,c
  2698  001A22  0E00               	movlw	0
  2699  001A24  6E04               	movwf	___awmod@divisor+1,c
  2700  001A26  0E0A               	movlw	10
  2701  001A28  6E03               	movwf	___awmod@divisor,c
  2702  001A2A  502A               	movf	scale@scl,w,c
  2703  001A2C  6E01               	movwf	___awmod@dividend,c
  2704  001A2E  6A02               	clrf	___awmod@dividend+1,c
  2705  001A30  BE01               	btfsc	___awmod@dividend,7,c
  2706  001A32  0602               	decf	___awmod@dividend+1,f,c
  2707  001A34  EC42  F016         	call	___awmod	;wreg free
  2708  001A38  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2709  001A3C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2710  001A40  EC06  F018         	call	___wmul	;wreg free
  2711  001A44  0E29               	movlw	low __npowers_
  2712  001A46  240F               	addwf	?___wmul,w,c
  2713  001A48  6EF6               	movwf	tblptrl,c
  2714  001A4A  0E10               	movlw	high __npowers_
  2715  001A4C  2010               	addwfc	?___wmul+1,w,c
  2716  001A4E  6EF7               	movwf	tblptrh,c
  2717  001A50                     	if	0	;There are less than 3 active tblptr bytes
  2718  001A50                     	endif
  2719  001A50  0009               	tblrd		*+
  2720  001A52  CFF5 F018          	movff	tablat,___ftmul@f2
  2721  001A56  0009               	tblrd		*+
  2722  001A58  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2723  001A5C  000A               	tblrd		*-
  2724  001A5E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2725  001A62  EC9B  F013         	call	___ftmul	;wreg free
  2726  001A66  C015  F024         	movff	?___ftmul,?_scale
  2727  001A6A  C016  F025         	movff	?___ftmul+1,?_scale+1
  2728  001A6E  C017  F026         	movff	?___ftmul+2,?_scale+2
  2729  001A72  0012               	return	
  2730  001A74                     l2386:
  2731                           
  2732                           ;doprnt.c: 432: else if(scl > 10)
  2733  001A74  502A               	movf	scale@scl,w,c
  2734  001A76  0A80               	xorlw	128
  2735  001A78  0F75               	addlw	-139
  2736  001A7A  A0D8               	btfss	status,0,c
  2737  001A7C  D04D               	goto	l2392
  2738                           
  2739                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2740  001A7E  0E00               	movlw	0
  2741  001A80  6E0A               	movwf	___awdiv@divisor+1,c
  2742  001A82  0E0A               	movlw	10
  2743  001A84  6E09               	movwf	___awdiv@divisor,c
  2744  001A86  502A               	movf	scale@scl,w,c
  2745  001A88  6E07               	movwf	___awdiv@dividend,c
  2746  001A8A  6A08               	clrf	___awdiv@dividend+1,c
  2747  001A8C  BE07               	btfsc	___awdiv@dividend,7,c
  2748  001A8E  0608               	decf	___awdiv@dividend+1,f,c
  2749  001A90  ECBF  F015         	call	___awdiv	;wreg free
  2750  001A94  0E09               	movlw	9
  2751  001A96  2407               	addwf	?___awdiv,w,c
  2752  001A98  6E0F               	movwf	___wmul@multiplier,c
  2753  001A9A  0E00               	movlw	0
  2754  001A9C  2008               	addwfc	?___awdiv+1,w,c
  2755  001A9E  6E10               	movwf	___wmul@multiplier+1,c
  2756  001AA0  0E00               	movlw	0
  2757  001AA2  6E12               	movwf	___wmul@multiplicand+1,c
  2758  001AA4  0E03               	movlw	3
  2759  001AA6  6E11               	movwf	___wmul@multiplicand,c
  2760  001AA8  EC06  F018         	call	___wmul	;wreg free
  2761  001AAC  0E29               	movlw	low __npowers_
  2762  001AAE  240F               	addwf	?___wmul,w,c
  2763  001AB0  6EF6               	movwf	tblptrl,c
  2764  001AB2  0E10               	movlw	high __npowers_
  2765  001AB4  2010               	addwfc	?___wmul+1,w,c
  2766  001AB6  6EF7               	movwf	tblptrh,c
  2767  001AB8                     	if	0	;There are less than 3 active tblptr bytes
  2768  001AB8                     	endif
  2769  001AB8  0009               	tblrd		*+
  2770  001ABA  CFF5 F015          	movff	tablat,___ftmul@f1
  2771  001ABE  0009               	tblrd		*+
  2772  001AC0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2773  001AC4  000A               	tblrd		*-
  2774  001AC6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2775  001ACA  0E00               	movlw	0
  2776  001ACC  6E12               	movwf	___wmul@multiplicand+1,c
  2777  001ACE  0E03               	movlw	3
  2778  001AD0  6E11               	movwf	___wmul@multiplicand,c
  2779  001AD2  0E00               	movlw	0
  2780  001AD4  6E04               	movwf	___awmod@divisor+1,c
  2781  001AD6  0E0A               	movlw	10
  2782  001AD8  6E03               	movwf	___awmod@divisor,c
  2783  001ADA  502A               	movf	scale@scl,w,c
  2784  001ADC  6E01               	movwf	___awmod@dividend,c
  2785  001ADE  6A02               	clrf	___awmod@dividend+1,c
  2786  001AE0  BE01               	btfsc	___awmod@dividend,7,c
  2787  001AE2  0602               	decf	___awmod@dividend+1,f,c
  2788  001AE4  EC42  F016         	call	___awmod	;wreg free
  2789  001AE8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2790  001AEC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2791  001AF0  EC06  F018         	call	___wmul	;wreg free
  2792  001AF4  0E29               	movlw	low __npowers_
  2793  001AF6  240F               	addwf	?___wmul,w,c
  2794  001AF8  6EF6               	movwf	tblptrl,c
  2795  001AFA  0E10               	movlw	high __npowers_
  2796  001AFC  2010               	addwfc	?___wmul+1,w,c
  2797  001AFE  6EF7               	movwf	tblptrh,c
  2798  001B00                     	if	0	;There are less than 3 active tblptr bytes
  2799  001B00                     	endif
  2800  001B00  0009               	tblrd		*+
  2801  001B02  CFF5 F018          	movff	tablat,___ftmul@f2
  2802  001B06  0009               	tblrd		*+
  2803  001B08  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2804  001B0C  000A               	tblrd		*-
  2805  001B0E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2806  001B12  EC9B  F013         	call	___ftmul	;wreg free
  2807  001B16  D7A7               	goto	L3
  2808  001B18                     l2392:
  2809                           
  2810                           ;doprnt.c: 434: return _npowers_[scl];
  2811  001B18  502A               	movf	scale@scl,w,c
  2812  001B1A  0D03               	mullw	3
  2813  001B1C  0E29               	movlw	low __npowers_
  2814  001B1E  24F3               	addwf	prodl,w,c
  2815  001B20  6EF6               	movwf	tblptrl,c
  2816  001B22  0E10               	movlw	high __npowers_
  2817  001B24  20F4               	addwfc	prodh,w,c
  2818  001B26  6EF7               	movwf	tblptrh,c
  2819  001B28                     	if	0	;There are less than 3 active tblptr bytes
  2820  001B28                     	endif
  2821  001B28  0009               	tblrd		*+
  2822  001B2A  CFF5 F024          	movff	tablat,?_scale
  2823  001B2E  0009               	tblrd		*+
  2824  001B30  CFF5 F025          	movff	tablat,?_scale+1
  2825  001B34  000A               	tblrd		*-
  2826  001B36  CFF5 F026          	movff	tablat,?_scale+2
  2827  001B3A  0012               	return	
  2828  001B3C                     l2396:
  2829                           
  2830                           ;doprnt.c: 435: }
  2831                           ;doprnt.c: 436: if(scl>=110)
  2832  001B3C  502A               	movf	scale@scl,w,c
  2833  001B3E  0A80               	xorlw	128
  2834  001B40  0F12               	addlw	-238
  2835  001B42  A0D8               	btfss	status,0,c
  2836  001B44  D091               	goto	l2404
  2837                           
  2838                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2839  001B46  0E00               	movlw	0
  2840  001B48  6E12               	movwf	___wmul@multiplicand+1,c
  2841  001B4A  0E03               	movlw	3
  2842  001B4C  6E11               	movwf	___wmul@multiplicand,c
  2843  001B4E  0E00               	movlw	0
  2844  001B50  6E0A               	movwf	___awdiv@divisor+1,c
  2845  001B52  0E0A               	movlw	10
  2846  001B54  6E09               	movwf	___awdiv@divisor,c
  2847  001B56  0E00               	movlw	0
  2848  001B58  6E04               	movwf	___awmod@divisor+1,c
  2849  001B5A  0E64               	movlw	100
  2850  001B5C  6E03               	movwf	___awmod@divisor,c
  2851  001B5E  502A               	movf	scale@scl,w,c
  2852  001B60  6E01               	movwf	___awmod@dividend,c
  2853  001B62  6A02               	clrf	___awmod@dividend+1,c
  2854  001B64  BE01               	btfsc	___awmod@dividend,7,c
  2855  001B66  0602               	decf	___awmod@dividend+1,f,c
  2856  001B68  EC42  F016         	call	___awmod	;wreg free
  2857  001B6C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2858  001B70  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2859  001B74  ECBF  F015         	call	___awdiv	;wreg free
  2860  001B78  0E09               	movlw	9
  2861  001B7A  2407               	addwf	?___awdiv,w,c
  2862  001B7C  6E0F               	movwf	___wmul@multiplier,c
  2863  001B7E  0E00               	movlw	0
  2864  001B80  2008               	addwfc	?___awdiv+1,w,c
  2865  001B82  6E10               	movwf	___wmul@multiplier+1,c
  2866  001B84  EC06  F018         	call	___wmul	;wreg free
  2867  001B88  0E50               	movlw	low __powers_
  2868  001B8A  240F               	addwf	?___wmul,w,c
  2869  001B8C  6EF6               	movwf	tblptrl,c
  2870  001B8E  0E10               	movlw	high __powers_
  2871  001B90  2010               	addwfc	?___wmul+1,w,c
  2872  001B92  6EF7               	movwf	tblptrh,c
  2873  001B94                     	if	0	;There are less than 3 active tblptr bytes
  2874  001B94                     	endif
  2875  001B94  0009               	tblrd		*+
  2876  001B96  CFF5 F018          	movff	tablat,___ftmul@f2
  2877  001B9A  0009               	tblrd		*+
  2878  001B9C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2879  001BA0  000A               	tblrd		*-
  2880  001BA2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2881  001BA6  0E00               	movlw	0
  2882  001BA8  6E0A               	movwf	___awdiv@divisor+1,c
  2883  001BAA  0E64               	movlw	100
  2884  001BAC  6E09               	movwf	___awdiv@divisor,c
  2885  001BAE  502A               	movf	scale@scl,w,c
  2886  001BB0  6E07               	movwf	___awdiv@dividend,c
  2887  001BB2  6A08               	clrf	___awdiv@dividend+1,c
  2888  001BB4  BE07               	btfsc	___awdiv@dividend,7,c
  2889  001BB6  0608               	decf	___awdiv@dividend+1,f,c
  2890  001BB8  ECBF  F015         	call	___awdiv	;wreg free
  2891  001BBC  0E12               	movlw	18
  2892  001BBE  2407               	addwf	?___awdiv,w,c
  2893  001BC0  6E0F               	movwf	___wmul@multiplier,c
  2894  001BC2  0E00               	movlw	0
  2895  001BC4  2008               	addwfc	?___awdiv+1,w,c
  2896  001BC6  6E10               	movwf	___wmul@multiplier+1,c
  2897  001BC8  0E00               	movlw	0
  2898  001BCA  6E12               	movwf	___wmul@multiplicand+1,c
  2899  001BCC  0E03               	movlw	3
  2900  001BCE  6E11               	movwf	___wmul@multiplicand,c
  2901  001BD0  EC06  F018         	call	___wmul	;wreg free
  2902  001BD4  0E50               	movlw	low __powers_
  2903  001BD6  240F               	addwf	?___wmul,w,c
  2904  001BD8  6EF6               	movwf	tblptrl,c
  2905  001BDA  0E10               	movlw	high __powers_
  2906  001BDC  2010               	addwfc	?___wmul+1,w,c
  2907  001BDE  6EF7               	movwf	tblptrh,c
  2908  001BE0                     	if	0	;There are less than 3 active tblptr bytes
  2909  001BE0                     	endif
  2910  001BE0  0009               	tblrd		*+
  2911  001BE2  CFF5 F015          	movff	tablat,___ftmul@f1
  2912  001BE6  0009               	tblrd		*+
  2913  001BE8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2914  001BEC  000A               	tblrd		*-
  2915  001BEE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2916  001BF2  EC9B  F013         	call	___ftmul	;wreg free
  2917  001BF6  C015  F027         	movff	?___ftmul,_scale$1121
  2918  001BFA  C016  F028         	movff	?___ftmul+1,_scale$1121+1
  2919  001BFE  C017  F029         	movff	?___ftmul+2,_scale$1121+2
  2920                           
  2921                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2922  001C02  C027  F015         	movff	_scale$1121,___ftmul@f1
  2923  001C06  C028  F016         	movff	_scale$1121+1,___ftmul@f1+1
  2924  001C0A  C029  F017         	movff	_scale$1121+2,___ftmul@f1+2
  2925  001C0E  0E00               	movlw	0
  2926  001C10  6E12               	movwf	___wmul@multiplicand+1,c
  2927  001C12  0E03               	movlw	3
  2928  001C14  6E11               	movwf	___wmul@multiplicand,c
  2929  001C16  0E00               	movlw	0
  2930  001C18  6E04               	movwf	___awmod@divisor+1,c
  2931  001C1A  0E0A               	movlw	10
  2932  001C1C  6E03               	movwf	___awmod@divisor,c
  2933  001C1E  502A               	movf	scale@scl,w,c
  2934  001C20  6E01               	movwf	___awmod@dividend,c
  2935  001C22  6A02               	clrf	___awmod@dividend+1,c
  2936  001C24  BE01               	btfsc	___awmod@dividend,7,c
  2937  001C26  0602               	decf	___awmod@dividend+1,f,c
  2938  001C28  EC42  F016         	call	___awmod	;wreg free
  2939  001C2C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2940  001C30  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2941  001C34  EC06  F018         	call	___wmul	;wreg free
  2942  001C38  0E50               	movlw	low __powers_
  2943  001C3A  240F               	addwf	?___wmul,w,c
  2944  001C3C  6EF6               	movwf	tblptrl,c
  2945  001C3E  0E10               	movlw	high __powers_
  2946  001C40  2010               	addwfc	?___wmul+1,w,c
  2947  001C42  6EF7               	movwf	tblptrh,c
  2948  001C44                     	if	0	;There are less than 3 active tblptr bytes
  2949  001C44                     	endif
  2950  001C44  0009               	tblrd		*+
  2951  001C46  CFF5 F018          	movff	tablat,___ftmul@f2
  2952  001C4A  0009               	tblrd		*+
  2953  001C4C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2954  001C50  000A               	tblrd		*-
  2955  001C52  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2956  001C56  EC9B  F013         	call	___ftmul	;wreg free
  2957  001C5A  C015  F024         	movff	?___ftmul,?_scale
  2958  001C5E  C016  F025         	movff	?___ftmul+1,?_scale+1
  2959  001C62  C017  F026         	movff	?___ftmul+2,?_scale+2
  2960  001C66  0012               	return	
  2961  001C68                     l2404:
  2962                           
  2963                           ;doprnt.c: 438: else if(scl > 10)
  2964  001C68  502A               	movf	scale@scl,w,c
  2965  001C6A  0A80               	xorlw	128
  2966  001C6C  0F75               	addlw	-139
  2967  001C6E  A0D8               	btfss	status,0,c
  2968  001C70  D04D               	goto	l2410
  2969                           
  2970                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2971  001C72  0E00               	movlw	0
  2972  001C74  6E0A               	movwf	___awdiv@divisor+1,c
  2973  001C76  0E0A               	movlw	10
  2974  001C78  6E09               	movwf	___awdiv@divisor,c
  2975  001C7A  502A               	movf	scale@scl,w,c
  2976  001C7C  6E07               	movwf	___awdiv@dividend,c
  2977  001C7E  6A08               	clrf	___awdiv@dividend+1,c
  2978  001C80  BE07               	btfsc	___awdiv@dividend,7,c
  2979  001C82  0608               	decf	___awdiv@dividend+1,f,c
  2980  001C84  ECBF  F015         	call	___awdiv	;wreg free
  2981  001C88  0E09               	movlw	9
  2982  001C8A  2407               	addwf	?___awdiv,w,c
  2983  001C8C  6E0F               	movwf	___wmul@multiplier,c
  2984  001C8E  0E00               	movlw	0
  2985  001C90  2008               	addwfc	?___awdiv+1,w,c
  2986  001C92  6E10               	movwf	___wmul@multiplier+1,c
  2987  001C94  0E00               	movlw	0
  2988  001C96  6E12               	movwf	___wmul@multiplicand+1,c
  2989  001C98  0E03               	movlw	3
  2990  001C9A  6E11               	movwf	___wmul@multiplicand,c
  2991  001C9C  EC06  F018         	call	___wmul	;wreg free
  2992  001CA0  0E50               	movlw	low __powers_
  2993  001CA2  240F               	addwf	?___wmul,w,c
  2994  001CA4  6EF6               	movwf	tblptrl,c
  2995  001CA6  0E10               	movlw	high __powers_
  2996  001CA8  2010               	addwfc	?___wmul+1,w,c
  2997  001CAA  6EF7               	movwf	tblptrh,c
  2998  001CAC                     	if	0	;There are less than 3 active tblptr bytes
  2999  001CAC                     	endif
  3000  001CAC  0009               	tblrd		*+
  3001  001CAE  CFF5 F015          	movff	tablat,___ftmul@f1
  3002  001CB2  0009               	tblrd		*+
  3003  001CB4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3004  001CB8  000A               	tblrd		*-
  3005  001CBA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3006  001CBE  0E00               	movlw	0
  3007  001CC0  6E12               	movwf	___wmul@multiplicand+1,c
  3008  001CC2  0E03               	movlw	3
  3009  001CC4  6E11               	movwf	___wmul@multiplicand,c
  3010  001CC6  0E00               	movlw	0
  3011  001CC8  6E04               	movwf	___awmod@divisor+1,c
  3012  001CCA  0E0A               	movlw	10
  3013  001CCC  6E03               	movwf	___awmod@divisor,c
  3014  001CCE  502A               	movf	scale@scl,w,c
  3015  001CD0  6E01               	movwf	___awmod@dividend,c
  3016  001CD2  6A02               	clrf	___awmod@dividend+1,c
  3017  001CD4  BE01               	btfsc	___awmod@dividend,7,c
  3018  001CD6  0602               	decf	___awmod@dividend+1,f,c
  3019  001CD8  EC42  F016         	call	___awmod	;wreg free
  3020  001CDC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3021  001CE0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3022  001CE4  EC06  F018         	call	___wmul	;wreg free
  3023  001CE8  0E50               	movlw	low __powers_
  3024  001CEA  240F               	addwf	?___wmul,w,c
  3025  001CEC  6EF6               	movwf	tblptrl,c
  3026  001CEE  0E10               	movlw	high __powers_
  3027  001CF0  2010               	addwfc	?___wmul+1,w,c
  3028  001CF2  6EF7               	movwf	tblptrh,c
  3029  001CF4                     	if	0	;There are less than 3 active tblptr bytes
  3030  001CF4                     	endif
  3031  001CF4  0009               	tblrd		*+
  3032  001CF6  CFF5 F018          	movff	tablat,___ftmul@f2
  3033  001CFA  0009               	tblrd		*+
  3034  001CFC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3035  001D00  000A               	tblrd		*-
  3036  001D02  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3037  001D06  EC9B  F013         	call	___ftmul	;wreg free
  3038  001D0A  D7A7               	goto	L4
  3039  001D0C                     l2410:
  3040                           
  3041                           ;doprnt.c: 440: return _powers_[scl];
  3042  001D0C  502A               	movf	scale@scl,w,c
  3043  001D0E  0D03               	mullw	3
  3044  001D10  0E50               	movlw	low __powers_
  3045  001D12  24F3               	addwf	prodl,w,c
  3046  001D14  6EF6               	movwf	tblptrl,c
  3047  001D16  0E10               	movlw	high __powers_
  3048  001D18  20F4               	addwfc	prodh,w,c
  3049  001D1A  6EF7               	movwf	tblptrh,c
  3050  001D1C                     	if	0	;There are less than 3 active tblptr bytes
  3051  001D1C                     	endif
  3052  001D1C  0009               	tblrd		*+
  3053  001D1E  CFF5 F024          	movff	tablat,?_scale
  3054  001D22  0009               	tblrd		*+
  3055  001D24  CFF5 F025          	movff	tablat,?_scale+1
  3056  001D28  000A               	tblrd		*-
  3057  001D2A  CFF5 F026          	movff	tablat,?_scale+2
  3058  001D2E  0012               	return	
  3059  001D30                     __end_of_scale:
  3060                           	opt stack 0
  3061                           tblptru	equ	0xFF8
  3062                           tblptrh	equ	0xFF7
  3063                           tblptrl	equ	0xFF6
  3064                           tablat	equ	0xFF5
  3065                           prodh	equ	0xFF4
  3066                           prodl	equ	0xFF3
  3067                           postinc0	equ	0xFEE
  3068                           wreg	equ	0xFE8
  3069                           postdec1	equ	0xFE5
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           postinc2	equ	0xFDE
  3073                           postdec2	equ	0xFDD
  3074                           fsr2h	equ	0xFDA
  3075                           fsr2l	equ	0xFD9
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _isdigit *****************
  3079 ;; Defined at:
  3080 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  c               1    wreg     unsigned char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  c               1    2[COMRAM] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;		None               void
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_sprintf
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text3
  3108  0030C2                     __ptext3:
  3109                           	opt stack 0
  3110  0030C2                     _isdigit:
  3111                           	opt stack 29
  3112                           
  3113                           ;incstack = 0
  3114                           ;isdigit@c stored from wreg
  3115  0030C2  6E03               	movwf	isdigit@c,c
  3116  0030C4  0E00               	movlw	0
  3117  0030C6  6E02               	movwf	_isdigit$793,c
  3118  0030C8  0E3A               	movlw	58
  3119  0030CA  6003               	cpfslt	isdigit@c,c
  3120  0030CC  D005               	goto	l2422
  3121  0030CE  0E2F               	movlw	47
  3122  0030D0  6403               	cpfsgt	isdigit@c,c
  3123  0030D2  D002               	goto	l2422
  3124  0030D4  0E01               	movlw	1
  3125  0030D6  6E02               	movwf	_isdigit$793,c
  3126  0030D8                     l2422:
  3127  0030D8  C002  F001         	movff	_isdigit$793,??_isdigit
  3128  0030DC  3001               	rrcf	??_isdigit,w,c
  3129  0030DE  0012               	return	
  3130  0030E0                     __end_of_isdigit:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postdec1	equ	0xFE5
  3141                           fsr1l	equ	0xFE1
  3142                           indf2	equ	0xFDF
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _fround *****************
  3150 ;; Defined at:
  3151 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  prec            1    wreg     unsigned char 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  prec            1   44[COMRAM] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  3   35[COMRAM] unsigned char 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3165 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;Total ram usage:       10 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    2
  3172 ;; This function calls:
  3173 ;;		___awdiv
  3174 ;;		___awmod
  3175 ;;		___ftmul
  3176 ;;		___wmul
  3177 ;; This function is called by:
  3178 ;;		_sprintf
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text4
  3183  001FF6                     __ptext4:
  3184                           	opt stack 0
  3185  001FF6                     _fround:
  3186                           	opt stack 27
  3187                           
  3188                           ;incstack = 0
  3189                           ;fround@prec stored from wreg
  3190  001FF6  6E2D               	movwf	fround@prec,c
  3191                           
  3192                           ;doprnt.c: 413: if(prec>=110)
  3193  001FF8  0E6D               	movlw	109
  3194  001FFA  642D               	cpfsgt	fround@prec,c
  3195  001FFC  D09F               	goto	l2364
  3196                           
  3197                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3198  001FFE  0E00               	movlw	0
  3199  002000  6E12               	movwf	___wmul@multiplicand+1,c
  3200  002002  0E03               	movlw	3
  3201  002004  6E11               	movwf	___wmul@multiplicand,c
  3202  002006  0E00               	movlw	0
  3203  002008  6E0A               	movwf	___awdiv@divisor+1,c
  3204  00200A  0E0A               	movlw	10
  3205  00200C  6E09               	movwf	___awdiv@divisor,c
  3206  00200E  0E00               	movlw	0
  3207  002010  6E04               	movwf	___awmod@divisor+1,c
  3208  002012  0E64               	movlw	100
  3209  002014  6E03               	movwf	___awmod@divisor,c
  3210  002016  C02D  F001         	movff	fround@prec,___awmod@dividend
  3211  00201A  6A02               	clrf	___awmod@dividend+1,c
  3212  00201C  EC42  F016         	call	___awmod	;wreg free
  3213  002020  C001  F007         	movff	?___awmod,___awdiv@dividend
  3214  002024  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3215  002028  ECBF  F015         	call	___awdiv	;wreg free
  3216  00202C  0E09               	movlw	9
  3217  00202E  2407               	addwf	?___awdiv,w,c
  3218  002030  6E0F               	movwf	___wmul@multiplier,c
  3219  002032  0E00               	movlw	0
  3220  002034  2008               	addwfc	?___awdiv+1,w,c
  3221  002036  6E10               	movwf	___wmul@multiplier+1,c
  3222  002038  EC06  F018         	call	___wmul	;wreg free
  3223  00203C  0E29               	movlw	low __npowers_
  3224  00203E  240F               	addwf	?___wmul,w,c
  3225  002040  6EF6               	movwf	tblptrl,c
  3226  002042  0E10               	movlw	high __npowers_
  3227  002044  2010               	addwfc	?___wmul+1,w,c
  3228  002046  6EF7               	movwf	tblptrh,c
  3229  002048                     	if	0	;There are less than 3 active tblptr bytes
  3230  002048                     	endif
  3231  002048  0009               	tblrd		*+
  3232  00204A  CFF5 F018          	movff	tablat,___ftmul@f2
  3233  00204E  0009               	tblrd		*+
  3234  002050  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3235  002054  000A               	tblrd		*-
  3236  002056  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3237  00205A  0E00               	movlw	0
  3238  00205C  6E0A               	movwf	___awdiv@divisor+1,c
  3239  00205E  0E64               	movlw	100
  3240  002060  6E09               	movwf	___awdiv@divisor,c
  3241  002062  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3242  002066  6A08               	clrf	___awdiv@dividend+1,c
  3243  002068  ECBF  F015         	call	___awdiv	;wreg free
  3244  00206C  0E12               	movlw	18
  3245  00206E  2407               	addwf	?___awdiv,w,c
  3246  002070  6E0F               	movwf	___wmul@multiplier,c
  3247  002072  0E00               	movlw	0
  3248  002074  2008               	addwfc	?___awdiv+1,w,c
  3249  002076  6E10               	movwf	___wmul@multiplier+1,c
  3250  002078  0E00               	movlw	0
  3251  00207A  6E12               	movwf	___wmul@multiplicand+1,c
  3252  00207C  0E03               	movlw	3
  3253  00207E  6E11               	movwf	___wmul@multiplicand,c
  3254  002080  EC06  F018         	call	___wmul	;wreg free
  3255  002084  0E29               	movlw	low __npowers_
  3256  002086  240F               	addwf	?___wmul,w,c
  3257  002088  6EF6               	movwf	tblptrl,c
  3258  00208A  0E10               	movlw	high __npowers_
  3259  00208C  2010               	addwfc	?___wmul+1,w,c
  3260  00208E  6EF7               	movwf	tblptrh,c
  3261  002090                     	if	0	;There are less than 3 active tblptr bytes
  3262  002090                     	endif
  3263  002090  0009               	tblrd		*+
  3264  002092  CFF5 F015          	movff	tablat,___ftmul@f1
  3265  002096  0009               	tblrd		*+
  3266  002098  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3267  00209C  000A               	tblrd		*-
  3268  00209E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3269  0020A2  EC9B  F013         	call	___ftmul	;wreg free
  3270  0020A6  C015  F02A         	movff	?___ftmul,_fround$1119
  3271  0020AA  C016  F02B         	movff	?___ftmul+1,_fround$1119+1
  3272  0020AE  C017  F02C         	movff	?___ftmul+2,_fround$1119+2
  3273                           
  3274                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3275  0020B2  0E00               	movlw	0
  3276  0020B4  6E12               	movwf	___wmul@multiplicand+1,c
  3277  0020B6  0E03               	movlw	3
  3278  0020B8  6E11               	movwf	___wmul@multiplicand,c
  3279  0020BA  0E00               	movlw	0
  3280  0020BC  6E04               	movwf	___awmod@divisor+1,c
  3281  0020BE  0E0A               	movlw	10
  3282  0020C0  6E03               	movwf	___awmod@divisor,c
  3283  0020C2  C02D  F001         	movff	fround@prec,___awmod@dividend
  3284  0020C6  6A02               	clrf	___awmod@dividend+1,c
  3285  0020C8  EC42  F016         	call	___awmod	;wreg free
  3286  0020CC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3287  0020D0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3288  0020D4  EC06  F018         	call	___wmul	;wreg free
  3289  0020D8  0E29               	movlw	low __npowers_
  3290  0020DA  240F               	addwf	?___wmul,w,c
  3291  0020DC  6EF6               	movwf	tblptrl,c
  3292  0020DE  0E10               	movlw	high __npowers_
  3293  0020E0  2010               	addwfc	?___wmul+1,w,c
  3294  0020E2  6EF7               	movwf	tblptrh,c
  3295  0020E4                     	if	0	;There are less than 3 active tblptr bytes
  3296  0020E4                     	endif
  3297  0020E4  0009               	tblrd		*+
  3298  0020E6  CFF5 F018          	movff	tablat,___ftmul@f2
  3299  0020EA  0009               	tblrd		*+
  3300  0020EC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3301  0020F0  000A               	tblrd		*-
  3302  0020F2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3303  0020F6  C02A  F015         	movff	_fround$1119,___ftmul@f1
  3304  0020FA  C02B  F016         	movff	_fround$1119+1,___ftmul@f1+1
  3305  0020FE  C02C  F017         	movff	_fround$1119+2,___ftmul@f1+2
  3306  002102  EC9B  F013         	call	___ftmul	;wreg free
  3307  002106  C015  F027         	movff	?___ftmul,_fround$1120
  3308  00210A  C016  F028         	movff	?___ftmul+1,_fround$1120+1
  3309  00210E  C017  F029         	movff	?___ftmul+2,_fround$1120+2
  3310                           
  3311                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3312  002112  C027  F015         	movff	_fround$1120,___ftmul@f1
  3313  002116  C028  F016         	movff	_fround$1120+1,___ftmul@f1+1
  3314  00211A  C029  F017         	movff	_fround$1120+2,___ftmul@f1+2
  3315  00211E  0E00               	movlw	0
  3316  002120  6E18               	movwf	___ftmul@f2,c
  3317  002122  0E00               	movlw	0
  3318  002124  6E19               	movwf	___ftmul@f2+1,c
  3319  002126  0E3F               	movlw	63
  3320  002128  6E1A               	movwf	___ftmul@f2+2,c
  3321  00212A  EC9B  F013         	call	___ftmul	;wreg free
  3322  00212E  C015  F024         	movff	?___ftmul,?_fround
  3323  002132  C016  F025         	movff	?___ftmul+1,?_fround+1
  3324  002136  C017  F026         	movff	?___ftmul+2,?_fround+2
  3325  00213A  0012               	return	
  3326  00213C                     l2364:
  3327                           
  3328                           ;doprnt.c: 415: else if(prec > 10)
  3329  00213C  0E0A               	movlw	10
  3330  00213E  642D               	cpfsgt	fround@prec,c
  3331  002140  D05D               	goto	l2372
  3332                           
  3333                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3334  002142  0E00               	movlw	0
  3335  002144  6E12               	movwf	___wmul@multiplicand+1,c
  3336  002146  0E03               	movlw	3
  3337  002148  6E11               	movwf	___wmul@multiplicand,c
  3338  00214A  0E00               	movlw	0
  3339  00214C  6E04               	movwf	___awmod@divisor+1,c
  3340  00214E  0E0A               	movlw	10
  3341  002150  6E03               	movwf	___awmod@divisor,c
  3342  002152  C02D  F001         	movff	fround@prec,___awmod@dividend
  3343  002156  6A02               	clrf	___awmod@dividend+1,c
  3344  002158  EC42  F016         	call	___awmod	;wreg free
  3345  00215C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3346  002160  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3347  002164  EC06  F018         	call	___wmul	;wreg free
  3348  002168  0E29               	movlw	low __npowers_
  3349  00216A  240F               	addwf	?___wmul,w,c
  3350  00216C  6EF6               	movwf	tblptrl,c
  3351  00216E  0E10               	movlw	high __npowers_
  3352  002170  2010               	addwfc	?___wmul+1,w,c
  3353  002172  6EF7               	movwf	tblptrh,c
  3354  002174                     	if	0	;There are less than 3 active tblptr bytes
  3355  002174                     	endif
  3356  002174  0009               	tblrd		*+
  3357  002176  CFF5 F018          	movff	tablat,___ftmul@f2
  3358  00217A  0009               	tblrd		*+
  3359  00217C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3360  002180  000A               	tblrd		*-
  3361  002182  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3362  002186  0E00               	movlw	0
  3363  002188  6E0A               	movwf	___awdiv@divisor+1,c
  3364  00218A  0E0A               	movlw	10
  3365  00218C  6E09               	movwf	___awdiv@divisor,c
  3366  00218E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3367  002192  6A08               	clrf	___awdiv@dividend+1,c
  3368  002194  ECBF  F015         	call	___awdiv	;wreg free
  3369  002198  0E09               	movlw	9
  3370  00219A  2407               	addwf	?___awdiv,w,c
  3371  00219C  6E0F               	movwf	___wmul@multiplier,c
  3372  00219E  0E00               	movlw	0
  3373  0021A0  2008               	addwfc	?___awdiv+1,w,c
  3374  0021A2  6E10               	movwf	___wmul@multiplier+1,c
  3375  0021A4  0E00               	movlw	0
  3376  0021A6  6E12               	movwf	___wmul@multiplicand+1,c
  3377  0021A8  0E03               	movlw	3
  3378  0021AA  6E11               	movwf	___wmul@multiplicand,c
  3379  0021AC  EC06  F018         	call	___wmul	;wreg free
  3380  0021B0  0E29               	movlw	low __npowers_
  3381  0021B2  240F               	addwf	?___wmul,w,c
  3382  0021B4  6EF6               	movwf	tblptrl,c
  3383  0021B6  0E10               	movlw	high __npowers_
  3384  0021B8  2010               	addwfc	?___wmul+1,w,c
  3385  0021BA  6EF7               	movwf	tblptrh,c
  3386  0021BC                     	if	0	;There are less than 3 active tblptr bytes
  3387  0021BC                     	endif
  3388  0021BC  0009               	tblrd		*+
  3389  0021BE  CFF5 F015          	movff	tablat,___ftmul@f1
  3390  0021C2  0009               	tblrd		*+
  3391  0021C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3392  0021C8  000A               	tblrd		*-
  3393  0021CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3394  0021CE  EC9B  F013         	call	___ftmul	;wreg free
  3395  0021D2  C015  F02A         	movff	?___ftmul,_fround$1119
  3396  0021D6  C016  F02B         	movff	?___ftmul+1,_fround$1119+1
  3397  0021DA  C017  F02C         	movff	?___ftmul+2,_fround$1119+2
  3398                           
  3399                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3400  0021DE  C02A  F015         	movff	_fround$1119,___ftmul@f1
  3401  0021E2  C02B  F016         	movff	_fround$1119+1,___ftmul@f1+1
  3402  0021E6  C02C  F017         	movff	_fround$1119+2,___ftmul@f1+2
  3403  0021EA  0E00               	movlw	0
  3404  0021EC  6E18               	movwf	___ftmul@f2,c
  3405  0021EE  0E00               	movlw	0
  3406  0021F0  6E19               	movwf	___ftmul@f2+1,c
  3407  0021F2  0E3F               	movlw	63
  3408  0021F4  6E1A               	movwf	___ftmul@f2+2,c
  3409  0021F6  EC9B  F013         	call	___ftmul	;wreg free
  3410  0021FA  D799               	goto	L5
  3411  0021FC                     l2372:
  3412                           
  3413                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3414  0021FC  502D               	movf	fround@prec,w,c
  3415  0021FE  0D03               	mullw	3
  3416  002200  0E29               	movlw	low __npowers_
  3417  002202  24F3               	addwf	prodl,w,c
  3418  002204  6EF6               	movwf	tblptrl,c
  3419  002206  0E10               	movlw	high __npowers_
  3420  002208  20F4               	addwfc	prodh,w,c
  3421  00220A  6EF7               	movwf	tblptrh,c
  3422  00220C                     	if	0	;There are less than 3 active tblptr bytes
  3423  00220C                     	endif
  3424  00220C  0009               	tblrd		*+
  3425  00220E  CFF5 F015          	movff	tablat,___ftmul@f1
  3426  002212  0009               	tblrd		*+
  3427  002214  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3428  002218  000A               	tblrd		*-
  3429  00221A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3430  00221E  0E00               	movlw	0
  3431  002220  6E18               	movwf	___ftmul@f2,c
  3432  002222  0E00               	movlw	0
  3433  002224  6E19               	movwf	___ftmul@f2+1,c
  3434  002226  0E3F               	movlw	63
  3435  002228  6E1A               	movwf	___ftmul@f2+2,c
  3436  00222A  EC9B  F013         	call	___ftmul	;wreg free
  3437  00222E  C015  F024         	movff	?___ftmul,?_fround
  3438  002232  C016  F025         	movff	?___ftmul+1,?_fround+1
  3439  002236  C017  F026         	movff	?___ftmul+2,?_fround+2
  3440  00223A  0012               	return	
  3441  00223C                     __end_of_fround:
  3442                           	opt stack 0
  3443                           tblptru	equ	0xFF8
  3444                           tblptrh	equ	0xFF7
  3445                           tblptrl	equ	0xFF6
  3446                           tablat	equ	0xFF5
  3447                           prodh	equ	0xFF4
  3448                           prodl	equ	0xFF3
  3449                           postinc0	equ	0xFEE
  3450                           wreg	equ	0xFE8
  3451                           postdec1	equ	0xFE5
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function ___wmul *****************
  3461 ;; Defined at:
  3462 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  multiplier      2   14[COMRAM] unsigned int 
  3465 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  product         2   18[COMRAM] unsigned int 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  2   14[COMRAM] unsigned int 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0, prodl, prodh
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3477 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;Total ram usage:        6 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_fround
  3487 ;;		_scale
  3488 ;;		_sprintf
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text5
  3493  00300C                     __ptext5:
  3494                           	opt stack 0
  3495  00300C                     ___wmul:
  3496                           	opt stack 28
  3497                           
  3498                           ;incstack = 0
  3499  00300C  500F               	movf	___wmul@multiplier,w,c
  3500  00300E  0211               	mulwf	___wmul@multiplicand,c
  3501  003010  CFF3 F013          	movff	prodl,___wmul@product
  3502  003014  CFF4 F014          	movff	prodh,___wmul@product+1
  3503  003018  500F               	movf	___wmul@multiplier,w,c
  3504  00301A  0212               	mulwf	___wmul@multiplicand+1,c
  3505  00301C  50F3               	movf	prodl,w,c
  3506  00301E  2614               	addwf	___wmul@product+1,f,c
  3507  003020  5010               	movf	___wmul@multiplier+1,w,c
  3508  003022  0211               	mulwf	___wmul@multiplicand,c
  3509  003024  50F3               	movf	prodl,w,c
  3510  003026  2614               	addwf	___wmul@product+1,f,c
  3511  003028  C013  F00F         	movff	___wmul@product,?___wmul
  3512  00302C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3513  003030  0012               	return	
  3514  003032                     __end_of___wmul:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           postdec1	equ	0xFE5
  3525                           fsr1l	equ	0xFE1
  3526                           indf2	equ	0xFDF
  3527                           postinc2	equ	0xFDE
  3528                           postdec2	equ	0xFDD
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function ___awmod *****************
  3534 ;; Defined at:
  3535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  dividend        2    0[COMRAM] int 
  3538 ;;  divisor         2    2[COMRAM] int 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  sign            1    5[COMRAM] unsigned char 
  3541 ;;  counter         1    4[COMRAM] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  2    0[COMRAM] int 
  3544 ;; Registers used:
  3545 ;;		wreg, status,2, status,0
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;Total ram usage:        6 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_fround
  3561 ;;		_scale
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text6
  3566  002C84                     __ptext6:
  3567                           	opt stack 0
  3568  002C84                     ___awmod:
  3569                           	opt stack 28
  3570                           
  3571                           ;incstack = 0
  3572  002C84  0E00               	movlw	0
  3573  002C86  6E06               	movwf	___awmod@sign,c
  3574  002C88  AE02               	btfss	___awmod@dividend+1,7,c
  3575  002C8A  D006               	goto	l2278
  3576  002C8C  6C01               	negf	___awmod@dividend,c
  3577  002C8E  1E02               	comf	___awmod@dividend+1,f,c
  3578  002C90  B0D8               	btfsc	status,0,c
  3579  002C92  2A02               	incf	___awmod@dividend+1,f,c
  3580  002C94  0E01               	movlw	1
  3581  002C96  6E06               	movwf	___awmod@sign,c
  3582  002C98                     l2278:
  3583  002C98  AE04               	btfss	___awmod@divisor+1,7,c
  3584  002C9A  D004               	goto	l2282
  3585  002C9C  6C03               	negf	___awmod@divisor,c
  3586  002C9E  1E04               	comf	___awmod@divisor+1,f,c
  3587  002CA0  B0D8               	btfsc	status,0,c
  3588  002CA2  2A04               	incf	___awmod@divisor+1,f,c
  3589  002CA4                     l2282:
  3590  002CA4  5003               	movf	___awmod@divisor,w,c
  3591  002CA6  1004               	iorwf	___awmod@divisor+1,w,c
  3592  002CA8  B4D8               	btfsc	status,2,c
  3593  002CAA  D018               	goto	l2298
  3594  002CAC  0E01               	movlw	1
  3595  002CAE  6E05               	movwf	___awmod@counter,c
  3596  002CB0  D004               	goto	l2288
  3597  002CB2                     l2286:
  3598  002CB2  90D8               	bcf	status,0,c
  3599  002CB4  3603               	rlcf	___awmod@divisor,f,c
  3600  002CB6  3604               	rlcf	___awmod@divisor+1,f,c
  3601  002CB8  2A05               	incf	___awmod@counter,f,c
  3602  002CBA                     l2288:
  3603  002CBA  AE04               	btfss	___awmod@divisor+1,7,c
  3604  002CBC  D7FA               	goto	l2286
  3605  002CBE                     l2290:
  3606  002CBE  5003               	movf	___awmod@divisor,w,c
  3607  002CC0  5C01               	subwf	___awmod@dividend,w,c
  3608  002CC2  5004               	movf	___awmod@divisor+1,w,c
  3609  002CC4  5802               	subwfb	___awmod@dividend+1,w,c
  3610  002CC6  A0D8               	btfss	status,0,c
  3611  002CC8  D004               	goto	l2294
  3612  002CCA  5003               	movf	___awmod@divisor,w,c
  3613  002CCC  5E01               	subwf	___awmod@dividend,f,c
  3614  002CCE  5004               	movf	___awmod@divisor+1,w,c
  3615  002CD0  5A02               	subwfb	___awmod@dividend+1,f,c
  3616  002CD2                     l2294:
  3617  002CD2  90D8               	bcf	status,0,c
  3618  002CD4  3204               	rrcf	___awmod@divisor+1,f,c
  3619  002CD6  3203               	rrcf	___awmod@divisor,f,c
  3620  002CD8  2E05               	decfsz	___awmod@counter,f,c
  3621  002CDA  D7F1               	goto	l2290
  3622  002CDC                     l2298:
  3623  002CDC  5006               	movf	___awmod@sign,w,c
  3624  002CDE  B4D8               	btfsc	status,2,c
  3625  002CE0  D004               	goto	l2302
  3626  002CE2  6C01               	negf	___awmod@dividend,c
  3627  002CE4  1E02               	comf	___awmod@dividend+1,f,c
  3628  002CE6  B0D8               	btfsc	status,0,c
  3629  002CE8  2A02               	incf	___awmod@dividend+1,f,c
  3630  002CEA                     l2302:
  3631  002CEA  C001  F001         	movff	___awmod@dividend,?___awmod
  3632  002CEE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3633  002CF2  0012               	return	
  3634  002CF4                     __end_of___awmod:
  3635                           	opt stack 0
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function ___awdiv *****************
  3654 ;; Defined at:
  3655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  dividend        2    6[COMRAM] int 
  3658 ;;  divisor         2    8[COMRAM] int 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  quotient        2   12[COMRAM] int 
  3661 ;;  sign            1   11[COMRAM] unsigned char 
  3662 ;;  counter         1   10[COMRAM] unsigned char 
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  2    6[COMRAM] int 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;Total ram usage:        8 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_fround
  3682 ;;		_scale
  3683 ;;		_sprintf
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text7
  3688  002B7E                     __ptext7:
  3689                           	opt stack 0
  3690  002B7E                     ___awdiv:
  3691                           	opt stack 28
  3692                           
  3693                           ;incstack = 0
  3694  002B7E  0E00               	movlw	0
  3695  002B80  6E0C               	movwf	___awdiv@sign,c
  3696  002B82  AE0A               	btfss	___awdiv@divisor+1,7,c
  3697  002B84  D006               	goto	l2234
  3698  002B86  6C09               	negf	___awdiv@divisor,c
  3699  002B88  1E0A               	comf	___awdiv@divisor+1,f,c
  3700  002B8A  B0D8               	btfsc	status,0,c
  3701  002B8C  2A0A               	incf	___awdiv@divisor+1,f,c
  3702  002B8E  0E01               	movlw	1
  3703  002B90  6E0C               	movwf	___awdiv@sign,c
  3704  002B92                     l2234:
  3705  002B92  AE08               	btfss	___awdiv@dividend+1,7,c
  3706  002B94  D006               	goto	l2240
  3707  002B96  6C07               	negf	___awdiv@dividend,c
  3708  002B98  1E08               	comf	___awdiv@dividend+1,f,c
  3709  002B9A  B0D8               	btfsc	status,0,c
  3710  002B9C  2A08               	incf	___awdiv@dividend+1,f,c
  3711  002B9E  0E01               	movlw	1
  3712  002BA0  1A0C               	xorwf	___awdiv@sign,f,c
  3713  002BA2                     l2240:
  3714  002BA2  0E00               	movlw	0
  3715  002BA4  6E0E               	movwf	___awdiv@quotient+1,c
  3716  002BA6  0E00               	movlw	0
  3717  002BA8  6E0D               	movwf	___awdiv@quotient,c
  3718  002BAA  5009               	movf	___awdiv@divisor,w,c
  3719  002BAC  100A               	iorwf	___awdiv@divisor+1,w,c
  3720  002BAE  B4D8               	btfsc	status,2,c
  3721  002BB0  D01C               	goto	l2262
  3722  002BB2  0E01               	movlw	1
  3723  002BB4  6E0B               	movwf	___awdiv@counter,c
  3724  002BB6  D004               	goto	l2248
  3725  002BB8                     l2246:
  3726  002BB8  90D8               	bcf	status,0,c
  3727  002BBA  3609               	rlcf	___awdiv@divisor,f,c
  3728  002BBC  360A               	rlcf	___awdiv@divisor+1,f,c
  3729  002BBE  2A0B               	incf	___awdiv@counter,f,c
  3730  002BC0                     l2248:
  3731  002BC0  AE0A               	btfss	___awdiv@divisor+1,7,c
  3732  002BC2  D7FA               	goto	l2246
  3733  002BC4                     l2250:
  3734  002BC4  90D8               	bcf	status,0,c
  3735  002BC6  360D               	rlcf	___awdiv@quotient,f,c
  3736  002BC8  360E               	rlcf	___awdiv@quotient+1,f,c
  3737  002BCA  5009               	movf	___awdiv@divisor,w,c
  3738  002BCC  5C07               	subwf	___awdiv@dividend,w,c
  3739  002BCE  500A               	movf	___awdiv@divisor+1,w,c
  3740  002BD0  5808               	subwfb	___awdiv@dividend+1,w,c
  3741  002BD2  A0D8               	btfss	status,0,c
  3742  002BD4  D005               	goto	l2258
  3743  002BD6  5009               	movf	___awdiv@divisor,w,c
  3744  002BD8  5E07               	subwf	___awdiv@dividend,f,c
  3745  002BDA  500A               	movf	___awdiv@divisor+1,w,c
  3746  002BDC  5A08               	subwfb	___awdiv@dividend+1,f,c
  3747  002BDE  800D               	bsf	___awdiv@quotient,0,c
  3748  002BE0                     l2258:
  3749  002BE0  90D8               	bcf	status,0,c
  3750  002BE2  320A               	rrcf	___awdiv@divisor+1,f,c
  3751  002BE4  3209               	rrcf	___awdiv@divisor,f,c
  3752  002BE6  2E0B               	decfsz	___awdiv@counter,f,c
  3753  002BE8  D7ED               	goto	l2250
  3754  002BEA                     l2262:
  3755  002BEA  500C               	movf	___awdiv@sign,w,c
  3756  002BEC  B4D8               	btfsc	status,2,c
  3757  002BEE  D004               	goto	l2266
  3758  002BF0  6C0D               	negf	___awdiv@quotient,c
  3759  002BF2  1E0E               	comf	___awdiv@quotient+1,f,c
  3760  002BF4  B0D8               	btfsc	status,0,c
  3761  002BF6  2A0E               	incf	___awdiv@quotient+1,f,c
  3762  002BF8                     l2266:
  3763  002BF8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3764  002BFC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3765  002C00  0012               	return	
  3766  002C02                     __end_of___awdiv:
  3767                           	opt stack 0
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           postdec1	equ	0xFE5
  3777                           fsr1l	equ	0xFE1
  3778                           indf2	equ	0xFDF
  3779                           postinc2	equ	0xFDE
  3780                           postdec2	equ	0xFDD
  3781                           fsr2h	equ	0xFDA
  3782                           fsr2l	equ	0xFD9
  3783                           status	equ	0xFD8
  3784                           
  3785 ;; *************** function __tdiv_to_l_ *****************
  3786 ;; Defined at:
  3787 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  f1              3    0[COMRAM] float 
  3790 ;;  f2              3    3[COMRAM] float 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  quot            4    9[COMRAM] unsigned long 
  3793 ;;  exp1            1   14[COMRAM] unsigned char 
  3794 ;;  cntr            1   13[COMRAM] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  4    0[COMRAM] unsigned long 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:       15 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_sprintf
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text8
  3818  0023E8                     __ptext8:
  3819                           	opt stack 0
  3820  0023E8                     __tdiv_to_l_:
  3821                           	opt stack 29
  3822                           
  3823                           ;incstack = 0
  3824  0023E8  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3825  0023EC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3826  0023EE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3827  0023F0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3828  0023F2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3829  0023F4  E301               	bnc	u2271
  3830  0023F6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3831  0023F8                     u2271:
  3832  0023F8  5007               	movf	??__tdiv_to_l_,w,c
  3833  0023FA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3834  0023FC  500F               	movf	__tdiv_to_l_@exp1,w,c
  3835  0023FE  A4D8               	btfss	status,2,c
  3836  002400  D009               	goto	l2432
  3837  002402  0E00               	movlw	0
  3838  002404  6E01               	movwf	?__tdiv_to_l_,c
  3839  002406  0E00               	movlw	0
  3840  002408  6E02               	movwf	?__tdiv_to_l_+1,c
  3841  00240A  0E00               	movlw	0
  3842  00240C  6E03               	movwf	?__tdiv_to_l_+2,c
  3843  00240E  0E00               	movlw	0
  3844  002410  6E04               	movwf	?__tdiv_to_l_+3,c
  3845  002412  0012               	return	
  3846  002414                     l2432:
  3847  002414  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3848  002418  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3849  00241A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3850  00241C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3851  00241E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3852  002420  E301               	bnc	u2291
  3853  002422  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3854  002424                     u2291:
  3855  002424  5007               	movf	??__tdiv_to_l_,w,c
  3856  002426  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3857  002428  500E               	movf	__tdiv_to_l_@cntr,w,c
  3858  00242A  A4D8               	btfss	status,2,c
  3859  00242C  D009               	goto	l2438
  3860  00242E  0E00               	movlw	0
  3861  002430  6E01               	movwf	?__tdiv_to_l_,c
  3862  002432  0E00               	movlw	0
  3863  002434  6E02               	movwf	?__tdiv_to_l_+1,c
  3864  002436  0E00               	movlw	0
  3865  002438  6E03               	movwf	?__tdiv_to_l_+2,c
  3866  00243A  0E00               	movlw	0
  3867  00243C  6E04               	movwf	?__tdiv_to_l_+3,c
  3868  00243E  0012               	return	
  3869  002440                     l2438:
  3870  002440  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3871  002442  0EFF               	movlw	255
  3872  002444  1601               	andwf	__tdiv_to_l_@f1,f,c
  3873  002446  0EFF               	movlw	255
  3874  002448  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3875  00244A  0E00               	movlw	0
  3876  00244C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3877  00244E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3878  002450  0EFF               	movlw	255
  3879  002452  1604               	andwf	__tdiv_to_l_@f2,f,c
  3880  002454  0EFF               	movlw	255
  3881  002456  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3882  002458  0E00               	movlw	0
  3883  00245A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3884  00245C  0E00               	movlw	0
  3885  00245E  6E0A               	movwf	__tdiv_to_l_@quot,c
  3886  002460  0E00               	movlw	0
  3887  002462  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3888  002464  0E00               	movlw	0
  3889  002466  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3890  002468  0E00               	movlw	0
  3891  00246A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3892  00246C  0E7F               	movlw	127
  3893  00246E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3894  002470  500E               	movf	__tdiv_to_l_@cntr,w,c
  3895  002472  0F98               	addlw	152
  3896  002474  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3897  002476  0E18               	movlw	24
  3898  002478  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3899  00247A                     l578:
  3900  00247A  90D8               	bcf	status,0,c
  3901  00247C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3902  00247E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3903  002480  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3904  002482  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3905  002484  5004               	movf	__tdiv_to_l_@f2,w,c
  3906  002486  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3907  002488  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3908  00248A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3909  00248C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3910  00248E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3911  002490  A0D8               	btfss	status,0,c
  3912  002492  D007               	goto	l579
  3913  002494  5004               	movf	__tdiv_to_l_@f2,w,c
  3914  002496  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3915  002498  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3916  00249A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3917  00249C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3918  00249E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3919  0024A0  800A               	bsf	__tdiv_to_l_@quot,0,c
  3920  0024A2                     l579:
  3921  0024A2  90D8               	bcf	status,0,c
  3922  0024A4  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3923  0024A6  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3924  0024A8  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3925  0024AA  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3926  0024AC  D7E6               	goto	l578
  3927  0024AE  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3928  0024B0  D016               	goto	l2472
  3929  0024B2  500F               	movf	__tdiv_to_l_@exp1,w,c
  3930  0024B4  0A80               	xorlw	128
  3931  0024B6  0F97               	addlw	151
  3932  0024B8  B0D8               	btfsc	status,0,c
  3933  0024BA  D009               	goto	l2468
  3934  0024BC  0E00               	movlw	0
  3935  0024BE  6E01               	movwf	?__tdiv_to_l_,c
  3936  0024C0  0E00               	movlw	0
  3937  0024C2  6E02               	movwf	?__tdiv_to_l_+1,c
  3938  0024C4  0E00               	movlw	0
  3939  0024C6  6E03               	movwf	?__tdiv_to_l_+2,c
  3940  0024C8  0E00               	movlw	0
  3941  0024CA  6E04               	movwf	?__tdiv_to_l_+3,c
  3942  0024CC  0012               	return	
  3943  0024CE                     l2468:
  3944  0024CE  90D8               	bcf	status,0,c
  3945  0024D0  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3946  0024D2  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3947  0024D4  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3948  0024D6  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3949  0024D8  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3950  0024DA  D7F9               	goto	l2468
  3951  0024DC  D015               	goto	l585
  3952  0024DE                     l2472:
  3953  0024DE  0E17               	movlw	23
  3954  0024E0  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3955  0024E2  D00F               	goto	l2480
  3956  0024E4  0E00               	movlw	0
  3957  0024E6  6E01               	movwf	?__tdiv_to_l_,c
  3958  0024E8  0E00               	movlw	0
  3959  0024EA  6E02               	movwf	?__tdiv_to_l_+1,c
  3960  0024EC  0E00               	movlw	0
  3961  0024EE  6E03               	movwf	?__tdiv_to_l_+2,c
  3962  0024F0  0E00               	movlw	0
  3963  0024F2  6E04               	movwf	?__tdiv_to_l_+3,c
  3964  0024F4  0012               	return	
  3965  0024F6                     l2478:
  3966  0024F6  90D8               	bcf	status,0,c
  3967  0024F8  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3968  0024FA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3969  0024FC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3970  0024FE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3971  002500  060F               	decf	__tdiv_to_l_@exp1,f,c
  3972  002502                     l2480:
  3973  002502  500F               	movf	__tdiv_to_l_@exp1,w,c
  3974  002504  A4D8               	btfss	status,2,c
  3975  002506  D7F7               	goto	l2478
  3976  002508                     l585:
  3977  002508  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3978  00250C  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3979  002510  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3980  002514  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3981  002518  0012               	return		;funcret
  3982  00251A                     __end_of__tdiv_to_l_:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function __div_to_l_ *****************
  4002 ;; Defined at:
  4003 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  f1              3    0[COMRAM] unsigned long 
  4006 ;;  f2              3    3[COMRAM] unsigned long 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  quot            4    6[COMRAM] unsigned long 
  4009 ;;  exp1            1   11[COMRAM] unsigned char 
  4010 ;;  cntr            1   10[COMRAM] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  4    0[COMRAM] unsigned long 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4020 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;Total ram usage:       12 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; This function calls:
  4027 ;;		Nothing
  4028 ;; This function is called by:
  4029 ;;		_sprintf
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text9
  4034  00251A                     __ptext9:
  4035                           	opt stack 0
  4036  00251A                     __div_to_l_:
  4037                           	opt stack 29
  4038                           
  4039                           ;incstack = 0
  4040  00251A  3403               	rlcf	__div_to_l_@f1+2,w,c
  4041  00251C  3404               	rlcf	__div_to_l_@f1+3,w,c
  4042  00251E  6E0C               	movwf	__div_to_l_@exp1,c
  4043  002520  500C               	movf	__div_to_l_@exp1,w,c
  4044  002522  A4D8               	btfss	status,2,c
  4045  002524  D009               	goto	l2488
  4046  002526  0E00               	movlw	0
  4047  002528  6E01               	movwf	?__div_to_l_,c
  4048  00252A  0E00               	movlw	0
  4049  00252C  6E02               	movwf	?__div_to_l_+1,c
  4050  00252E  0E00               	movlw	0
  4051  002530  6E03               	movwf	?__div_to_l_+2,c
  4052  002532  0E00               	movlw	0
  4053  002534  6E04               	movwf	?__div_to_l_+3,c
  4054  002536  0012               	return	
  4055  002538                     l2488:
  4056  002538  3406               	rlcf	__div_to_l_@f2+2,w,c
  4057  00253A  3407               	rlcf	__div_to_l_@f2+3,w,c
  4058  00253C  6E0B               	movwf	__div_to_l_@cntr,c
  4059  00253E  500B               	movf	__div_to_l_@cntr,w,c
  4060  002540  A4D8               	btfss	status,2,c
  4061  002542  D009               	goto	l2494
  4062  002544  0E00               	movlw	0
  4063  002546  6E01               	movwf	?__div_to_l_,c
  4064  002548  0E00               	movlw	0
  4065  00254A  6E02               	movwf	?__div_to_l_+1,c
  4066  00254C  0E00               	movlw	0
  4067  00254E  6E03               	movwf	?__div_to_l_+2,c
  4068  002550  0E00               	movlw	0
  4069  002552  6E04               	movwf	?__div_to_l_+3,c
  4070  002554  0012               	return	
  4071  002556                     l2494:
  4072  002556  8E03               	bsf	__div_to_l_@f1+2,7,c
  4073  002558  0EFF               	movlw	255
  4074  00255A  1601               	andwf	__div_to_l_@f1,f,c
  4075  00255C  0EFF               	movlw	255
  4076  00255E  1602               	andwf	__div_to_l_@f1+1,f,c
  4077  002560  0EFF               	movlw	255
  4078  002562  1603               	andwf	__div_to_l_@f1+2,f,c
  4079  002564  0E00               	movlw	0
  4080  002566  1604               	andwf	__div_to_l_@f1+3,f,c
  4081  002568  8E06               	bsf	__div_to_l_@f2+2,7,c
  4082  00256A  0EFF               	movlw	255
  4083  00256C  1604               	andwf	__div_to_l_@f2,f,c
  4084  00256E  0EFF               	movlw	255
  4085  002570  1605               	andwf	__div_to_l_@f2+1,f,c
  4086  002572  0EFF               	movlw	255
  4087  002574  1606               	andwf	__div_to_l_@f2+2,f,c
  4088  002576  0E00               	movlw	0
  4089  002578  1607               	andwf	__div_to_l_@f2+3,f,c
  4090  00257A  0E00               	movlw	0
  4091  00257C  6E07               	movwf	__div_to_l_@quot,c
  4092  00257E  0E00               	movlw	0
  4093  002580  6E08               	movwf	__div_to_l_@quot+1,c
  4094  002582  0E00               	movlw	0
  4095  002584  6E09               	movwf	__div_to_l_@quot+2,c
  4096  002586  0E00               	movlw	0
  4097  002588  6E0A               	movwf	__div_to_l_@quot+3,c
  4098  00258A  0E7F               	movlw	127
  4099  00258C  5E0C               	subwf	__div_to_l_@exp1,f,c
  4100  00258E  500B               	movf	__div_to_l_@cntr,w,c
  4101  002590  0FA0               	addlw	160
  4102  002592  5E0C               	subwf	__div_to_l_@exp1,f,c
  4103  002594  0E20               	movlw	32
  4104  002596  6E0B               	movwf	__div_to_l_@cntr,c
  4105  002598                     l2508:
  4106  002598  90D8               	bcf	status,0,c
  4107  00259A  3607               	rlcf	__div_to_l_@quot,f,c
  4108  00259C  3608               	rlcf	__div_to_l_@quot+1,f,c
  4109  00259E  3609               	rlcf	__div_to_l_@quot+2,f,c
  4110  0025A0  360A               	rlcf	__div_to_l_@quot+3,f,c
  4111  0025A2  5004               	movf	__div_to_l_@f2,w,c
  4112  0025A4  5C01               	subwf	__div_to_l_@f1,w,c
  4113  0025A6  5005               	movf	__div_to_l_@f2+1,w,c
  4114  0025A8  5802               	subwfb	__div_to_l_@f1+1,w,c
  4115  0025AA  5006               	movf	__div_to_l_@f2+2,w,c
  4116  0025AC  5803               	subwfb	__div_to_l_@f1+2,w,c
  4117  0025AE  5007               	movf	__div_to_l_@f2+3,w,c
  4118  0025B0  5804               	subwfb	__div_to_l_@f1+3,w,c
  4119  0025B2  A0D8               	btfss	status,0,c
  4120  0025B4  D009               	goto	l2516
  4121  0025B6  5004               	movf	__div_to_l_@f2,w,c
  4122  0025B8  5E01               	subwf	__div_to_l_@f1,f,c
  4123  0025BA  5005               	movf	__div_to_l_@f2+1,w,c
  4124  0025BC  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4125  0025BE  5006               	movf	__div_to_l_@f2+2,w,c
  4126  0025C0  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4127  0025C2  5007               	movf	__div_to_l_@f2+3,w,c
  4128  0025C4  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4129  0025C6  8007               	bsf	__div_to_l_@quot,0,c
  4130  0025C8                     l2516:
  4131  0025C8  90D8               	bcf	status,0,c
  4132  0025CA  3601               	rlcf	__div_to_l_@f1,f,c
  4133  0025CC  3602               	rlcf	__div_to_l_@f1+1,f,c
  4134  0025CE  3603               	rlcf	__div_to_l_@f1+2,f,c
  4135  0025D0  3604               	rlcf	__div_to_l_@f1+3,f,c
  4136  0025D2  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4137  0025D4  D7E1               	goto	l2508
  4138  0025D6  AE0C               	btfss	__div_to_l_@exp1,7,c
  4139  0025D8  D016               	goto	l2532
  4140  0025DA  500C               	movf	__div_to_l_@exp1,w,c
  4141  0025DC  0A80               	xorlw	128
  4142  0025DE  0F9F               	addlw	159
  4143  0025E0  B0D8               	btfsc	status,0,c
  4144  0025E2  D009               	goto	l2528
  4145  0025E4  0E00               	movlw	0
  4146  0025E6  6E01               	movwf	?__div_to_l_,c
  4147  0025E8  0E00               	movlw	0
  4148  0025EA  6E02               	movwf	?__div_to_l_+1,c
  4149  0025EC  0E00               	movlw	0
  4150  0025EE  6E03               	movwf	?__div_to_l_+2,c
  4151  0025F0  0E00               	movlw	0
  4152  0025F2  6E04               	movwf	?__div_to_l_+3,c
  4153  0025F4  0012               	return	
  4154  0025F6                     l2528:
  4155  0025F6  90D8               	bcf	status,0,c
  4156  0025F8  320A               	rrcf	__div_to_l_@quot+3,f,c
  4157  0025FA  3209               	rrcf	__div_to_l_@quot+2,f,c
  4158  0025FC  3208               	rrcf	__div_to_l_@quot+1,f,c
  4159  0025FE  3207               	rrcf	__div_to_l_@quot,f,c
  4160  002600  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4161  002602  D7F9               	goto	l2528
  4162  002604  D015               	goto	l481
  4163  002606                     l2532:
  4164  002606  0E1F               	movlw	31
  4165  002608  640C               	cpfsgt	__div_to_l_@exp1,c
  4166  00260A  D00F               	goto	l2540
  4167  00260C  0E00               	movlw	0
  4168  00260E  6E01               	movwf	?__div_to_l_,c
  4169  002610  0E00               	movlw	0
  4170  002612  6E02               	movwf	?__div_to_l_+1,c
  4171  002614  0E00               	movlw	0
  4172  002616  6E03               	movwf	?__div_to_l_+2,c
  4173  002618  0E00               	movlw	0
  4174  00261A  6E04               	movwf	?__div_to_l_+3,c
  4175  00261C  0012               	return	
  4176  00261E                     l2538:
  4177  00261E  90D8               	bcf	status,0,c
  4178  002620  3607               	rlcf	__div_to_l_@quot,f,c
  4179  002622  3608               	rlcf	__div_to_l_@quot+1,f,c
  4180  002624  3609               	rlcf	__div_to_l_@quot+2,f,c
  4181  002626  360A               	rlcf	__div_to_l_@quot+3,f,c
  4182  002628  060C               	decf	__div_to_l_@exp1,f,c
  4183  00262A                     l2540:
  4184  00262A  500C               	movf	__div_to_l_@exp1,w,c
  4185  00262C  A4D8               	btfss	status,2,c
  4186  00262E  D7F7               	goto	l2538
  4187  002630                     l481:
  4188  002630  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4189  002634  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4190  002638  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4191  00263C  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4192  002640  0012               	return		;funcret
  4193  002642                     __end_of__div_to_l_:
  4194                           	opt stack 0
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           postinc0	equ	0xFEE
  4202                           wreg	equ	0xFE8
  4203                           postdec1	equ	0xFE5
  4204                           fsr1l	equ	0xFE1
  4205                           indf2	equ	0xFDF
  4206                           postinc2	equ	0xFDE
  4207                           postdec2	equ	0xFDD
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function ___lltoft *****************
  4213 ;; Defined at:
  4214 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  c               4    8[COMRAM] unsigned long 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  exp             1   16[COMRAM] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  3    8[COMRAM] float 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, status,0, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4228 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;Total ram usage:        9 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    1
  4235 ;; This function calls:
  4236 ;;		___ftpack
  4237 ;; This function is called by:
  4238 ;;		_sprintf
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text10
  4243  002D5A                     __ptext10:
  4244                           	opt stack 0
  4245  002D5A                     ___lltoft:
  4246                           	opt stack 28
  4247                           
  4248                           ;incstack = 0
  4249  002D5A  0E8E               	movlw	142
  4250  002D5C  6E11               	movwf	___lltoft@exp,c
  4251  002D5E  D006               	goto	l2706
  4252  002D60                     l2704:
  4253  002D60  90D8               	bcf	status,0,c
  4254  002D62  320C               	rrcf	___lltoft@c+3,f,c
  4255  002D64  320B               	rrcf	___lltoft@c+2,f,c
  4256  002D66  320A               	rrcf	___lltoft@c+1,f,c
  4257  002D68  3209               	rrcf	___lltoft@c,f,c
  4258  002D6A  2A11               	incf	___lltoft@exp,f,c
  4259  002D6C                     l2706:
  4260  002D6C  0E00               	movlw	0
  4261  002D6E  1409               	andwf	___lltoft@c,w,c
  4262  002D70  6E0D               	movwf	??___lltoft& (0+255),c
  4263  002D72  0E00               	movlw	0
  4264  002D74  140A               	andwf	___lltoft@c+1,w,c
  4265  002D76  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4266  002D78  0E00               	movlw	0
  4267  002D7A  140B               	andwf	___lltoft@c+2,w,c
  4268  002D7C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4269  002D7E  0EFF               	movlw	255
  4270  002D80  140C               	andwf	___lltoft@c+3,w,c
  4271  002D82  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4272  002D84  500D               	movf	??___lltoft,w,c
  4273  002D86  100E               	iorwf	??___lltoft+1,w,c
  4274  002D88  100F               	iorwf	??___lltoft+2,w,c
  4275  002D8A  1010               	iorwf	??___lltoft+3,w,c
  4276  002D8C  A4D8               	btfss	status,2,c
  4277  002D8E  D7E8               	goto	l2704
  4278  002D90  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4279  002D94  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4280  002D98  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4281  002D9C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4282  002DA0  0E00               	movlw	0
  4283  002DA2  6E05               	movwf	___ftpack@sign,c
  4284  002DA4  EC88  F014         	call	___ftpack	;wreg free
  4285  002DA8  C001  F009         	movff	?___ftpack,?___lltoft
  4286  002DAC  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4287  002DB0  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4288  002DB4  0012               	return	
  4289  002DB6                     __end_of___lltoft:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           postdec1	equ	0xFE5
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function ___llmod *****************
  4309 ;; Defined at:
  4310 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  dividend        4    0[COMRAM] unsigned long 
  4313 ;;  divisor         4    4[COMRAM] unsigned long 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  counter         1    8[COMRAM] unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  4    0[COMRAM] unsigned long 
  4318 ;; Registers used:
  4319 ;;		wreg, status,2, status,0
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4325 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;Total ram usage:        9 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_sprintf
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text11
  4339  002CF4                     __ptext11:
  4340                           	opt stack 0
  4341  002CF4                     ___llmod:
  4342                           	opt stack 29
  4343                           
  4344                           ;incstack = 0
  4345  002CF4  5005               	movf	___llmod@divisor,w,c
  4346  002CF6  1006               	iorwf	___llmod@divisor+1,w,c
  4347  002CF8  1007               	iorwf	___llmod@divisor+2,w,c
  4348  002CFA  1008               	iorwf	___llmod@divisor+3,w,c
  4349  002CFC  B4D8               	btfsc	status,2,c
  4350  002CFE  D024               	goto	l670
  4351  002D00  0E01               	movlw	1
  4352  002D02  6E09               	movwf	___llmod@counter,c
  4353  002D04  D006               	goto	l2692
  4354  002D06                     l2690:
  4355  002D06  90D8               	bcf	status,0,c
  4356  002D08  3605               	rlcf	___llmod@divisor,f,c
  4357  002D0A  3606               	rlcf	___llmod@divisor+1,f,c
  4358  002D0C  3607               	rlcf	___llmod@divisor+2,f,c
  4359  002D0E  3608               	rlcf	___llmod@divisor+3,f,c
  4360  002D10  2A09               	incf	___llmod@counter,f,c
  4361  002D12                     l2692:
  4362  002D12  AE08               	btfss	___llmod@divisor+3,7,c
  4363  002D14  D7F8               	goto	l2690
  4364  002D16                     l2694:
  4365  002D16  5005               	movf	___llmod@divisor,w,c
  4366  002D18  5C01               	subwf	___llmod@dividend,w,c
  4367  002D1A  5006               	movf	___llmod@divisor+1,w,c
  4368  002D1C  5802               	subwfb	___llmod@dividend+1,w,c
  4369  002D1E  5007               	movf	___llmod@divisor+2,w,c
  4370  002D20  5803               	subwfb	___llmod@dividend+2,w,c
  4371  002D22  5008               	movf	___llmod@divisor+3,w,c
  4372  002D24  5804               	subwfb	___llmod@dividend+3,w,c
  4373  002D26  A0D8               	btfss	status,0,c
  4374  002D28  D008               	goto	l2698
  4375  002D2A  5005               	movf	___llmod@divisor,w,c
  4376  002D2C  5E01               	subwf	___llmod@dividend,f,c
  4377  002D2E  5006               	movf	___llmod@divisor+1,w,c
  4378  002D30  5A02               	subwfb	___llmod@dividend+1,f,c
  4379  002D32  5007               	movf	___llmod@divisor+2,w,c
  4380  002D34  5A03               	subwfb	___llmod@dividend+2,f,c
  4381  002D36  5008               	movf	___llmod@divisor+3,w,c
  4382  002D38  5A04               	subwfb	___llmod@dividend+3,f,c
  4383  002D3A                     l2698:
  4384  002D3A  90D8               	bcf	status,0,c
  4385  002D3C  3208               	rrcf	___llmod@divisor+3,f,c
  4386  002D3E  3207               	rrcf	___llmod@divisor+2,f,c
  4387  002D40  3206               	rrcf	___llmod@divisor+1,f,c
  4388  002D42  3205               	rrcf	___llmod@divisor,f,c
  4389  002D44  2E09               	decfsz	___llmod@counter,f,c
  4390  002D46  D7E7               	goto	l2694
  4391  002D48                     l670:
  4392  002D48  C001  F001         	movff	___llmod@dividend,?___llmod
  4393  002D4C  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4394  002D50  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4395  002D54  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4396  002D58  0012               	return		;funcret
  4397  002D5A                     __end_of___llmod:
  4398                           	opt stack 0
  4399                           tblptru	equ	0xFF8
  4400                           tblptrh	equ	0xFF7
  4401                           tblptrl	equ	0xFF6
  4402                           tablat	equ	0xFF5
  4403                           prodh	equ	0xFF4
  4404                           prodl	equ	0xFF3
  4405                           postinc0	equ	0xFEE
  4406                           wreg	equ	0xFE8
  4407                           postdec1	equ	0xFE5
  4408                           fsr1l	equ	0xFE1
  4409                           indf2	equ	0xFDF
  4410                           postinc2	equ	0xFDE
  4411                           postdec2	equ	0xFDD
  4412                           fsr2h	equ	0xFDA
  4413                           fsr2l	equ	0xFD9
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function ___lldiv *****************
  4417 ;; Defined at:
  4418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  dividend        4    0[COMRAM] unsigned long 
  4421 ;;  divisor         4    4[COMRAM] unsigned long 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;  quotient        4    8[COMRAM] unsigned long 
  4424 ;;  counter         1   12[COMRAM] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  4    0[COMRAM] unsigned long 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:       13 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_sprintf
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text12
  4448  002C02                     __ptext12:
  4449                           	opt stack 0
  4450  002C02                     ___lldiv:
  4451                           	opt stack 29
  4452                           
  4453                           ;incstack = 0
  4454  002C02  0E00               	movlw	0
  4455  002C04  6E09               	movwf	___lldiv@quotient,c
  4456  002C06  0E00               	movlw	0
  4457  002C08  6E0A               	movwf	___lldiv@quotient+1,c
  4458  002C0A  0E00               	movlw	0
  4459  002C0C  6E0B               	movwf	___lldiv@quotient+2,c
  4460  002C0E  0E00               	movlw	0
  4461  002C10  6E0C               	movwf	___lldiv@quotient+3,c
  4462  002C12  5005               	movf	___lldiv@divisor,w,c
  4463  002C14  1006               	iorwf	___lldiv@divisor+1,w,c
  4464  002C16  1007               	iorwf	___lldiv@divisor+2,w,c
  4465  002C18  1008               	iorwf	___lldiv@divisor+3,w,c
  4466  002C1A  B4D8               	btfsc	status,2,c
  4467  002C1C  D02A               	goto	l660
  4468  002C1E  0E01               	movlw	1
  4469  002C20  6E0D               	movwf	___lldiv@counter,c
  4470  002C22  D006               	goto	l2672
  4471  002C24                     l2670:
  4472  002C24  90D8               	bcf	status,0,c
  4473  002C26  3605               	rlcf	___lldiv@divisor,f,c
  4474  002C28  3606               	rlcf	___lldiv@divisor+1,f,c
  4475  002C2A  3607               	rlcf	___lldiv@divisor+2,f,c
  4476  002C2C  3608               	rlcf	___lldiv@divisor+3,f,c
  4477  002C2E  2A0D               	incf	___lldiv@counter,f,c
  4478  002C30                     l2672:
  4479  002C30  AE08               	btfss	___lldiv@divisor+3,7,c
  4480  002C32  D7F8               	goto	l2670
  4481  002C34                     l2674:
  4482  002C34  90D8               	bcf	status,0,c
  4483  002C36  3609               	rlcf	___lldiv@quotient,f,c
  4484  002C38  360A               	rlcf	___lldiv@quotient+1,f,c
  4485  002C3A  360B               	rlcf	___lldiv@quotient+2,f,c
  4486  002C3C  360C               	rlcf	___lldiv@quotient+3,f,c
  4487  002C3E  5005               	movf	___lldiv@divisor,w,c
  4488  002C40  5C01               	subwf	___lldiv@dividend,w,c
  4489  002C42  5006               	movf	___lldiv@divisor+1,w,c
  4490  002C44  5802               	subwfb	___lldiv@dividend+1,w,c
  4491  002C46  5007               	movf	___lldiv@divisor+2,w,c
  4492  002C48  5803               	subwfb	___lldiv@dividend+2,w,c
  4493  002C4A  5008               	movf	___lldiv@divisor+3,w,c
  4494  002C4C  5804               	subwfb	___lldiv@dividend+3,w,c
  4495  002C4E  A0D8               	btfss	status,0,c
  4496  002C50  D009               	goto	l2682
  4497  002C52  5005               	movf	___lldiv@divisor,w,c
  4498  002C54  5E01               	subwf	___lldiv@dividend,f,c
  4499  002C56  5006               	movf	___lldiv@divisor+1,w,c
  4500  002C58  5A02               	subwfb	___lldiv@dividend+1,f,c
  4501  002C5A  5007               	movf	___lldiv@divisor+2,w,c
  4502  002C5C  5A03               	subwfb	___lldiv@dividend+2,f,c
  4503  002C5E  5008               	movf	___lldiv@divisor+3,w,c
  4504  002C60  5A04               	subwfb	___lldiv@dividend+3,f,c
  4505  002C62  8009               	bsf	___lldiv@quotient,0,c
  4506  002C64                     l2682:
  4507  002C64  90D8               	bcf	status,0,c
  4508  002C66  3208               	rrcf	___lldiv@divisor+3,f,c
  4509  002C68  3207               	rrcf	___lldiv@divisor+2,f,c
  4510  002C6A  3206               	rrcf	___lldiv@divisor+1,f,c
  4511  002C6C  3205               	rrcf	___lldiv@divisor,f,c
  4512  002C6E  2E0D               	decfsz	___lldiv@counter,f,c
  4513  002C70  D7E1               	goto	l2674
  4514  002C72                     l660:
  4515  002C72  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4516  002C76  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4517  002C7A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4518  002C7E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4519  002C82  0012               	return		;funcret
  4520  002C84                     __end_of___lldiv:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           tblptrh	equ	0xFF7
  4524                           tblptrl	equ	0xFF6
  4525                           tablat	equ	0xFF5
  4526                           prodh	equ	0xFF4
  4527                           prodl	equ	0xFF3
  4528                           postinc0	equ	0xFEE
  4529                           wreg	equ	0xFE8
  4530                           postdec1	equ	0xFE5
  4531                           fsr1l	equ	0xFE1
  4532                           indf2	equ	0xFDF
  4533                           postinc2	equ	0xFDE
  4534                           postdec2	equ	0xFDD
  4535                           fsr2h	equ	0xFDA
  4536                           fsr2l	equ	0xFD9
  4537                           status	equ	0xFD8
  4538                           
  4539 ;; *************** function ___ftsub *****************
  4540 ;; Defined at:
  4541 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;  f1              3   57[COMRAM] float 
  4544 ;;  f2              3   60[COMRAM] float 
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  3   57[COMRAM] float 
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4556 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;Total ram usage:        6 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    2
  4563 ;; This function calls:
  4564 ;;		___ftadd
  4565 ;; This function is called by:
  4566 ;;		_sprintf
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	text13
  4571  002EB2                     __ptext13:
  4572                           	opt stack 0
  4573  002EB2                     ___ftsub:
  4574                           	opt stack 27
  4575                           
  4576                           ;incstack = 0
  4577  002EB2  503D               	movf	___ftsub@f2,w,c
  4578  002EB4  103E               	iorwf	___ftsub@f2+1,w,c
  4579  002EB6  103F               	iorwf	___ftsub@f2+2,w,c
  4580  002EB8  B4D8               	btfsc	status,2,c
  4581  002EBA  D006               	goto	l2592
  4582  002EBC  0E00               	movlw	0
  4583  002EBE  1A3D               	xorwf	___ftsub@f2,f,c
  4584  002EC0  0E00               	movlw	0
  4585  002EC2  1A3E               	xorwf	___ftsub@f2+1,f,c
  4586  002EC4  0E80               	movlw	128
  4587  002EC6  1A3F               	xorwf	___ftsub@f2+2,f,c
  4588  002EC8                     l2592:
  4589  002EC8  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4590  002ECC  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4591  002ED0  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4592  002ED4  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4593  002ED8  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4594  002EDC  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4595  002EE0  EC1E  F011         	call	___ftadd	;wreg free
  4596  002EE4  C02E  F03A         	movff	?___ftadd,?___ftsub
  4597  002EE8  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4598  002EEC  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4599  002EF0  0012               	return	
  4600  002EF2                     __end_of___ftsub:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodh	equ	0xFF4
  4607                           prodl	equ	0xFF3
  4608                           postinc0	equ	0xFEE
  4609                           wreg	equ	0xFE8
  4610                           postdec1	equ	0xFE5
  4611                           fsr1l	equ	0xFE1
  4612                           indf2	equ	0xFDF
  4613                           postinc2	equ	0xFDE
  4614                           postdec2	equ	0xFDD
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function ___ftneg *****************
  4620 ;; Defined at:
  4621 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  f1              3    0[COMRAM] float 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;		None
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  3    0[COMRAM] float 
  4628 ;; Registers used:
  4629 ;;		wreg, status,2, status,0
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4635 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;Total ram usage:        3 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; This function calls:
  4642 ;;		Nothing
  4643 ;; This function is called by:
  4644 ;;		_sprintf
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text14
  4649  003058                     __ptext14:
  4650                           	opt stack 0
  4651  003058                     ___ftneg:
  4652                           	opt stack 29
  4653                           
  4654                           ;incstack = 0
  4655  003058  5001               	movf	___ftneg@f1,w,c
  4656  00305A  1002               	iorwf	___ftneg@f1+1,w,c
  4657  00305C  1003               	iorwf	___ftneg@f1+2,w,c
  4658  00305E  B4D8               	btfsc	status,2,c
  4659  003060  D006               	goto	l610
  4660  003062  0E00               	movlw	0
  4661  003064  1A01               	xorwf	___ftneg@f1,f,c
  4662  003066  0E00               	movlw	0
  4663  003068  1A02               	xorwf	___ftneg@f1+1,f,c
  4664  00306A  0E80               	movlw	128
  4665  00306C  1A03               	xorwf	___ftneg@f1+2,f,c
  4666  00306E                     l610:
  4667  00306E  C001  F001         	movff	___ftneg@f1,?___ftneg
  4668  003072  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4669  003076  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4670  00307A  0012               	return		;funcret
  4671  00307C                     __end_of___ftneg:
  4672                           	opt stack 0
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           prodh	equ	0xFF4
  4678                           prodl	equ	0xFF3
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           postdec1	equ	0xFE5
  4682                           fsr1l	equ	0xFE1
  4683                           indf2	equ	0xFDF
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function ___ftge *****************
  4691 ;; Defined at:
  4692 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  ff1             3    0[COMRAM] float 
  4695 ;;  ff2             3    3[COMRAM] float 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;		None
  4698 ;; Return value:  Size  Location     Type
  4699 ;;		None               void
  4700 ;; Registers used:
  4701 ;;		wreg, status,2, status,0
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4707 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;Total ram usage:        9 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_main
  4717 ;;		_sprintf
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text15
  4722  002AEE                     __ptext15:
  4723                           	opt stack 0
  4724  002AEE                     ___ftge:
  4725                           	opt stack 29
  4726                           
  4727                           ;incstack = 0
  4728  002AEE  AE03               	btfss	___ftge@ff1+2,7,c
  4729  002AF0  D016               	goto	l2600
  4730  002AF2  C001  F007         	movff	___ftge@ff1,??___ftge
  4731  002AF6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4732  002AFA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4733  002AFE  1E07               	comf	??___ftge,f,c
  4734  002B00  1E08               	comf	??___ftge+1,f,c
  4735  002B02  1E09               	comf	??___ftge+2,f,c
  4736  002B04  2A07               	incf	??___ftge,f,c
  4737  002B06  0E00               	movlw	0
  4738  002B08  2208               	addwfc	??___ftge+1,f,c
  4739  002B0A  2209               	addwfc	??___ftge+2,f,c
  4740  002B0C  0E00               	movlw	0
  4741  002B0E  2407               	addwf	??___ftge,w,c
  4742  002B10  6E01               	movwf	___ftge@ff1,c
  4743  002B12  0E00               	movlw	0
  4744  002B14  2008               	addwfc	??___ftge+1,w,c
  4745  002B16  6E02               	movwf	___ftge@ff1+1,c
  4746  002B18  0E80               	movlw	128
  4747  002B1A  2009               	addwfc	??___ftge+2,w,c
  4748  002B1C  6E03               	movwf	___ftge@ff1+2,c
  4749  002B1E                     l2600:
  4750  002B1E  AE06               	btfss	___ftge@ff2+2,7,c
  4751  002B20  D016               	goto	l2604
  4752  002B22  C004  F007         	movff	___ftge@ff2,??___ftge
  4753  002B26  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4754  002B2A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4755  002B2E  1E07               	comf	??___ftge,f,c
  4756  002B30  1E08               	comf	??___ftge+1,f,c
  4757  002B32  1E09               	comf	??___ftge+2,f,c
  4758  002B34  2A07               	incf	??___ftge,f,c
  4759  002B36  0E00               	movlw	0
  4760  002B38  2208               	addwfc	??___ftge+1,f,c
  4761  002B3A  2209               	addwfc	??___ftge+2,f,c
  4762  002B3C  0E00               	movlw	0
  4763  002B3E  2407               	addwf	??___ftge,w,c
  4764  002B40  6E04               	movwf	___ftge@ff2,c
  4765  002B42  0E00               	movlw	0
  4766  002B44  2008               	addwfc	??___ftge+1,w,c
  4767  002B46  6E05               	movwf	___ftge@ff2+1,c
  4768  002B48  0E80               	movlw	128
  4769  002B4A  2009               	addwfc	??___ftge+2,w,c
  4770  002B4C  6E06               	movwf	___ftge@ff2+2,c
  4771  002B4E                     l2604:
  4772  002B4E  0E00               	movlw	0
  4773  002B50  1A01               	xorwf	___ftge@ff1,f,c
  4774  002B52  0E00               	movlw	0
  4775  002B54  1A02               	xorwf	___ftge@ff1+1,f,c
  4776  002B56  0E80               	movlw	128
  4777  002B58  1A03               	xorwf	___ftge@ff1+2,f,c
  4778  002B5A  0E00               	movlw	0
  4779  002B5C  1A04               	xorwf	___ftge@ff2,f,c
  4780  002B5E  0E00               	movlw	0
  4781  002B60  1A05               	xorwf	___ftge@ff2+1,f,c
  4782  002B62  0E80               	movlw	128
  4783  002B64  1A06               	xorwf	___ftge@ff2+2,f,c
  4784  002B66  5004               	movf	___ftge@ff2,w,c
  4785  002B68  5C01               	subwf	___ftge@ff1,w,c
  4786  002B6A  5005               	movf	___ftge@ff2+1,w,c
  4787  002B6C  5802               	subwfb	___ftge@ff1+1,w,c
  4788  002B6E  5006               	movf	___ftge@ff2+2,w,c
  4789  002B70  5803               	subwfb	___ftge@ff1+2,w,c
  4790  002B72  B0D8               	btfsc	status,0,c
  4791  002B74  D002               	goto	l2610
  4792  002B76  90D8               	bcf	status,0,c
  4793  002B78  0012               	return	
  4794  002B7A                     l2610:
  4795  002B7A  80D8               	bsf	status,0,c
  4796  002B7C  0012               	return	
  4797  002B7E                     __end_of___ftge:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           prodh	equ	0xFF4
  4804                           prodl	equ	0xFF3
  4805                           postinc0	equ	0xFEE
  4806                           wreg	equ	0xFE8
  4807                           postdec1	equ	0xFE5
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           fsr2h	equ	0xFDA
  4813                           fsr2l	equ	0xFD9
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function _setupPorts *****************
  4817 ;; Defined at:
  4818 ;;		line 198 in file "carsensor.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;Total ram usage:        0 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    4
  4839 ;; This function calls:
  4840 ;;		_lcd_init
  4841 ;; This function is called by:
  4842 ;;		_main
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text16
  4847  0030E0                     __ptext16:
  4848                           	opt stack 0
  4849  0030E0                     _setupPorts:
  4850                           	opt stack 26
  4851                           
  4852                           ;carsensor.c: 199: ADCON0 = 0;
  4853                           
  4854                           ;incstack = 0
  4855  0030E0  0E00               	movlw	0
  4856  0030E2  6EC2               	movwf	4034,c	;volatile
  4857                           
  4858                           ;carsensor.c: 200: ADCON1 = 0x0C;
  4859  0030E4  0E0C               	movlw	12
  4860  0030E6  6EC1               	movwf	4033,c	;volatile
  4861                           
  4862                           ;carsensor.c: 201: TRISB = 0xFF;
  4863  0030E8  6893               	setf	3987,c	;volatile
  4864                           
  4865                           ;carsensor.c: 202: TRISC = 0xBE;
  4866  0030EA  0EBE               	movlw	190
  4867  0030EC  6E94               	movwf	3988,c	;volatile
  4868                           
  4869                           ;carsensor.c: 203: TRISA = 0xFF;
  4870  0030EE  6892               	setf	3986,c	;volatile
  4871                           
  4872                           ;carsensor.c: 204: TRISD = 0x00;
  4873  0030F0  0E00               	movlw	0
  4874  0030F2  6E95               	movwf	3989,c	;volatile
  4875                           
  4876                           ;carsensor.c: 205: TRISE = 0x07;
  4877  0030F4  0E07               	movlw	7
  4878  0030F6  6E96               	movwf	3990,c	;volatile
  4879                           
  4880                           ;carsensor.c: 209: lcd_init();
  4881  0030F8  ECDB  F016         	call	_lcd_init	;wreg free
  4882  0030FC  0012               	return	
  4883  0030FE                     __end_of_setupPorts:
  4884                           	opt stack 0
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           postinc0	equ	0xFEE
  4892                           wreg	equ	0xFE8
  4893                           postdec1	equ	0xFE5
  4894                           fsr1l	equ	0xFE1
  4895                           indf2	equ	0xFDF
  4896                           postinc2	equ	0xFDE
  4897                           postdec2	equ	0xFDD
  4898                           fsr2h	equ	0xFDA
  4899                           fsr2l	equ	0xFD9
  4900                           status	equ	0xFD8
  4901                           
  4902 ;; *************** function _lcd_init *****************
  4903 ;; Defined at:
  4904 ;;		line 261 in file "carsensor.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;		None
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  i               1   10[COMRAM] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;Total ram usage:        1 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    3
  4925 ;; This function calls:
  4926 ;;		_delay_ms
  4927 ;;		_lcd_send_byte
  4928 ;;		_lcd_send_nibble
  4929 ;; This function is called by:
  4930 ;;		_setupPorts
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text17
  4935  002DB6                     __ptext17:
  4936                           	opt stack 0
  4937  002DB6                     _lcd_init:
  4938                           	opt stack 26
  4939                           
  4940                           ;carsensor.c: 263: unsigned char i;
  4941                           ;carsensor.c: 266: lcd.rs = 0;
  4942                           
  4943                           ;incstack = 0
  4944  002DB6  9283               	bcf	3971,1,c
  4945                           
  4946                           ;carsensor.c: 268: lcd.enable = 0;
  4947  002DB8  9683               	bcf	3971,3,c
  4948                           
  4949                           ;carsensor.c: 270: delay_ms(25);
  4950  002DBA  0E19               	movlw	25
  4951  002DBC  EC79  F017         	call	_delay_ms
  4952                           
  4953                           ;carsensor.c: 271: for (i = 1; i <= 3; ++i) {
  4954  002DC0  0E01               	movlw	1
  4955  002DC2  6E0B               	movwf	lcd_init@i,c
  4956  002DC4                     l2316:
  4957  002DC4  0E03               	movlw	3
  4958  002DC6  640B               	cpfsgt	lcd_init@i,c
  4959  002DC8  D001               	goto	l2320
  4960  002DCA  D008               	goto	l2326
  4961  002DCC                     l2320:
  4962                           
  4963                           ;carsensor.c: 272: lcd_send_nibble(3);
  4964  002DCC  0E03               	movlw	3
  4965  002DCE  EC19  F018         	call	_lcd_send_nibble
  4966                           
  4967                           ;carsensor.c: 274: delay_ms(6);
  4968  002DD2  0E06               	movlw	6
  4969  002DD4  EC79  F017         	call	_delay_ms
  4970  002DD8  2A0B               	incf	lcd_init@i,f,c
  4971  002DDA  D7F4               	goto	l2316
  4972  002DDC                     l2326:
  4973                           
  4974                           ;carsensor.c: 275: }
  4975                           ;carsensor.c: 277: lcd_send_nibble(2);
  4976  002DDC  0E02               	movlw	2
  4977  002DDE  EC19  F018         	call	_lcd_send_nibble
  4978                           
  4979                           ;carsensor.c: 279: for (i = 0; i <= 3; ++i)
  4980  002DE2  0E00               	movlw	0
  4981  002DE4  6E0B               	movwf	lcd_init@i,c
  4982  002DE6                     l2330:
  4983  002DE6  0E03               	movlw	3
  4984  002DE8  640B               	cpfsgt	lcd_init@i,c
  4985  002DEA  D001               	goto	l2334
  4986  002DEC  0012               	return	
  4987  002DEE                     l2334:
  4988                           
  4989                           ;carsensor.c: 280: lcd_send_byte(0, LCD_INIT_STRING[i]);
  4990  002DEE  500B               	movf	lcd_init@i,w,c
  4991  002DF0  0D01               	mullw	1
  4992  002DF2  0E71               	movlw	low _LCD_INIT_STRING
  4993  002DF4  24F3               	addwf	prodl,w,c
  4994  002DF6  6ED9               	movwf	fsr2l,c
  4995  002DF8  0E00               	movlw	high _LCD_INIT_STRING
  4996  002DFA  20F4               	addwfc	prodh,w,c
  4997  002DFC  6EDA               	movwf	fsr2h,c
  4998  002DFE  50DF               	movf	indf2,w,c
  4999  002E00  6E09               	movwf	lcd_send_byte@n,c
  5000  002E02  0E00               	movlw	0
  5001  002E04  EC93  F017         	call	_lcd_send_byte
  5002  002E08  2A0B               	incf	lcd_init@i,f,c
  5003  002E0A  D7ED               	goto	l2330
  5004  002E0C                     __end_of_lcd_init:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           tblptrh	equ	0xFF7
  5008                           tblptrl	equ	0xFF6
  5009                           tablat	equ	0xFF5
  5010                           prodh	equ	0xFF4
  5011                           prodl	equ	0xFF3
  5012                           postinc0	equ	0xFEE
  5013                           wreg	equ	0xFE8
  5014                           postdec1	equ	0xFE5
  5015                           fsr1l	equ	0xFE1
  5016                           indf2	equ	0xFDF
  5017                           postinc2	equ	0xFDE
  5018                           postdec2	equ	0xFDD
  5019                           fsr2h	equ	0xFDA
  5020                           fsr2l	equ	0xFD9
  5021                           status	equ	0xFD8
  5022                           
  5023 ;; *************** function _set_pwm2_voltage *****************
  5024 ;; Defined at:
  5025 ;;		line 166 in file "carsensor.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;  value           3   72[COMRAM] float 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  tmp             3   75[COMRAM] float 
  5030 ;;  raw_val         2   78[COMRAM] int 
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      void 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2, status,0, cstack
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5040 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;Total ram usage:        8 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    2
  5047 ;; This function calls:
  5048 ;;		___ftadd
  5049 ;;		___ftdiv
  5050 ;;		___ftmul
  5051 ;;		___fttol
  5052 ;;		_set_pwm2_raw
  5053 ;; This function is called by:
  5054 ;;		_main
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text18
  5059  0029BE                     __ptext18:
  5060                           	opt stack 0
  5061  0029BE                     _set_pwm2_voltage:
  5062                           	opt stack 28
  5063                           
  5064                           ;carsensor.c: 168: float tmp = value * 1023.0 / 5.0;
  5065                           
  5066                           ;incstack = 0
  5067  0029BE  0EC0               	movlw	192
  5068  0029C0  6E18               	movwf	___ftmul@f2,c
  5069  0029C2  0E7F               	movlw	127
  5070  0029C4  6E19               	movwf	___ftmul@f2+1,c
  5071  0029C6  0E44               	movlw	68
  5072  0029C8  6E1A               	movwf	___ftmul@f2+2,c
  5073  0029CA  C049  F015         	movff	set_pwm2_voltage@value,___ftmul@f1
  5074  0029CE  C04A  F016         	movff	set_pwm2_voltage@value+1,___ftmul@f1+1
  5075  0029D2  C04B  F017         	movff	set_pwm2_voltage@value+2,___ftmul@f1+2
  5076  0029D6  EC9B  F013         	call	___ftmul	;wreg free
  5077  0029DA  C015  F024         	movff	?___ftmul,___ftdiv@f1
  5078  0029DE  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  5079  0029E2  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  5080  0029E6  0E00               	movlw	0
  5081  0029E8  6E27               	movwf	___ftdiv@f2,c
  5082  0029EA  0EA0               	movlw	160
  5083  0029EC  6E28               	movwf	___ftdiv@f2+1,c
  5084  0029EE  0E40               	movlw	64
  5085  0029F0  6E29               	movwf	___ftdiv@f2+2,c
  5086  0029F2  EC15  F014         	call	___ftdiv	;wreg free
  5087  0029F6  C024  F04C         	movff	?___ftdiv,set_pwm2_voltage@tmp
  5088  0029FA  C025  F04D         	movff	?___ftdiv+1,set_pwm2_voltage@tmp+1
  5089  0029FE  C026  F04E         	movff	?___ftdiv+2,set_pwm2_voltage@tmp+2
  5090                           
  5091                           ;carsensor.c: 169: int raw_val = (int) (tmp + 0.5);
  5092  002A02  0E00               	movlw	0
  5093  002A04  6E31               	movwf	___ftadd@f2,c
  5094  002A06  0E00               	movlw	0
  5095  002A08  6E32               	movwf	___ftadd@f2+1,c
  5096  002A0A  0E3F               	movlw	63
  5097  002A0C  6E33               	movwf	___ftadd@f2+2,c
  5098  002A0E  C04C  F02E         	movff	set_pwm2_voltage@tmp,___ftadd@f1
  5099  002A12  C04D  F02F         	movff	set_pwm2_voltage@tmp+1,___ftadd@f1+1
  5100  002A16  C04E  F030         	movff	set_pwm2_voltage@tmp+2,___ftadd@f1+2
  5101  002A1A  EC1E  F011         	call	___ftadd	;wreg free
  5102  002A1E  C02E  F03A         	movff	?___ftadd,___fttol@f1
  5103  002A22  C02F  F03B         	movff	?___ftadd+1,___fttol@f1+1
  5104  002A26  C030  F03C         	movff	?___ftadd+2,___fttol@f1+2
  5105  002A2A  EC21  F013         	call	___fttol	;wreg free
  5106  002A2E  C03A  F04F         	movff	?___fttol,set_pwm2_voltage@raw_val
  5107  002A32  C03B  F050         	movff	?___fttol+1,set_pwm2_voltage@raw_val+1
  5108                           
  5109                           ;carsensor.c: 170: if (raw_val > 1023) raw_val = 1023;
  5110  002A36  BE50               	btfsc	set_pwm2_voltage@raw_val+1,7,c
  5111  002A38  D007               	goto	l3016
  5112  002A3A  0E04               	movlw	4
  5113  002A3C  5C50               	subwf	set_pwm2_voltage@raw_val+1,w,c
  5114  002A3E  A0D8               	btfss	status,0,c
  5115  002A40  D003               	goto	l3016
  5116  002A42  0E03               	movlw	3
  5117  002A44  6E50               	movwf	set_pwm2_voltage@raw_val+1,c
  5118  002A46  684F               	setf	set_pwm2_voltage@raw_val,c
  5119  002A48                     l3016:
  5120                           
  5121                           ;carsensor.c: 171: set_pwm2_raw(raw_val);
  5122  002A48  C04F  F001         	movff	set_pwm2_voltage@raw_val,set_pwm2_raw@raw_value
  5123  002A4C  C050  F002         	movff	set_pwm2_voltage@raw_val+1,set_pwm2_raw@raw_value+1
  5124  002A50  ECAC  F017         	call	_set_pwm2_raw	;wreg free
  5125  002A54  0012               	return		;funcret
  5126  002A56                     __end_of_set_pwm2_voltage:
  5127                           	opt stack 0
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           prodh	equ	0xFF4
  5133                           prodl	equ	0xFF3
  5134                           postinc0	equ	0xFEE
  5135                           wreg	equ	0xFE8
  5136                           postdec1	equ	0xFE5
  5137                           fsr1l	equ	0xFE1
  5138                           indf2	equ	0xFDF
  5139                           postinc2	equ	0xFDE
  5140                           postdec2	equ	0xFDD
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _set_pwm2_raw *****************
  5146 ;; Defined at:
  5147 ;;		line 192 in file "carsensor.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  raw_value       2    0[COMRAM] unsigned int 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5161 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;Total ram usage:        4 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_set_pwm2_voltage
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text19
  5175  002F58                     __ptext19:
  5176                           	opt stack 0
  5177  002F58                     _set_pwm2_raw:
  5178                           	opt stack 29
  5179                           
  5180                           ;carsensor.c: 194: CCPR2L = (raw_value >> 2) & 0x00FF;
  5181                           
  5182                           ;incstack = 0
  5183  002F58  C001  F003         	movff	set_pwm2_raw@raw_value,??_set_pwm2_raw
  5184  002F5C  C002  F004         	movff	set_pwm2_raw@raw_value+1,??_set_pwm2_raw+1
  5185  002F60  90D8               	bcf	status,0,c
  5186  002F62  3204               	rrcf	??_set_pwm2_raw+1,f,c
  5187  002F64  3203               	rrcf	??_set_pwm2_raw,f,c
  5188  002F66  90D8               	bcf	status,0,c
  5189  002F68  3204               	rrcf	??_set_pwm2_raw+1,f,c
  5190  002F6A  3203               	rrcf	??_set_pwm2_raw,f,c
  5191  002F6C  5003               	movf	??_set_pwm2_raw,w,c
  5192  002F6E  6EBB               	movwf	4027,c	;volatile
  5193                           
  5194                           ;carsensor.c: 195: CCP2CONbits.DC2B = raw_value & 0x0003;
  5195  002F70  C001  F003         	movff	set_pwm2_raw@raw_value,??_set_pwm2_raw
  5196  002F74  0E03               	movlw	3
  5197  002F76  1603               	andwf	??_set_pwm2_raw,f,c
  5198  002F78  3A03               	swapf	??_set_pwm2_raw,f,c
  5199  002F7A  50BA               	movf	4026,w,c	;volatile
  5200  002F7C  1803               	xorwf	??_set_pwm2_raw,w,c
  5201  002F7E  0BCF               	andlw	-49
  5202  002F80  1803               	xorwf	??_set_pwm2_raw,w,c
  5203  002F82  6EBA               	movwf	4026,c	;volatile
  5204  002F84  0012               	return		;funcret
  5205  002F86                     __end_of_set_pwm2_raw:
  5206                           	opt stack 0
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           postinc0	equ	0xFEE
  5214                           wreg	equ	0xFE8
  5215                           postdec1	equ	0xFE5
  5216                           fsr1l	equ	0xFE1
  5217                           indf2	equ	0xFDF
  5218                           postinc2	equ	0xFDE
  5219                           postdec2	equ	0xFDD
  5220                           fsr2h	equ	0xFDA
  5221                           fsr2l	equ	0xFD9
  5222                           status	equ	0xFD8
  5223                           
  5224 ;; *************** function _set_pwm1_voltage *****************
  5225 ;; Defined at:
  5226 ;;		line 157 in file "carsensor.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;  value           3   72[COMRAM] float 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  tmp             3   75[COMRAM] float 
  5231 ;;  raw_val         2   78[COMRAM] int 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, status,2, status,0, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5241 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;Total ram usage:        8 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    2
  5248 ;; This function calls:
  5249 ;;		___ftadd
  5250 ;;		___ftdiv
  5251 ;;		___ftmul
  5252 ;;		___fttol
  5253 ;;		_set_pwm1_raw
  5254 ;; This function is called by:
  5255 ;;		_main
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text20
  5260  002A56                     __ptext20:
  5261                           	opt stack 0
  5262  002A56                     _set_pwm1_voltage:
  5263                           	opt stack 28
  5264                           
  5265                           ;carsensor.c: 159: float tmp = value * 1023.0 / 5.0;
  5266                           
  5267                           ;incstack = 0
  5268  002A56  0EC0               	movlw	192
  5269  002A58  6E18               	movwf	___ftmul@f2,c
  5270  002A5A  0E7F               	movlw	127
  5271  002A5C  6E19               	movwf	___ftmul@f2+1,c
  5272  002A5E  0E44               	movlw	68
  5273  002A60  6E1A               	movwf	___ftmul@f2+2,c
  5274  002A62  C049  F015         	movff	set_pwm1_voltage@value,___ftmul@f1
  5275  002A66  C04A  F016         	movff	set_pwm1_voltage@value+1,___ftmul@f1+1
  5276  002A6A  C04B  F017         	movff	set_pwm1_voltage@value+2,___ftmul@f1+2
  5277  002A6E  EC9B  F013         	call	___ftmul	;wreg free
  5278  002A72  C015  F024         	movff	?___ftmul,___ftdiv@f1
  5279  002A76  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  5280  002A7A  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  5281  002A7E  0E00               	movlw	0
  5282  002A80  6E27               	movwf	___ftdiv@f2,c
  5283  002A82  0EA0               	movlw	160
  5284  002A84  6E28               	movwf	___ftdiv@f2+1,c
  5285  002A86  0E40               	movlw	64
  5286  002A88  6E29               	movwf	___ftdiv@f2+2,c
  5287  002A8A  EC15  F014         	call	___ftdiv	;wreg free
  5288  002A8E  C024  F04C         	movff	?___ftdiv,set_pwm1_voltage@tmp
  5289  002A92  C025  F04D         	movff	?___ftdiv+1,set_pwm1_voltage@tmp+1
  5290  002A96  C026  F04E         	movff	?___ftdiv+2,set_pwm1_voltage@tmp+2
  5291                           
  5292                           ;carsensor.c: 160: int raw_val = (int) (tmp + 0.5);
  5293  002A9A  0E00               	movlw	0
  5294  002A9C  6E31               	movwf	___ftadd@f2,c
  5295  002A9E  0E00               	movlw	0
  5296  002AA0  6E32               	movwf	___ftadd@f2+1,c
  5297  002AA2  0E3F               	movlw	63
  5298  002AA4  6E33               	movwf	___ftadd@f2+2,c
  5299  002AA6  C04C  F02E         	movff	set_pwm1_voltage@tmp,___ftadd@f1
  5300  002AAA  C04D  F02F         	movff	set_pwm1_voltage@tmp+1,___ftadd@f1+1
  5301  002AAE  C04E  F030         	movff	set_pwm1_voltage@tmp+2,___ftadd@f1+2
  5302  002AB2  EC1E  F011         	call	___ftadd	;wreg free
  5303  002AB6  C02E  F03A         	movff	?___ftadd,___fttol@f1
  5304  002ABA  C02F  F03B         	movff	?___ftadd+1,___fttol@f1+1
  5305  002ABE  C030  F03C         	movff	?___ftadd+2,___fttol@f1+2
  5306  002AC2  EC21  F013         	call	___fttol	;wreg free
  5307  002AC6  C03A  F04F         	movff	?___fttol,set_pwm1_voltage@raw_val
  5308  002ACA  C03B  F050         	movff	?___fttol+1,set_pwm1_voltage@raw_val+1
  5309                           
  5310                           ;carsensor.c: 161: if (raw_val > 1023) raw_val = 1023;
  5311  002ACE  BE50               	btfsc	set_pwm1_voltage@raw_val+1,7,c
  5312  002AD0  D007               	goto	l3008
  5313  002AD2  0E04               	movlw	4
  5314  002AD4  5C50               	subwf	set_pwm1_voltage@raw_val+1,w,c
  5315  002AD6  A0D8               	btfss	status,0,c
  5316  002AD8  D003               	goto	l3008
  5317  002ADA  0E03               	movlw	3
  5318  002ADC  6E50               	movwf	set_pwm1_voltage@raw_val+1,c
  5319  002ADE  684F               	setf	set_pwm1_voltage@raw_val,c
  5320  002AE0                     l3008:
  5321                           
  5322                           ;carsensor.c: 162: set_pwm1_raw(raw_val);
  5323  002AE0  C04F  F001         	movff	set_pwm1_voltage@raw_val,set_pwm1_raw@raw_value
  5324  002AE4  C050  F002         	movff	set_pwm1_voltage@raw_val+1,set_pwm1_raw@raw_value+1
  5325  002AE8  ECC3  F017         	call	_set_pwm1_raw	;wreg free
  5326  002AEC  0012               	return		;funcret
  5327  002AEE                     __end_of_set_pwm1_voltage:
  5328                           	opt stack 0
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           prodh	equ	0xFF4
  5334                           prodl	equ	0xFF3
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           postdec1	equ	0xFE5
  5338                           fsr1l	equ	0xFE1
  5339                           indf2	equ	0xFDF
  5340                           postinc2	equ	0xFDE
  5341                           postdec2	equ	0xFDD
  5342                           fsr2h	equ	0xFDA
  5343                           fsr2l	equ	0xFD9
  5344                           status	equ	0xFD8
  5345                           
  5346 ;; *************** function _set_pwm1_raw *****************
  5347 ;; Defined at:
  5348 ;;		line 186 in file "carsensor.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  raw_value       2    0[COMRAM] unsigned int 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;		None
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5362 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;Total ram usage:        4 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; This function calls:
  5369 ;;		Nothing
  5370 ;; This function is called by:
  5371 ;;		_set_pwm1_voltage
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text21
  5376  002F86                     __ptext21:
  5377                           	opt stack 0
  5378  002F86                     _set_pwm1_raw:
  5379                           	opt stack 29
  5380                           
  5381                           ;carsensor.c: 188: CCPR1L = (raw_value >> 2) & 0x00FF;
  5382                           
  5383                           ;incstack = 0
  5384  002F86  C001  F003         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  5385  002F8A  C002  F004         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  5386  002F8E  90D8               	bcf	status,0,c
  5387  002F90  3204               	rrcf	??_set_pwm1_raw+1,f,c
  5388  002F92  3203               	rrcf	??_set_pwm1_raw,f,c
  5389  002F94  90D8               	bcf	status,0,c
  5390  002F96  3204               	rrcf	??_set_pwm1_raw+1,f,c
  5391  002F98  3203               	rrcf	??_set_pwm1_raw,f,c
  5392  002F9A  5003               	movf	??_set_pwm1_raw,w,c
  5393  002F9C  6EBE               	movwf	4030,c	;volatile
  5394                           
  5395                           ;carsensor.c: 189: CCP1CONbits.DC1B = raw_value & 0x0003;
  5396  002F9E  C001  F003         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  5397  002FA2  0E03               	movlw	3
  5398  002FA4  1603               	andwf	??_set_pwm1_raw,f,c
  5399  002FA6  3A03               	swapf	??_set_pwm1_raw,f,c
  5400  002FA8  50BD               	movf	4029,w,c	;volatile
  5401  002FAA  1803               	xorwf	??_set_pwm1_raw,w,c
  5402  002FAC  0BCF               	andlw	-49
  5403  002FAE  1803               	xorwf	??_set_pwm1_raw,w,c
  5404  002FB0  6EBD               	movwf	4029,c	;volatile
  5405  002FB2  0012               	return		;funcret
  5406  002FB4                     __end_of_set_pwm1_raw:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           postinc0	equ	0xFEE
  5415                           wreg	equ	0xFE8
  5416                           postdec1	equ	0xFE5
  5417                           fsr1l	equ	0xFE1
  5418                           indf2	equ	0xFDF
  5419                           postinc2	equ	0xFDE
  5420                           postdec2	equ	0xFDD
  5421                           fsr2h	equ	0xFDA
  5422                           fsr2l	equ	0xFD9
  5423                           status	equ	0xFD8
  5424                           
  5425 ;; *************** function ___fttol *****************
  5426 ;; Defined at:
  5427 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  f1              3   57[COMRAM] float 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  lval            4   67[COMRAM] unsigned long 
  5432 ;;  exp1            1   71[COMRAM] unsigned char 
  5433 ;;  sign1           1   66[COMRAM] unsigned char 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  4   57[COMRAM] long 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5446 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;Total ram usage:       15 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_set_pwm1_voltage
  5453 ;;		_set_pwm2_voltage
  5454 ;;		_sprintf
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text22
  5459  002642                     __ptext22:
  5460                           	opt stack 0
  5461  002642                     ___fttol:
  5462                           	opt stack 29
  5463                           
  5464                           ;incstack = 0
  5465  002642  C03C  F03E         	movff	___fttol@f1+2,??___fttol
  5466  002646  6A3F               	clrf	(??___fttol+1)& (0+255),c
  5467  002648  6A40               	clrf	(??___fttol+2)& (0+255),c
  5468  00264A  343B               	rlcf	___fttol@f1+1,w,c
  5469  00264C  363E               	rlcf	??___fttol& (0+255),f,c
  5470  00264E  E301               	bnc	u2531
  5471  002650  803F               	bsf	(??___fttol+1)& (0+255),0,c
  5472  002652                     u2531:
  5473  002652  503E               	movf	??___fttol,w,c
  5474  002654  6E48               	movwf	___fttol@exp1,c
  5475  002656  5048               	movf	___fttol@exp1,w,c
  5476  002658  A4D8               	btfss	status,2,c
  5477  00265A  D009               	goto	l2624
  5478  00265C  0E00               	movlw	0
  5479  00265E  6E3A               	movwf	?___fttol,c
  5480  002660  0E00               	movlw	0
  5481  002662  6E3B               	movwf	?___fttol+1,c
  5482  002664  0E00               	movlw	0
  5483  002666  6E3C               	movwf	?___fttol+2,c
  5484  002668  0E00               	movlw	0
  5485  00266A  6E3D               	movwf	?___fttol+3,c
  5486  00266C  0012               	return	
  5487  00266E                     l2624:
  5488  00266E  0E17               	movlw	23
  5489  002670  6E3E               	movwf	??___fttol& (0+255),c
  5490  002672  C03A  F03F         	movff	___fttol@f1,??___fttol+1
  5491  002676  C03B  F040         	movff	___fttol@f1+1,??___fttol+2
  5492  00267A  C03C  F041         	movff	___fttol@f1+2,??___fttol+3
  5493  00267E  283E               	incf	??___fttol,w,c
  5494  002680  6E42               	movwf	(??___fttol+4)& (0+255),c
  5495  002682  D004               	goto	u2550
  5496  002684                     u2555:
  5497  002684  90D8               	bcf	status,0,c
  5498  002686  3241               	rrcf	??___fttol+3,f,c
  5499  002688  3240               	rrcf	??___fttol+2,f,c
  5500  00268A  323F               	rrcf	??___fttol+1,f,c
  5501  00268C                     u2550:
  5502  00268C  2E42               	decfsz	(??___fttol+4)& (0+255),f,c
  5503  00268E  D7FA               	goto	u2555
  5504  002690  503F               	movf	??___fttol+1,w,c
  5505  002692  6E43               	movwf	___fttol@sign1,c
  5506  002694  8E3B               	bsf	___fttol@f1+1,7,c
  5507  002696  0EFF               	movlw	255
  5508  002698  163A               	andwf	___fttol@f1,f,c
  5509  00269A  0EFF               	movlw	255
  5510  00269C  163B               	andwf	___fttol@f1+1,f,c
  5511  00269E  0E00               	movlw	0
  5512  0026A0  163C               	andwf	___fttol@f1+2,f,c
  5513  0026A2  503A               	movf	___fttol@f1,w,c
  5514  0026A4  6E44               	movwf	___fttol@lval,c
  5515  0026A6  503B               	movf	___fttol@f1+1,w,c
  5516  0026A8  6E45               	movwf	___fttol@lval+1,c
  5517  0026AA  503C               	movf	___fttol@f1+2,w,c
  5518  0026AC  6E46               	movwf	___fttol@lval+2,c
  5519  0026AE  6A47               	clrf	___fttol@lval+3,c
  5520  0026B0  0E8E               	movlw	142
  5521  0026B2  5E48               	subwf	___fttol@exp1,f,c
  5522  0026B4  AE48               	btfss	___fttol@exp1,7,c
  5523  0026B6  D016               	goto	l2646
  5524  0026B8  5048               	movf	___fttol@exp1,w,c
  5525  0026BA  0A80               	xorlw	128
  5526  0026BC  0F8F               	addlw	143
  5527  0026BE  B0D8               	btfsc	status,0,c
  5528  0026C0  D009               	goto	l2642
  5529  0026C2  0E00               	movlw	0
  5530  0026C4  6E3A               	movwf	?___fttol,c
  5531  0026C6  0E00               	movlw	0
  5532  0026C8  6E3B               	movwf	?___fttol+1,c
  5533  0026CA  0E00               	movlw	0
  5534  0026CC  6E3C               	movwf	?___fttol+2,c
  5535  0026CE  0E00               	movlw	0
  5536  0026D0  6E3D               	movwf	?___fttol+3,c
  5537  0026D2  0012               	return	
  5538  0026D4                     l2642:
  5539  0026D4  90D8               	bcf	status,0,c
  5540  0026D6  3247               	rrcf	___fttol@lval+3,f,c
  5541  0026D8  3246               	rrcf	___fttol@lval+2,f,c
  5542  0026DA  3245               	rrcf	___fttol@lval+1,f,c
  5543  0026DC  3244               	rrcf	___fttol@lval,f,c
  5544  0026DE  3E48               	incfsz	___fttol@exp1,f,c
  5545  0026E0  D7F9               	goto	l2642
  5546  0026E2  D015               	goto	l2656
  5547  0026E4                     l2646:
  5548  0026E4  0E17               	movlw	23
  5549  0026E6  6448               	cpfsgt	___fttol@exp1,c
  5550  0026E8  D00F               	goto	l2654
  5551  0026EA  0E00               	movlw	0
  5552  0026EC  6E3A               	movwf	?___fttol,c
  5553  0026EE  0E00               	movlw	0
  5554  0026F0  6E3B               	movwf	?___fttol+1,c
  5555  0026F2  0E00               	movlw	0
  5556  0026F4  6E3C               	movwf	?___fttol+2,c
  5557  0026F6  0E00               	movlw	0
  5558  0026F8  6E3D               	movwf	?___fttol+3,c
  5559  0026FA  0012               	return	
  5560  0026FC                     l2652:
  5561  0026FC  90D8               	bcf	status,0,c
  5562  0026FE  3644               	rlcf	___fttol@lval,f,c
  5563  002700  3645               	rlcf	___fttol@lval+1,f,c
  5564  002702  3646               	rlcf	___fttol@lval+2,f,c
  5565  002704  3647               	rlcf	___fttol@lval+3,f,c
  5566  002706  0648               	decf	___fttol@exp1,f,c
  5567  002708                     l2654:
  5568  002708  5048               	movf	___fttol@exp1,w,c
  5569  00270A  A4D8               	btfss	status,2,c
  5570  00270C  D7F7               	goto	l2652
  5571  00270E                     l2656:
  5572  00270E  5043               	movf	___fttol@sign1,w,c
  5573  002710  B4D8               	btfsc	status,2,c
  5574  002712  D008               	goto	l2660
  5575  002714  1E47               	comf	___fttol@lval+3,f,c
  5576  002716  1E46               	comf	___fttol@lval+2,f,c
  5577  002718  1E45               	comf	___fttol@lval+1,f,c
  5578  00271A  6C44               	negf	___fttol@lval,c
  5579  00271C  0E00               	movlw	0
  5580  00271E  2245               	addwfc	___fttol@lval+1,f,c
  5581  002720  2246               	addwfc	___fttol@lval+2,f,c
  5582  002722  2247               	addwfc	___fttol@lval+3,f,c
  5583  002724                     l2660:
  5584  002724  C044  F03A         	movff	___fttol@lval,?___fttol
  5585  002728  C045  F03B         	movff	___fttol@lval+1,?___fttol+1
  5586  00272C  C046  F03C         	movff	___fttol@lval+2,?___fttol+2
  5587  002730  C047  F03D         	movff	___fttol@lval+3,?___fttol+3
  5588  002734  0012               	return	
  5589  002736                     __end_of___fttol:
  5590                           	opt stack 0
  5591                           tblptru	equ	0xFF8
  5592                           tblptrh	equ	0xFF7
  5593                           tblptrl	equ	0xFF6
  5594                           tablat	equ	0xFF5
  5595                           prodh	equ	0xFF4
  5596                           prodl	equ	0xFF3
  5597                           postinc0	equ	0xFEE
  5598                           wreg	equ	0xFE8
  5599                           postdec1	equ	0xFE5
  5600                           fsr1l	equ	0xFE1
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           postdec2	equ	0xFDD
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function ___ftmul *****************
  5609 ;; Defined at:
  5610 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  f1              3   20[COMRAM] float 
  5613 ;;  f2              3   23[COMRAM] float 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5616 ;;  sign            1   34[COMRAM] unsigned char 
  5617 ;;  cntr            1   33[COMRAM] unsigned char 
  5618 ;;  exp             1   29[COMRAM] unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  3   20[COMRAM] float 
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5628 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;Total ram usage:       15 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    1
  5635 ;; This function calls:
  5636 ;;		___ftpack
  5637 ;; This function is called by:
  5638 ;;		_set_pwm1_voltage
  5639 ;;		_set_pwm2_voltage
  5640 ;;		_fround
  5641 ;;		_scale
  5642 ;;		_sprintf
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text23
  5647  002736                     __ptext23:
  5648                           	opt stack 0
  5649  002736                     ___ftmul:
  5650                           	opt stack 27
  5651                           
  5652                           ;incstack = 0
  5653  002736  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  5654  00273A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5655  00273C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5656  00273E  3416               	rlcf	___ftmul@f1+1,w,c
  5657  002740  361B               	rlcf	??___ftmul& (0+255),f,c
  5658  002742  E301               	bnc	u1961
  5659  002744  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5660  002746                     u1961:
  5661  002746  501B               	movf	??___ftmul,w,c
  5662  002748  6E1E               	movwf	___ftmul@exp,c
  5663  00274A  501E               	movf	___ftmul@exp,w,c
  5664  00274C  A4D8               	btfss	status,2,c
  5665  00274E  D007               	goto	l2184
  5666  002750  0E00               	movlw	0
  5667  002752  6E15               	movwf	?___ftmul,c
  5668  002754  0E00               	movlw	0
  5669  002756  6E16               	movwf	?___ftmul+1,c
  5670  002758  0E00               	movlw	0
  5671  00275A  6E17               	movwf	?___ftmul+2,c
  5672  00275C  0012               	return	
  5673  00275E                     l2184:
  5674  00275E  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  5675  002762  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5676  002764  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5677  002766  3419               	rlcf	___ftmul@f2+1,w,c
  5678  002768  361B               	rlcf	??___ftmul& (0+255),f,c
  5679  00276A  E301               	bnc	u1981
  5680  00276C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5681  00276E                     u1981:
  5682  00276E  501B               	movf	??___ftmul,w,c
  5683  002770  6E23               	movwf	___ftmul@sign,c
  5684  002772  5023               	movf	___ftmul@sign,w,c
  5685  002774  A4D8               	btfss	status,2,c
  5686  002776  D007               	goto	l2190
  5687  002778  0E00               	movlw	0
  5688  00277A  6E15               	movwf	?___ftmul,c
  5689  00277C  0E00               	movlw	0
  5690  00277E  6E16               	movwf	?___ftmul+1,c
  5691  002780  0E00               	movlw	0
  5692  002782  6E17               	movwf	?___ftmul+2,c
  5693  002784  0012               	return	
  5694  002786                     l2190:
  5695  002786  5023               	movf	___ftmul@sign,w,c
  5696  002788  0F7B               	addlw	123
  5697  00278A  261E               	addwf	___ftmul@exp,f,c
  5698  00278C  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  5699  002790  501A               	movf	___ftmul@f2+2,w,c
  5700  002792  1A23               	xorwf	___ftmul@sign,f,c
  5701  002794  0E80               	movlw	128
  5702  002796  1623               	andwf	___ftmul@sign,f,c
  5703  002798  8E16               	bsf	___ftmul@f1+1,7,c
  5704  00279A  8E19               	bsf	___ftmul@f2+1,7,c
  5705  00279C  0EFF               	movlw	255
  5706  00279E  1618               	andwf	___ftmul@f2,f,c
  5707  0027A0  0EFF               	movlw	255
  5708  0027A2  1619               	andwf	___ftmul@f2+1,f,c
  5709  0027A4  0E00               	movlw	0
  5710  0027A6  161A               	andwf	___ftmul@f2+2,f,c
  5711  0027A8  0E00               	movlw	0
  5712  0027AA  6E1F               	movwf	___ftmul@f3_as_product,c
  5713  0027AC  0E00               	movlw	0
  5714  0027AE  6E20               	movwf	___ftmul@f3_as_product+1,c
  5715  0027B0  0E00               	movlw	0
  5716  0027B2  6E21               	movwf	___ftmul@f3_as_product+2,c
  5717  0027B4  0E07               	movlw	7
  5718  0027B6  6E22               	movwf	___ftmul@cntr,c
  5719  0027B8                     l2204:
  5720  0027B8  A015               	btfss	___ftmul@f1,0,c
  5721  0027BA  D006               	goto	l2208
  5722  0027BC  5018               	movf	___ftmul@f2,w,c
  5723  0027BE  261F               	addwf	___ftmul@f3_as_product,f,c
  5724  0027C0  5019               	movf	___ftmul@f2+1,w,c
  5725  0027C2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5726  0027C4  501A               	movf	___ftmul@f2+2,w,c
  5727  0027C6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5728  0027C8                     l2208:
  5729  0027C8  90D8               	bcf	status,0,c
  5730  0027CA  3217               	rrcf	___ftmul@f1+2,f,c
  5731  0027CC  3216               	rrcf	___ftmul@f1+1,f,c
  5732  0027CE  3215               	rrcf	___ftmul@f1,f,c
  5733  0027D0  90D8               	bcf	status,0,c
  5734  0027D2  3618               	rlcf	___ftmul@f2,f,c
  5735  0027D4  3619               	rlcf	___ftmul@f2+1,f,c
  5736  0027D6  361A               	rlcf	___ftmul@f2+2,f,c
  5737  0027D8  2E22               	decfsz	___ftmul@cntr,f,c
  5738  0027DA  D7EE               	goto	l2204
  5739  0027DC  0E09               	movlw	9
  5740  0027DE  6E22               	movwf	___ftmul@cntr,c
  5741  0027E0                     l2214:
  5742  0027E0  A015               	btfss	___ftmul@f1,0,c
  5743  0027E2  D006               	goto	l2218
  5744  0027E4  5018               	movf	___ftmul@f2,w,c
  5745  0027E6  261F               	addwf	___ftmul@f3_as_product,f,c
  5746  0027E8  5019               	movf	___ftmul@f2+1,w,c
  5747  0027EA  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5748  0027EC  501A               	movf	___ftmul@f2+2,w,c
  5749  0027EE  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5750  0027F0                     l2218:
  5751  0027F0  90D8               	bcf	status,0,c
  5752  0027F2  3217               	rrcf	___ftmul@f1+2,f,c
  5753  0027F4  3216               	rrcf	___ftmul@f1+1,f,c
  5754  0027F6  3215               	rrcf	___ftmul@f1,f,c
  5755  0027F8  90D8               	bcf	status,0,c
  5756  0027FA  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  5757  0027FC  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  5758  0027FE  321F               	rrcf	___ftmul@f3_as_product,f,c
  5759  002800  2E22               	decfsz	___ftmul@cntr,f,c
  5760  002802  D7EE               	goto	l2214
  5761  002804  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5762  002808  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5763  00280C  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5764  002810  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  5765  002814  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  5766  002818  EC88  F014         	call	___ftpack	;wreg free
  5767  00281C  C001  F015         	movff	?___ftpack,?___ftmul
  5768  002820  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  5769  002824  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  5770  002828  0012               	return	
  5771  00282A                     __end_of___ftmul:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           postinc0	equ	0xFEE
  5780                           wreg	equ	0xFE8
  5781                           postdec1	equ	0xFE5
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           postdec2	equ	0xFDD
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function ___ftdiv *****************
  5791 ;; Defined at:
  5792 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  f1              3   35[COMRAM] float 
  5795 ;;  f2              3   38[COMRAM] float 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  f3              3   45[COMRAM] float 
  5798 ;;  sign            1   49[COMRAM] unsigned char 
  5799 ;;  exp             1   48[COMRAM] unsigned char 
  5800 ;;  cntr            1   44[COMRAM] unsigned char 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  3   35[COMRAM] float 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:       15 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    1
  5817 ;; This function calls:
  5818 ;;		___ftpack
  5819 ;; This function is called by:
  5820 ;;		_main
  5821 ;;		_set_pwm1_voltage
  5822 ;;		_set_pwm2_voltage
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text24
  5827  00282A                     __ptext24:
  5828                           	opt stack 0
  5829  00282A                     ___ftdiv:
  5830                           	opt stack 28
  5831                           
  5832                           ;incstack = 0
  5833  00282A  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5834  00282E  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5835  002830  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5836  002832  3425               	rlcf	___ftdiv@f1+1,w,c
  5837  002834  362A               	rlcf	??___ftdiv& (0+255),f,c
  5838  002836  E301               	bnc	u2431
  5839  002838  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5840  00283A                     u2431:
  5841  00283A  502A               	movf	??___ftdiv,w,c
  5842  00283C  6E31               	movwf	___ftdiv@exp,c
  5843  00283E  5031               	movf	___ftdiv@exp,w,c
  5844  002840  A4D8               	btfss	status,2,c
  5845  002842  D007               	goto	l2548
  5846  002844  0E00               	movlw	0
  5847  002846  6E24               	movwf	?___ftdiv,c
  5848  002848  0E00               	movlw	0
  5849  00284A  6E25               	movwf	?___ftdiv+1,c
  5850  00284C  0E00               	movlw	0
  5851  00284E  6E26               	movwf	?___ftdiv+2,c
  5852  002850  0012               	return	
  5853  002852                     l2548:
  5854  002852  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5855  002856  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5856  002858  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5857  00285A  3428               	rlcf	___ftdiv@f2+1,w,c
  5858  00285C  362A               	rlcf	??___ftdiv& (0+255),f,c
  5859  00285E  E301               	bnc	u2451
  5860  002860  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5861  002862                     u2451:
  5862  002862  502A               	movf	??___ftdiv,w,c
  5863  002864  6E32               	movwf	___ftdiv@sign,c
  5864  002866  5032               	movf	___ftdiv@sign,w,c
  5865  002868  A4D8               	btfss	status,2,c
  5866  00286A  D007               	goto	l2554
  5867  00286C  0E00               	movlw	0
  5868  00286E  6E24               	movwf	?___ftdiv,c
  5869  002870  0E00               	movlw	0
  5870  002872  6E25               	movwf	?___ftdiv+1,c
  5871  002874  0E00               	movlw	0
  5872  002876  6E26               	movwf	?___ftdiv+2,c
  5873  002878  0012               	return	
  5874  00287A                     l2554:
  5875  00287A  0E00               	movlw	0
  5876  00287C  6E2E               	movwf	___ftdiv@f3,c
  5877  00287E  0E00               	movlw	0
  5878  002880  6E2F               	movwf	___ftdiv@f3+1,c
  5879  002882  0E00               	movlw	0
  5880  002884  6E30               	movwf	___ftdiv@f3+2,c
  5881  002886  5032               	movf	___ftdiv@sign,w,c
  5882  002888  0F89               	addlw	137
  5883  00288A  5E31               	subwf	___ftdiv@exp,f,c
  5884  00288C  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  5885  002890  5029               	movf	___ftdiv@f2+2,w,c
  5886  002892  1A32               	xorwf	___ftdiv@sign,f,c
  5887  002894  0E80               	movlw	128
  5888  002896  1632               	andwf	___ftdiv@sign,f,c
  5889  002898  8E25               	bsf	___ftdiv@f1+1,7,c
  5890  00289A  0EFF               	movlw	255
  5891  00289C  1624               	andwf	___ftdiv@f1,f,c
  5892  00289E  0EFF               	movlw	255
  5893  0028A0  1625               	andwf	___ftdiv@f1+1,f,c
  5894  0028A2  0E00               	movlw	0
  5895  0028A4  1626               	andwf	___ftdiv@f1+2,f,c
  5896  0028A6  8E28               	bsf	___ftdiv@f2+1,7,c
  5897  0028A8  0EFF               	movlw	255
  5898  0028AA  1627               	andwf	___ftdiv@f2,f,c
  5899  0028AC  0EFF               	movlw	255
  5900  0028AE  1628               	andwf	___ftdiv@f2+1,f,c
  5901  0028B0  0E00               	movlw	0
  5902  0028B2  1629               	andwf	___ftdiv@f2+2,f,c
  5903  0028B4  0E18               	movlw	24
  5904  0028B6  6E2D               	movwf	___ftdiv@cntr,c
  5905  0028B8                     l2574:
  5906  0028B8  90D8               	bcf	status,0,c
  5907  0028BA  362E               	rlcf	___ftdiv@f3,f,c
  5908  0028BC  362F               	rlcf	___ftdiv@f3+1,f,c
  5909  0028BE  3630               	rlcf	___ftdiv@f3+2,f,c
  5910  0028C0  5027               	movf	___ftdiv@f2,w,c
  5911  0028C2  5C24               	subwf	___ftdiv@f1,w,c
  5912  0028C4  5028               	movf	___ftdiv@f2+1,w,c
  5913  0028C6  5825               	subwfb	___ftdiv@f1+1,w,c
  5914  0028C8  5029               	movf	___ftdiv@f2+2,w,c
  5915  0028CA  5826               	subwfb	___ftdiv@f1+2,w,c
  5916  0028CC  A0D8               	btfss	status,0,c
  5917  0028CE  D007               	goto	l571
  5918  0028D0  5027               	movf	___ftdiv@f2,w,c
  5919  0028D2  5E24               	subwf	___ftdiv@f1,f,c
  5920  0028D4  5028               	movf	___ftdiv@f2+1,w,c
  5921  0028D6  5A25               	subwfb	___ftdiv@f1+1,f,c
  5922  0028D8  5029               	movf	___ftdiv@f2+2,w,c
  5923  0028DA  5A26               	subwfb	___ftdiv@f1+2,f,c
  5924  0028DC  802E               	bsf	___ftdiv@f3,0,c
  5925  0028DE                     l571:
  5926  0028DE  90D8               	bcf	status,0,c
  5927  0028E0  3624               	rlcf	___ftdiv@f1,f,c
  5928  0028E2  3625               	rlcf	___ftdiv@f1+1,f,c
  5929  0028E4  3626               	rlcf	___ftdiv@f1+2,f,c
  5930  0028E6  2E2D               	decfsz	___ftdiv@cntr,f,c
  5931  0028E8  D7E7               	goto	l2574
  5932  0028EA  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  5933  0028EE  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5934  0028F2  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5935  0028F6  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  5936  0028FA  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  5937  0028FE  EC88  F014         	call	___ftpack	;wreg free
  5938  002902  C001  F024         	movff	?___ftpack,?___ftdiv
  5939  002906  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  5940  00290A  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  5941  00290E  0012               	return	
  5942  002910                     __end_of___ftdiv:
  5943                           	opt stack 0
  5944                           tblptru	equ	0xFF8
  5945                           tblptrh	equ	0xFF7
  5946                           tblptrl	equ	0xFF6
  5947                           tablat	equ	0xFF5
  5948                           prodh	equ	0xFF4
  5949                           prodl	equ	0xFF3
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           postdec2	equ	0xFDD
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function ___ftadd *****************
  5962 ;; Defined at:
  5963 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  f1              3   45[COMRAM] float 
  5966 ;;  f2              3   48[COMRAM] float 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  exp1            1   56[COMRAM] unsigned char 
  5969 ;;  exp2            1   55[COMRAM] unsigned char 
  5970 ;;  sign            1   54[COMRAM] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  3   45[COMRAM] float 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5980 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;Total ram usage:       12 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    1
  5987 ;; This function calls:
  5988 ;;		___ftpack
  5989 ;; This function is called by:
  5990 ;;		_set_pwm1_voltage
  5991 ;;		_set_pwm2_voltage
  5992 ;;		_sprintf
  5993 ;;		___ftsub
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text25
  5998  00223C                     __ptext25:
  5999                           	opt stack 0
  6000  00223C                     ___ftadd:
  6001                           	opt stack 27
  6002                           
  6003                           ;incstack = 0
  6004  00223C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  6005  002240  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6006  002242  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6007  002244  342F               	rlcf	___ftadd@f1+1,w,c
  6008  002246  3634               	rlcf	??___ftadd& (0+255),f,c
  6009  002248  E301               	bnc	u1751
  6010  00224A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6011  00224C                     u1751:
  6012  00224C  5034               	movf	??___ftadd,w,c
  6013  00224E  6E39               	movwf	___ftadd@exp1,c
  6014  002250  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  6015  002254  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6016  002256  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6017  002258  3432               	rlcf	___ftadd@f2+1,w,c
  6018  00225A  3634               	rlcf	??___ftadd& (0+255),f,c
  6019  00225C  E301               	bnc	u1761
  6020  00225E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6021  002260                     u1761:
  6022  002260  5034               	movf	??___ftadd,w,c
  6023  002262  6E38               	movwf	___ftadd@exp2,c
  6024  002264  5039               	movf	___ftadd@exp1,w,c
  6025  002266  B4D8               	btfsc	status,2,c
  6026  002268  D00B               	goto	l536
  6027  00226A  5038               	movf	___ftadd@exp2,w,c
  6028  00226C  5C39               	subwf	___ftadd@exp1,w,c
  6029  00226E  B0D8               	btfsc	status,0,c
  6030  002270  D00E               	goto	l2116
  6031  002272  5039               	movf	___ftadd@exp1,w,c
  6032  002274  0800               	sublw	0
  6033  002276  2438               	addwf	___ftadd@exp2,w,c
  6034  002278  6E34               	movwf	??___ftadd& (0+255),c
  6035  00227A  0E18               	movlw	24
  6036  00227C  6434               	cpfsgt	??___ftadd,c
  6037  00227E  D007               	goto	l2116
  6038  002280                     l536:
  6039  002280  C031  F02E         	movff	___ftadd@f2,?___ftadd
  6040  002284  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  6041  002288  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  6042  00228C  0012               	return	
  6043  00228E                     l2116:
  6044  00228E  5038               	movf	___ftadd@exp2,w,c
  6045  002290  B4D8               	btfsc	status,2,c
  6046  002292  D00B               	goto	l540
  6047  002294  5039               	movf	___ftadd@exp1,w,c
  6048  002296  5C38               	subwf	___ftadd@exp2,w,c
  6049  002298  B0D8               	btfsc	status,0,c
  6050  00229A  D00E               	goto	l2122
  6051  00229C  5038               	movf	___ftadd@exp2,w,c
  6052  00229E  0800               	sublw	0
  6053  0022A0  2439               	addwf	___ftadd@exp1,w,c
  6054  0022A2  6E34               	movwf	??___ftadd& (0+255),c
  6055  0022A4  0E18               	movlw	24
  6056  0022A6  6434               	cpfsgt	??___ftadd,c
  6057  0022A8  D007               	goto	l2122
  6058  0022AA                     l540:
  6059  0022AA  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  6060  0022AE  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  6061  0022B2  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  6062  0022B6  0012               	return	
  6063  0022B8                     l2122:
  6064  0022B8  0E06               	movlw	6
  6065  0022BA  6E37               	movwf	___ftadd@sign,c
  6066  0022BC  BE30               	btfsc	___ftadd@f1+2,7,c
  6067  0022BE  8E37               	bsf	___ftadd@sign,7,c
  6068  0022C0  BE33               	btfsc	___ftadd@f2+2,7,c
  6069  0022C2  8C37               	bsf	___ftadd@sign,6,c
  6070  0022C4  8E2F               	bsf	___ftadd@f1+1,7,c
  6071  0022C6  0EFF               	movlw	255
  6072  0022C8  162E               	andwf	___ftadd@f1,f,c
  6073  0022CA  0EFF               	movlw	255
  6074  0022CC  162F               	andwf	___ftadd@f1+1,f,c
  6075  0022CE  0E00               	movlw	0
  6076  0022D0  1630               	andwf	___ftadd@f1+2,f,c
  6077  0022D2  8E32               	bsf	___ftadd@f2+1,7,c
  6078  0022D4  0EFF               	movlw	255
  6079  0022D6  1631               	andwf	___ftadd@f2,f,c
  6080  0022D8  0EFF               	movlw	255
  6081  0022DA  1632               	andwf	___ftadd@f2+1,f,c
  6082  0022DC  0E00               	movlw	0
  6083  0022DE  1633               	andwf	___ftadd@f2+2,f,c
  6084  0022E0  5038               	movf	___ftadd@exp2,w,c
  6085  0022E2  5C39               	subwf	___ftadd@exp1,w,c
  6086  0022E4  B0D8               	btfsc	status,0,c
  6087  0022E6  D01B               	goto	l2148
  6088  0022E8                     l2138:
  6089  0022E8  90D8               	bcf	status,0,c
  6090  0022EA  3631               	rlcf	___ftadd@f2,f,c
  6091  0022EC  3632               	rlcf	___ftadd@f2+1,f,c
  6092  0022EE  3633               	rlcf	___ftadd@f2+2,f,c
  6093  0022F0  0638               	decf	___ftadd@exp2,f,c
  6094  0022F2  5039               	movf	___ftadd@exp1,w,c
  6095  0022F4  1838               	xorwf	___ftadd@exp2,w,c
  6096  0022F6  B4D8               	btfsc	status,2,c
  6097  0022F8  D00D               	goto	l2146
  6098  0022FA  0637               	decf	___ftadd@sign,f,c
  6099  0022FC  C037  F034         	movff	___ftadd@sign,??___ftadd
  6100  002300  0E07               	movlw	7
  6101  002302  1634               	andwf	??___ftadd,f,c
  6102  002304  B4D8               	btfsc	status,2,c
  6103  002306  D006               	goto	l2146
  6104  002308  D7EF               	goto	l2138
  6105  00230A                     l2144:
  6106  00230A  90D8               	bcf	status,0,c
  6107  00230C  3230               	rrcf	___ftadd@f1+2,f,c
  6108  00230E  322F               	rrcf	___ftadd@f1+1,f,c
  6109  002310  322E               	rrcf	___ftadd@f1,f,c
  6110  002312  2A39               	incf	___ftadd@exp1,f,c
  6111  002314                     l2146:
  6112  002314  5038               	movf	___ftadd@exp2,w,c
  6113  002316  1839               	xorwf	___ftadd@exp1,w,c
  6114  002318  B4D8               	btfsc	status,2,c
  6115  00231A  D01F               	goto	l551
  6116  00231C  D7F6               	goto	l2144
  6117  00231E                     l2148:
  6118  00231E  5039               	movf	___ftadd@exp1,w,c
  6119  002320  5C38               	subwf	___ftadd@exp2,w,c
  6120  002322  B0D8               	btfsc	status,0,c
  6121  002324  D01A               	goto	l551
  6122  002326                     l2150:
  6123  002326  90D8               	bcf	status,0,c
  6124  002328  362E               	rlcf	___ftadd@f1,f,c
  6125  00232A  362F               	rlcf	___ftadd@f1+1,f,c
  6126  00232C  3630               	rlcf	___ftadd@f1+2,f,c
  6127  00232E  0639               	decf	___ftadd@exp1,f,c
  6128  002330  5039               	movf	___ftadd@exp1,w,c
  6129  002332  1838               	xorwf	___ftadd@exp2,w,c
  6130  002334  B4D8               	btfsc	status,2,c
  6131  002336  D00D               	goto	l2158
  6132  002338  0637               	decf	___ftadd@sign,f,c
  6133  00233A  C037  F034         	movff	___ftadd@sign,??___ftadd
  6134  00233E  0E07               	movlw	7
  6135  002340  1634               	andwf	??___ftadd,f,c
  6136  002342  B4D8               	btfsc	status,2,c
  6137  002344  D006               	goto	l2158
  6138  002346  D7EF               	goto	l2150
  6139  002348                     l2156:
  6140  002348  90D8               	bcf	status,0,c
  6141  00234A  3233               	rrcf	___ftadd@f2+2,f,c
  6142  00234C  3232               	rrcf	___ftadd@f2+1,f,c
  6143  00234E  3231               	rrcf	___ftadd@f2,f,c
  6144  002350  2A38               	incf	___ftadd@exp2,f,c
  6145  002352                     l2158:
  6146  002352  5038               	movf	___ftadd@exp2,w,c
  6147  002354  1839               	xorwf	___ftadd@exp1,w,c
  6148  002356  A4D8               	btfss	status,2,c
  6149  002358  D7F7               	goto	l2156
  6150  00235A                     l551:
  6151  00235A  AE37               	btfss	___ftadd@sign,7,c
  6152  00235C  D00C               	goto	l560
  6153  00235E  0EFF               	movlw	255
  6154  002360  1A2E               	xorwf	___ftadd@f1,f,c
  6155  002362  0EFF               	movlw	255
  6156  002364  1A2F               	xorwf	___ftadd@f1+1,f,c
  6157  002366  0EFF               	movlw	255
  6158  002368  1A30               	xorwf	___ftadd@f1+2,f,c
  6159  00236A  0E01               	movlw	1
  6160  00236C  262E               	addwf	___ftadd@f1,f,c
  6161  00236E  0E00               	movlw	0
  6162  002370  222F               	addwfc	___ftadd@f1+1,f,c
  6163  002372  0E00               	movlw	0
  6164  002374  2230               	addwfc	___ftadd@f1+2,f,c
  6165  002376                     l560:
  6166  002376  AC37               	btfss	___ftadd@sign,6,c
  6167  002378  D00C               	goto	l2164
  6168  00237A  0EFF               	movlw	255
  6169  00237C  1A31               	xorwf	___ftadd@f2,f,c
  6170  00237E  0EFF               	movlw	255
  6171  002380  1A32               	xorwf	___ftadd@f2+1,f,c
  6172  002382  0EFF               	movlw	255
  6173  002384  1A33               	xorwf	___ftadd@f2+2,f,c
  6174  002386  0E01               	movlw	1
  6175  002388  2631               	addwf	___ftadd@f2,f,c
  6176  00238A  0E00               	movlw	0
  6177  00238C  2232               	addwfc	___ftadd@f2+1,f,c
  6178  00238E  0E00               	movlw	0
  6179  002390  2233               	addwfc	___ftadd@f2+2,f,c
  6180  002392                     l2164:
  6181  002392  0E00               	movlw	0
  6182  002394  6E37               	movwf	___ftadd@sign,c
  6183  002396  502E               	movf	___ftadd@f1,w,c
  6184  002398  2631               	addwf	___ftadd@f2,f,c
  6185  00239A  502F               	movf	___ftadd@f1+1,w,c
  6186  00239C  2232               	addwfc	___ftadd@f2+1,f,c
  6187  00239E  5030               	movf	___ftadd@f1+2,w,c
  6188  0023A0  2233               	addwfc	___ftadd@f2+2,f,c
  6189  0023A2  AE33               	btfss	___ftadd@f2+2,7,c
  6190  0023A4  D00E               	goto	l2174
  6191  0023A6  0EFF               	movlw	255
  6192  0023A8  1A31               	xorwf	___ftadd@f2,f,c
  6193  0023AA  0EFF               	movlw	255
  6194  0023AC  1A32               	xorwf	___ftadd@f2+1,f,c
  6195  0023AE  0EFF               	movlw	255
  6196  0023B0  1A33               	xorwf	___ftadd@f2+2,f,c
  6197  0023B2  0E01               	movlw	1
  6198  0023B4  2631               	addwf	___ftadd@f2,f,c
  6199  0023B6  0E00               	movlw	0
  6200  0023B8  2232               	addwfc	___ftadd@f2+1,f,c
  6201  0023BA  0E00               	movlw	0
  6202  0023BC  2233               	addwfc	___ftadd@f2+2,f,c
  6203  0023BE  0E01               	movlw	1
  6204  0023C0  6E37               	movwf	___ftadd@sign,c
  6205  0023C2                     l2174:
  6206  0023C2  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6207  0023C6  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6208  0023CA  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6209  0023CE  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6210  0023D2  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6211  0023D6  EC88  F014         	call	___ftpack	;wreg free
  6212  0023DA  C001  F02E         	movff	?___ftpack,?___ftadd
  6213  0023DE  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6214  0023E2  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6215  0023E6  0012               	return	
  6216  0023E8                     __end_of___ftadd:
  6217                           	opt stack 0
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           postinc0	equ	0xFEE
  6225                           wreg	equ	0xFE8
  6226                           postdec1	equ	0xFE5
  6227                           fsr1l	equ	0xFE1
  6228                           indf2	equ	0xFDF
  6229                           postinc2	equ	0xFDE
  6230                           postdec2	equ	0xFDD
  6231                           fsr2h	equ	0xFDA
  6232                           fsr2l	equ	0xFD9
  6233                           status	equ	0xFD8
  6234                           
  6235 ;; *************** function _lcd_puts *****************
  6236 ;; Defined at:
  6237 ;;		line 308 in file "carsensor.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  s               2   14[COMRAM] PTR unsigned char 
  6240 ;;		 -> main@buff(32), STR_2(32), STR_1(30), 
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6252 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;Total ram usage:        2 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    5
  6259 ;; This function calls:
  6260 ;;		_lcd_putc
  6261 ;; This function is called by:
  6262 ;;		_main
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           	psect	text26
  6267  002E0C                     __ptext26:
  6268                           	opt stack 0
  6269  002E0C                     _lcd_puts:
  6270                           	opt stack 25
  6271                           
  6272                           ;carsensor.c: 309: while (*s) {
  6273                           
  6274                           ;incstack = 0
  6275  002E0C  D015               	goto	l2738
  6276  002E0E                     l2734:
  6277                           
  6278                           ;carsensor.c: 310: lcd_putc(*s);
  6279  002E0E  C00F  FFF6         	movff	lcd_puts@s,tblptrl
  6280  002E12  C010  FFF7         	movff	lcd_puts@s+1,tblptrh
  6281  002E16  0E00               	movlw	low (__smallconst shr (0+16))
  6282  002E18  6EF8               	movwf	tblptru,c
  6283  002E1A  0E0F               	movlw	(high __ramtop+-1)
  6284  002E1C  64F7               	cpfsgt	tblptrh,c
  6285  002E1E  D003               	bra	u2687
  6286  002E20  0008               	tblrd		*
  6287  002E22  50F5               	movf	tablat,w,c
  6288  002E24  D005               	bra	u2680
  6289  002E26                     u2687:
  6290  002E26  CFF6 FFD9          	movff	tblptrl,fsr2l
  6291  002E2A  CFF7 FFDA          	movff	tblptrh,fsr2h
  6292  002E2E  50DF               	movf	indf2,w,c
  6293  002E30                     u2680:
  6294  002E30  EC31  F017         	call	_lcd_putc
  6295                           
  6296                           ;carsensor.c: 311: s++;
  6297  002E34  4A0F               	infsnz	lcd_puts@s,f,c
  6298  002E36  2A10               	incf	lcd_puts@s+1,f,c
  6299  002E38                     l2738:
  6300  002E38  C00F  FFF6         	movff	lcd_puts@s,tblptrl
  6301  002E3C  C010  FFF7         	movff	lcd_puts@s+1,tblptrh
  6302  002E40  0E00               	movlw	low (__smallconst shr (0+16))
  6303  002E42  6EF8               	movwf	tblptru,c
  6304  002E44  0E0F               	movlw	(high __ramtop+-1)
  6305  002E46  64F7               	cpfsgt	tblptrh,c
  6306  002E48  D003               	bra	u2697
  6307  002E4A  0008               	tblrd		*
  6308  002E4C  50F5               	movf	tablat,w,c
  6309  002E4E  D005               	bra	u2690
  6310  002E50                     u2697:
  6311  002E50  CFF6 FFD9          	movff	tblptrl,fsr2l
  6312  002E54  CFF7 FFDA          	movff	tblptrh,fsr2h
  6313  002E58  50DF               	movf	indf2,w,c
  6314  002E5A                     u2690:
  6315  002E5A  0900               	iorlw	0
  6316  002E5C  B4D8               	btfsc	status,2,c
  6317  002E5E  0012               	return	
  6318  002E60  D7D6               	goto	l2734
  6319  002E62                     __end_of_lcd_puts:
  6320                           	opt stack 0
  6321                           tblptru	equ	0xFF8
  6322                           tblptrh	equ	0xFF7
  6323                           tblptrl	equ	0xFF6
  6324                           tablat	equ	0xFF5
  6325                           prodh	equ	0xFF4
  6326                           prodl	equ	0xFF3
  6327                           postinc0	equ	0xFEE
  6328                           wreg	equ	0xFE8
  6329                           postdec1	equ	0xFE5
  6330                           fsr1l	equ	0xFE1
  6331                           indf2	equ	0xFDF
  6332                           postinc2	equ	0xFDE
  6333                           postdec2	equ	0xFDD
  6334                           fsr2h	equ	0xFDA
  6335                           fsr2l	equ	0xFD9
  6336                           status	equ	0xFD8
  6337                           
  6338 ;; *************** function _lcd_putc *****************
  6339 ;; Defined at:
  6340 ;;		line 294 in file "carsensor.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  c               1    wreg     unsigned char 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  c               1   13[COMRAM] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, status,0, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;Total ram usage:        1 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    4
  6361 ;; This function calls:
  6362 ;;		_delay_ms
  6363 ;;		_lcd_gotoxy
  6364 ;;		_lcd_send_byte
  6365 ;; This function is called by:
  6366 ;;		_lcd_puts
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text27
  6371  002E62                     __ptext27:
  6372                           	opt stack 0
  6373  002E62                     _lcd_putc:
  6374                           	opt stack 25
  6375                           
  6376                           ;incstack = 0
  6377                           ;lcd_putc@c stored from wreg
  6378  002E62  6E0E               	movwf	lcd_putc@c,c
  6379                           
  6380                           ;carsensor.c: 295: switch (c) {
  6381  002E64  D01B               	goto	l2352
  6382  002E66                     l2342:
  6383  002E66  0E01               	movlw	1
  6384  002E68  6E09               	movwf	lcd_send_byte@n,c
  6385  002E6A  0E00               	movlw	0
  6386  002E6C  EC93  F017         	call	_lcd_send_byte
  6387                           
  6388                           ;carsensor.c: 297: delay_ms(2);
  6389  002E70  0E02               	movlw	2
  6390  002E72  EC79  F017         	call	_delay_ms
  6391                           
  6392                           ;carsensor.c: 298: break;
  6393  002E76  0012               	return	
  6394  002E78                     l2344:
  6395  002E78  0E02               	movlw	2
  6396  002E7A  6E0B               	movwf	lcd_gotoxy@y,c
  6397  002E7C  0E01               	movlw	1
  6398  002E7E  EC50  F018         	call	_lcd_gotoxy
  6399                           
  6400                           ;carsensor.c: 300: break;
  6401  002E82  0012               	return	
  6402  002E84                     l2346:
  6403  002E84  0E10               	movlw	16
  6404  002E86  6E09               	movwf	lcd_send_byte@n,c
  6405  002E88  0E00               	movlw	0
  6406  002E8A  EC93  F017         	call	_lcd_send_byte
  6407                           
  6408                           ;carsensor.c: 302: break;
  6409  002E8E  0012               	return	
  6410  002E90                     l2348:
  6411  002E90  C00E  F009         	movff	lcd_putc@c,lcd_send_byte@n
  6412  002E94  0E01               	movlw	1
  6413  002E96  EC93  F017         	call	_lcd_send_byte
  6414                           
  6415                           ;carsensor.c: 305: }
  6416                           
  6417                           ;carsensor.c: 304: break;
  6418  002E9A  0012               	return	
  6419  002E9C                     l2352:
  6420  002E9C  500E               	movf	lcd_putc@c,w,c
  6421                           
  6422                           ; Switch size 1, requested type "space"
  6423                           ; Number of cases is 3, Range of values is 8 to 12
  6424                           ; switch strategies available:
  6425                           ; Name         Instructions Cycles
  6426                           ; simple_byte           10     6 (average)
  6427                           ;	Chosen strategy is simple_byte
  6428  002E9E  0A08               	xorlw	8	; case 8
  6429  002EA0  B4D8               	btfsc	status,2,c
  6430  002EA2  D7F0               	goto	l2346
  6431  002EA4  0A02               	xorlw	2	; case 10
  6432  002EA6  B4D8               	btfsc	status,2,c
  6433  002EA8  D7E7               	goto	l2344
  6434  002EAA  0A06               	xorlw	6	; case 12
  6435  002EAC  B4D8               	btfsc	status,2,c
  6436  002EAE  D7DB               	goto	l2342
  6437  002EB0  D7EF               	goto	l2348
  6438  002EB2                     __end_of_lcd_putc:
  6439                           	opt stack 0
  6440                           tblptru	equ	0xFF8
  6441                           tblptrh	equ	0xFF7
  6442                           tblptrl	equ	0xFF6
  6443                           tablat	equ	0xFF5
  6444                           prodh	equ	0xFF4
  6445                           prodl	equ	0xFF3
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           postdec1	equ	0xFE5
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function _lcd_gotoxy *****************
  6458 ;; Defined at:
  6459 ;;		line 283 in file "carsensor.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  x               1    wreg     unsigned char 
  6462 ;;  y               1   10[COMRAM] unsigned char 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;  x               1   11[COMRAM] unsigned char 
  6465 ;;  address         1   12[COMRAM] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6475 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;Total ram usage:        3 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    3
  6482 ;; This function calls:
  6483 ;;		_lcd_send_byte
  6484 ;; This function is called by:
  6485 ;;		_main
  6486 ;;		_lcd_putc
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text28
  6491  0030A0                     __ptext28:
  6492                           	opt stack 0
  6493  0030A0                     _lcd_gotoxy:
  6494                           	opt stack 25
  6495                           
  6496                           ;incstack = 0
  6497                           ;lcd_gotoxy@x stored from wreg
  6498  0030A0  6E0C               	movwf	lcd_gotoxy@x,c
  6499                           
  6500                           ;carsensor.c: 284: unsigned char address;
  6501                           ;carsensor.c: 286: if (y != 1)
  6502  0030A2  040B               	decf	lcd_gotoxy@y,w,c
  6503  0030A4  B4D8               	btfsc	status,2,c
  6504  0030A6  D002               	goto	l2096
  6505                           
  6506                           ;carsensor.c: 287: address = 0x40;
  6507  0030A8  0E40               	movlw	64
  6508  0030AA  D001               	goto	L6
  6509  0030AC                     l2096:
  6510                           
  6511                           ;carsensor.c: 288: else
  6512                           ;carsensor.c: 289: address = 0;
  6513  0030AC  0E00               	movlw	0
  6514  0030AE                     L6:
  6515  0030AE  6E0D               	movwf	lcd_gotoxy@address,c
  6516                           
  6517                           ;carsensor.c: 290: address += x - 1;
  6518  0030B0  040C               	decf	lcd_gotoxy@x,w,c
  6519  0030B2  260D               	addwf	lcd_gotoxy@address,f,c
  6520                           
  6521                           ;carsensor.c: 291: lcd_send_byte(0, (unsigned char) (0x80 | address));
  6522  0030B4  500D               	movf	lcd_gotoxy@address,w,c
  6523  0030B6  0980               	iorlw	128
  6524  0030B8  6E09               	movwf	lcd_send_byte@n,c
  6525  0030BA  0E00               	movlw	0
  6526  0030BC  EC93  F017         	call	_lcd_send_byte
  6527  0030C0  0012               	return		;funcret
  6528  0030C2                     __end_of_lcd_gotoxy:
  6529                           	opt stack 0
  6530                           tblptru	equ	0xFF8
  6531                           tblptrh	equ	0xFF7
  6532                           tblptrl	equ	0xFF6
  6533                           tablat	equ	0xFF5
  6534                           prodh	equ	0xFF4
  6535                           prodl	equ	0xFF3
  6536                           postinc0	equ	0xFEE
  6537                           wreg	equ	0xFE8
  6538                           postdec1	equ	0xFE5
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _lcd_send_byte *****************
  6548 ;; Defined at:
  6549 ;;		line 245 in file "carsensor.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  cm_data         1    wreg     unsigned char 
  6552 ;;  n               1    8[COMRAM] unsigned char 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  cm_data         1    9[COMRAM] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      void 
  6557 ;; Registers used:
  6558 ;;		wreg, status,2, status,0, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6564 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;Total ram usage:        2 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    2
  6571 ;; This function calls:
  6572 ;;		_delay_cycles
  6573 ;;		_delay_ms
  6574 ;;		_lcd_send_nibble
  6575 ;; This function is called by:
  6576 ;;		_lcd_init
  6577 ;;		_lcd_gotoxy
  6578 ;;		_lcd_putc
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text29
  6583  002F26                     __ptext29:
  6584                           	opt stack 0
  6585  002F26                     _lcd_send_byte:
  6586                           	opt stack 26
  6587                           
  6588                           ;incstack = 0
  6589                           ;lcd_send_byte@cm_data stored from wreg
  6590  002F26  6E0A               	movwf	lcd_send_byte@cm_data,c
  6591                           
  6592                           ;carsensor.c: 249: lcd.rs = cm_data;
  6593  002F28  B00A               	btfsc	lcd_send_byte@cm_data,0,c
  6594  002F2A  D002               	bra	u1655
  6595  002F2C  9283               	bcf	3971,1,c
  6596  002F2E  D001               	bra	u1656
  6597  002F30                     u1655:
  6598  002F30  8283               	bsf	3971,1,c
  6599  002F32                     u1656:
  6600                           
  6601                           ;carsensor.c: 250: delay_cycles(1);
  6602  002F32  0E01               	movlw	1
  6603  002F34  ECDA  F017         	call	_delay_cycles
  6604                           
  6605                           ;carsensor.c: 252: delay_cycles(1);
  6606  002F38  0E01               	movlw	1
  6607  002F3A  ECDA  F017         	call	_delay_cycles
  6608                           
  6609                           ;carsensor.c: 253: lcd.enable = 0;
  6610  002F3E  9683               	bcf	3971,3,c
  6611                           
  6612                           ;carsensor.c: 254: lcd_send_nibble(n >> 4);
  6613  002F40  3809               	swapf	lcd_send_byte@n,w,c
  6614  002F42  0B0F               	andlw	15
  6615  002F44  EC19  F018         	call	_lcd_send_nibble
  6616                           
  6617                           ;carsensor.c: 255: lcd_send_nibble(n & 0x0f);
  6618  002F48  5009               	movf	lcd_send_byte@n,w,c
  6619  002F4A  0B0F               	andlw	15
  6620  002F4C  EC19  F018         	call	_lcd_send_nibble
  6621                           
  6622                           ;carsensor.c: 257: delay_ms(2);
  6623  002F50  0E02               	movlw	2
  6624  002F52  EC79  F017         	call	_delay_ms
  6625  002F56  0012               	return		;funcret
  6626  002F58                     __end_of_lcd_send_byte:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           postinc0	equ	0xFEE
  6635                           wreg	equ	0xFE8
  6636                           postdec1	equ	0xFE5
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           postdec2	equ	0xFDD
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _lcd_send_nibble *****************
  6646 ;; Defined at:
  6647 ;;		line 235 in file "carsensor.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  n               1    wreg     unsigned char 
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  n               1    7[COMRAM] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;Total ram usage:        2 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    1
  6668 ;; This function calls:
  6669 ;;		_delay_cycles
  6670 ;; This function is called by:
  6671 ;;		_lcd_send_byte
  6672 ;;		_lcd_init
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text30
  6677  003032                     __ptext30:
  6678                           	opt stack 0
  6679  003032                     _lcd_send_nibble:
  6680                           	opt stack 27
  6681                           
  6682                           ;incstack = 0
  6683                           ;lcd_send_nibble@n stored from wreg
  6684  003032  6E08               	movwf	lcd_send_nibble@n,c
  6685                           
  6686                           ;carsensor.c: 237: lcd.data = n;
  6687  003034  C008  F007         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  6688  003038  3A07               	swapf	??_lcd_send_nibble,f,c
  6689  00303A  5083               	movf	3971,w,c
  6690  00303C  1807               	xorwf	??_lcd_send_nibble,w,c
  6691  00303E  0B0F               	andlw	-241
  6692  003040  1807               	xorwf	??_lcd_send_nibble,w,c
  6693  003042  6E83               	movwf	3971,c
  6694                           
  6695                           ;carsensor.c: 239: delay_cycles(1);
  6696  003044  0E01               	movlw	1
  6697  003046  ECDA  F017         	call	_delay_cycles
  6698                           
  6699                           ;carsensor.c: 240: lcd.enable = 1;
  6700  00304A  8683               	bsf	3971,3,c
  6701                           
  6702                           ;carsensor.c: 241: _delaywdt((unsigned long)((20)*(4000000UL/4000000.0)));
  6703  00304C  0E05               	movlw	5
  6704  00304E                     u3257:
  6705  00304E  0004               	clrwdt	
  6706  003050  2EE8               	decfsz	wreg,f,c
  6707  003052  D7FD               	goto	u3257
  6708                           
  6709                           ;carsensor.c: 242: lcd.enable = 0;
  6710  003054  9683               	bcf	3971,3,c
  6711  003056  0012               	return		;funcret
  6712  003058                     __end_of_lcd_send_nibble:
  6713                           	opt stack 0
  6714                           tblptru	equ	0xFF8
  6715                           tblptrh	equ	0xFF7
  6716                           tblptrl	equ	0xFF6
  6717                           tablat	equ	0xFF5
  6718                           prodh	equ	0xFF4
  6719                           prodl	equ	0xFF3
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           postdec1	equ	0xFE5
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function _delay_cycles *****************
  6732 ;; Defined at:
  6733 ;;		line 226 in file "carsensor.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;  n               1    wreg     unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  n               1    3[COMRAM] unsigned char 
  6738 ;;  x               2    4[COMRAM] int 
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  1    wreg      void 
  6741 ;; Registers used:
  6742 ;;		wreg, status,2, status,0
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;Total ram usage:        6 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_lcd_send_nibble
  6758 ;;		_lcd_send_byte
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text31
  6763  002FB4                     __ptext31:
  6764                           	opt stack 0
  6765  002FB4                     _delay_cycles:
  6766                           	opt stack 27
  6767                           
  6768                           ;incstack = 0
  6769                           ;delay_cycles@n stored from wreg
  6770  002FB4  6E04               	movwf	delay_cycles@n,c
  6771                           
  6772                           ;carsensor.c: 227: int x;
  6773                           ;carsensor.c: 228: for (x = 0; x <= n; x++) {
  6774  002FB6  0E00               	movlw	0
  6775  002FB8  6E06               	movwf	delay_cycles@x+1,c
  6776  002FBA  0E00               	movlw	0
  6777  002FBC  6E05               	movwf	delay_cycles@x,c
  6778  002FBE  D003               	goto	l2022
  6779  002FC0                     l126:
  6780  002FC0  0004               	clrwdt		;# 
  6781  002FC2  4A05               	infsnz	delay_cycles@x,f,c
  6782  002FC4  2A06               	incf	delay_cycles@x+1,f,c
  6783  002FC6                     l2022:
  6784  002FC6  5004               	movf	delay_cycles@n,w,c
  6785  002FC8  6E01               	movwf	??_delay_cycles& (0+255),c
  6786  002FCA  6A02               	clrf	(??_delay_cycles+1)& (0+255),c
  6787  002FCC  5005               	movf	delay_cycles@x,w,c
  6788  002FCE  5C01               	subwf	??_delay_cycles,w,c
  6789  002FD0  5002               	movf	??_delay_cycles+1,w,c
  6790  002FD2  0A80               	xorlw	128
  6791  002FD4  6E03               	movwf	(??_delay_cycles+2)& (0+255),c
  6792  002FD6  5006               	movf	delay_cycles@x+1,w,c
  6793  002FD8  0A80               	xorlw	128
  6794  002FDA  5803               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  6795  002FDC  A0D8               	btfss	status,0,c
  6796  002FDE  0012               	return	
  6797  002FE0  D7EF               	goto	l126
  6798  002FE2                     __end_of_delay_cycles:
  6799                           	opt stack 0
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           postinc0	equ	0xFEE
  6807                           wreg	equ	0xFE8
  6808                           postdec1	equ	0xFE5
  6809                           fsr1l	equ	0xFE1
  6810                           indf2	equ	0xFDF
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _delay_ms *****************
  6818 ;; Defined at:
  6819 ;;		line 218 in file "carsensor.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  n               1    wreg     unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  n               1    3[COMRAM] unsigned char 
  6824 ;;  x               2    4[COMRAM] int 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      void 
  6827 ;; Registers used:
  6828 ;;		wreg, status,2, status,0, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;Total ram usage:        6 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_main
  6844 ;;		_lcd_send_byte
  6845 ;;		_lcd_init
  6846 ;;		_lcd_putc
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text32
  6851  002EF2                     __ptext32:
  6852                           	opt stack 0
  6853  002EF2                     _delay_ms:
  6854                           	opt stack 27
  6855                           
  6856                           ;incstack = 0
  6857                           ;delay_ms@n stored from wreg
  6858  002EF2  6E04               	movwf	delay_ms@n,c
  6859                           
  6860                           ;carsensor.c: 219: int x;
  6861                           ;carsensor.c: 220: for (x = 0; x <= n; x++) {
  6862  002EF4  0E00               	movlw	0
  6863  002EF6  6E06               	movwf	delay_ms@x+1,c
  6864  002EF8  0E00               	movlw	0
  6865  002EFA  6E05               	movwf	delay_ms@x,c
  6866  002EFC  D006               	goto	l2030
  6867  002EFE                     l2026:
  6868                           
  6869                           ;carsensor.c: 221: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  6870  002EFE  0EFA               	movlw	250
  6871  002F00                     u3267:
  6872  002F00  0004               	clrwdt	
  6873  002F02  2EE8               	decfsz	wreg,f,c
  6874  002F04  D7FD               	goto	u3267
  6875  002F06  4A05               	infsnz	delay_ms@x,f,c
  6876  002F08  2A06               	incf	delay_ms@x+1,f,c
  6877  002F0A                     l2030:
  6878  002F0A  5004               	movf	delay_ms@n,w,c
  6879  002F0C  6E01               	movwf	??_delay_ms& (0+255),c
  6880  002F0E  6A02               	clrf	(??_delay_ms+1)& (0+255),c
  6881  002F10  5005               	movf	delay_ms@x,w,c
  6882  002F12  5C01               	subwf	??_delay_ms,w,c
  6883  002F14  5002               	movf	??_delay_ms+1,w,c
  6884  002F16  0A80               	xorlw	128
  6885  002F18  6E03               	movwf	(??_delay_ms+2)& (0+255),c
  6886  002F1A  5006               	movf	delay_ms@x+1,w,c
  6887  002F1C  0A80               	xorlw	128
  6888  002F1E  5803               	subwfb	(??_delay_ms+2)& (0+255),w,c
  6889  002F20  A0D8               	btfss	status,0,c
  6890  002F22  0012               	return	
  6891  002F24  D7EC               	goto	l2026
  6892  002F26                     __end_of_delay_ms:
  6893                           	opt stack 0
  6894                           tblptru	equ	0xFF8
  6895                           tblptrh	equ	0xFF7
  6896                           tblptrl	equ	0xFF6
  6897                           tablat	equ	0xFF5
  6898                           prodh	equ	0xFF4
  6899                           prodl	equ	0xFF3
  6900                           postinc0	equ	0xFEE
  6901                           wreg	equ	0xFE8
  6902                           postdec1	equ	0xFE5
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _init_pwm1 *****************
  6912 ;; Defined at:
  6913 ;;		line 175 in file "carsensor.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;Total ram usage:        0 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; This function calls:
  6934 ;;		Nothing
  6935 ;; This function is called by:
  6936 ;;		_main
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text33
  6941  0030FE                     __ptext33:
  6942                           	opt stack 0
  6943  0030FE                     _init_pwm1:
  6944                           	opt stack 30
  6945                           
  6946                           ;carsensor.c: 177: PR2 = 255;
  6947                           
  6948                           ;incstack = 0
  6949  0030FE  68CB               	setf	4043,c	;volatile
  6950                           
  6951                           ;carsensor.c: 178: T2CON = 0;
  6952  003100  0E00               	movlw	0
  6953  003102  6ECA               	movwf	4042,c	;volatile
  6954                           
  6955                           ;carsensor.c: 179: CCP1CON = 0x0C;
  6956  003104  0E0C               	movlw	12
  6957  003106  6EBD               	movwf	4029,c	;volatile
  6958                           
  6959                           ;carsensor.c: 180: CCP2CON = 0x0C;
  6960  003108  0E0C               	movlw	12
  6961  00310A  6EBA               	movwf	4026,c	;volatile
  6962                           
  6963                           ;carsensor.c: 181: T2CONbits.TMR2ON = 1;
  6964  00310C  84CA               	bsf	4042,2,c	;volatile
  6965                           
  6966                           ;carsensor.c: 182: TRISCbits.RC2 = 0;
  6967  00310E  9494               	bcf	3988,2,c	;volatile
  6968                           
  6969                           ;carsensor.c: 183: TRISCbits.RC1 = 0;
  6970  003110  9294               	bcf	3988,1,c	;volatile
  6971  003112  0012               	return		;funcret
  6972  003114                     __end_of_init_pwm1:
  6973                           	opt stack 0
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           postinc0	equ	0xFEE
  6981                           wreg	equ	0xFE8
  6982                           postdec1	equ	0xFE5
  6983                           fsr1l	equ	0xFE1
  6984                           indf2	equ	0xFDF
  6985                           postinc2	equ	0xFDE
  6986                           postdec2	equ	0xFDD
  6987                           fsr2h	equ	0xFDA
  6988                           fsr2l	equ	0xFD9
  6989                           status	equ	0xFD8
  6990                           
  6991 ;; *************** function ___lwtoft *****************
  6992 ;; Defined at:
  6993 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwtoft.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  c               2    8[COMRAM] unsigned int 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  3    8[COMRAM] float 
  7000 ;; Registers used:
  7001 ;;		wreg, status,2, status,0, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7007 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;Total ram usage:        3 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    1
  7014 ;; This function calls:
  7015 ;;		___ftpack
  7016 ;; This function is called by:
  7017 ;;		_main
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text34
  7022  00307C                     __ptext34:
  7023                           	opt stack 0
  7024  00307C                     ___lwtoft:
  7025                           	opt stack 29
  7026                           
  7027                           ;incstack = 0
  7028  00307C  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7029  003080  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7030  003084  6A03               	clrf	___ftpack@arg+2,c
  7031  003086  0E8E               	movlw	142
  7032  003088  6E04               	movwf	___ftpack@exp,c
  7033  00308A  0E00               	movlw	0
  7034  00308C  6E05               	movwf	___ftpack@sign,c
  7035  00308E  EC88  F014         	call	___ftpack	;wreg free
  7036  003092  C001  F009         	movff	?___ftpack,?___lwtoft
  7037  003096  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7038  00309A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7039  00309E  0012               	return	
  7040  0030A0                     __end_of___lwtoft:
  7041                           	opt stack 0
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           postinc0	equ	0xFEE
  7049                           wreg	equ	0xFE8
  7050                           postdec1	equ	0xFE5
  7051                           fsr1l	equ	0xFE1
  7052                           indf2	equ	0xFDF
  7053                           postinc2	equ	0xFDE
  7054                           postdec2	equ	0xFDD
  7055                           fsr2h	equ	0xFDA
  7056                           fsr2l	equ	0xFD9
  7057                           status	equ	0xFD8
  7058                           
  7059 ;; *************** function ___ftpack *****************
  7060 ;; Defined at:
  7061 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;  arg             3    0[COMRAM] unsigned um
  7064 ;;  exp             1    3[COMRAM] unsigned char 
  7065 ;;  sign            1    4[COMRAM] unsigned char 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;		None
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  3    0[COMRAM] float 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7077 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;Total ram usage:        8 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; This function calls:
  7084 ;;		Nothing
  7085 ;; This function is called by:
  7086 ;;		___ftadd
  7087 ;;		___ftdiv
  7088 ;;		___ftmul
  7089 ;;		___lltoft
  7090 ;;		___lwtoft
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           	psect	text35
  7095  002910                     __ptext35:
  7096                           	opt stack 0
  7097  002910                     ___ftpack:
  7098                           	opt stack 27
  7099                           
  7100                           ;incstack = 0
  7101  002910  5004               	movf	___ftpack@exp,w,c
  7102  002912  B4D8               	btfsc	status,2,c
  7103  002914  D005               	goto	l2060
  7104  002916  5001               	movf	___ftpack@arg,w,c
  7105  002918  1002               	iorwf	___ftpack@arg+1,w,c
  7106  00291A  1003               	iorwf	___ftpack@arg+2,w,c
  7107  00291C  A4D8               	btfss	status,2,c
  7108  00291E  D00C               	goto	l2066
  7109  002920                     l2060:
  7110  002920  0E00               	movlw	0
  7111  002922  6E01               	movwf	?___ftpack,c
  7112  002924  0E00               	movlw	0
  7113  002926  6E02               	movwf	?___ftpack+1,c
  7114  002928  0E00               	movlw	0
  7115  00292A  6E03               	movwf	?___ftpack+2,c
  7116  00292C  0012               	return	
  7117  00292E                     l2064:
  7118  00292E  2A04               	incf	___ftpack@exp,f,c
  7119  002930  90D8               	bcf	status,0,c
  7120  002932  3203               	rrcf	___ftpack@arg+2,f,c
  7121  002934  3202               	rrcf	___ftpack@arg+1,f,c
  7122  002936  3201               	rrcf	___ftpack@arg,f,c
  7123  002938                     l2066:
  7124  002938  0E00               	movlw	0
  7125  00293A  1401               	andwf	___ftpack@arg,w,c
  7126  00293C  6E06               	movwf	??___ftpack& (0+255),c
  7127  00293E  0E00               	movlw	0
  7128  002940  1402               	andwf	___ftpack@arg+1,w,c
  7129  002942  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7130  002944  0EFE               	movlw	254
  7131  002946  1403               	andwf	___ftpack@arg+2,w,c
  7132  002948  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7133  00294A  5006               	movf	??___ftpack,w,c
  7134  00294C  1007               	iorwf	??___ftpack+1,w,c
  7135  00294E  1008               	iorwf	??___ftpack+2,w,c
  7136  002950  B4D8               	btfsc	status,2,c
  7137  002952  D00C               	goto	l2072
  7138  002954  D7EC               	goto	l2064
  7139  002956                     l2068:
  7140  002956  2A04               	incf	___ftpack@exp,f,c
  7141  002958  0E01               	movlw	1
  7142  00295A  2601               	addwf	___ftpack@arg,f,c
  7143  00295C  0E00               	movlw	0
  7144  00295E  2202               	addwfc	___ftpack@arg+1,f,c
  7145  002960  0E00               	movlw	0
  7146  002962  2203               	addwfc	___ftpack@arg+2,f,c
  7147  002964  90D8               	bcf	status,0,c
  7148  002966  3203               	rrcf	___ftpack@arg+2,f,c
  7149  002968  3202               	rrcf	___ftpack@arg+1,f,c
  7150  00296A  3201               	rrcf	___ftpack@arg,f,c
  7151  00296C                     l2072:
  7152  00296C  0E00               	movlw	0
  7153  00296E  1401               	andwf	___ftpack@arg,w,c
  7154  002970  6E06               	movwf	??___ftpack& (0+255),c
  7155  002972  0E00               	movlw	0
  7156  002974  1402               	andwf	___ftpack@arg+1,w,c
  7157  002976  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7158  002978  0EFF               	movlw	255
  7159  00297A  1403               	andwf	___ftpack@arg+2,w,c
  7160  00297C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7161  00297E  5006               	movf	??___ftpack,w,c
  7162  002980  1007               	iorwf	??___ftpack+1,w,c
  7163  002982  1008               	iorwf	??___ftpack+2,w,c
  7164  002984  B4D8               	btfsc	status,2,c
  7165  002986  D006               	goto	l2076
  7166  002988  D7E6               	goto	l2068
  7167  00298A                     l2074:
  7168  00298A  0604               	decf	___ftpack@exp,f,c
  7169  00298C  90D8               	bcf	status,0,c
  7170  00298E  3601               	rlcf	___ftpack@arg,f,c
  7171  002990  3602               	rlcf	___ftpack@arg+1,f,c
  7172  002992  3603               	rlcf	___ftpack@arg+2,f,c
  7173  002994                     l2076:
  7174  002994  BE02               	btfsc	___ftpack@arg+1,7,c
  7175  002996  D003               	goto	l513
  7176  002998  0E02               	movlw	2
  7177  00299A  6004               	cpfslt	___ftpack@exp,c
  7178  00299C  D7F6               	goto	l2074
  7179  00299E                     l513:
  7180  00299E  A004               	btfss	___ftpack@exp,0,c
  7181  0029A0  9E02               	bcf	___ftpack@arg+1,7,c
  7182  0029A2  90D8               	bcf	status,0,c
  7183  0029A4  3204               	rrcf	___ftpack@exp,f,c
  7184  0029A6  5004               	movf	___ftpack@exp,w,c
  7185  0029A8  1203               	iorwf	___ftpack@arg+2,f,c
  7186  0029AA  5005               	movf	___ftpack@sign,w,c
  7187  0029AC  A4D8               	btfss	status,2,c
  7188  0029AE  8E03               	bsf	___ftpack@arg+2,7,c
  7189  0029B0  C001  F001         	movff	___ftpack@arg,?___ftpack
  7190  0029B4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7191  0029B8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7192  0029BC  0012               	return	
  7193  0029BE                     __end_of___ftpack:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           postinc0	equ	0xFEE
  7202                           wreg	equ	0xFE8
  7203                           postdec1	equ	0xFE5
  7204                           fsr1l	equ	0xFE1
  7205                           indf2	equ	0xFDF
  7206                           postinc2	equ	0xFDE
  7207                           postdec2	equ	0xFDD
  7208                           fsr2h	equ	0xFDA
  7209                           fsr2l	equ	0xFD9
  7210                           status	equ	0xFD8
  7211                           tblptru	equ	0xFF8
  7212                           tblptrh	equ	0xFF7
  7213                           tblptrl	equ	0xFF6
  7214                           tablat	equ	0xFF5
  7215                           prodh	equ	0xFF4
  7216                           prodl	equ	0xFF3
  7217                           postinc0	equ	0xFEE
  7218                           wreg	equ	0xFE8
  7219                           postdec1	equ	0xFE5
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228                           	psect	rparam
  7229  0000                     tblptru	equ	0xFF8
  7230                           tblptrh	equ	0xFF7
  7231                           tblptrl	equ	0xFF6
  7232                           tablat	equ	0xFF5
  7233                           prodh	equ	0xFF4
  7234                           prodl	equ	0xFF3
  7235                           postinc0	equ	0xFEE
  7236                           wreg	equ	0xFE8
  7237                           postdec1	equ	0xFE5
  7238                           fsr1l	equ	0xFE1
  7239                           indf2	equ	0xFDF
  7240                           postinc2	equ	0xFDE
  7241                           postdec2	equ	0xFDD
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8


Data Sizes:
    Strings     85
    Constant    118
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    112     116
    BANK0           128     40      40
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[8]), STR_3(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@buff(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@buff(BANK0[32]), STR_2(CODE[32]), STR_1(CODE[30]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    _setupPorts->_lcd_init
    _lcd_init->_lcd_send_byte
    _set_pwm2_voltage->___fttol
    _set_pwm1_voltage->___fttol
    ___fttol->___ftadd
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___ftadd->_fround
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles
    ___lwtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    42      0   80400
                                            110 COMRAM     2     2      0
                                              0 BANK0     40    40      0
                            ___ftdiv
                             ___ftge
                           ___lwtoft
                           _delay_ms
                          _init_pwm1
                         _lcd_gotoxy
                           _lcd_puts
                   _set_pwm1_voltage
                   _set_pwm2_voltage
                         _setupPorts
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   45767
                                             72 COMRAM    38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10565
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10367
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3860
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1160
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0     774
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     774
                                             10 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _set_pwm2_voltage                                     8     5      3   12306
                                             72 COMRAM     8     5      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                       _set_pwm2_raw
 ---------------------------------------------------------------------------------
 (2) _set_pwm2_raw                                         4     2      2     108
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _set_pwm1_voltage                                     8     5      3   12306
                                             72 COMRAM     8     5      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (2) _set_pwm1_raw                                         4     2      2     108
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     572
                                             57 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4585
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3003
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3563
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    1744
                                             14 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1443
                                             13 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1     807
                                             10 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1     546
                                              8 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      68
                                              6 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (4) _delay_cycles                                         6     6      0      46
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     6      0      46
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2195
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftge
   ___lwtoft
     ___ftpack
   _delay_ms
   _init_pwm1
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _set_pwm1_voltage
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _set_pwm1_raw
   _set_pwm2_voltage
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _set_pwm2_raw
   _setupPorts
     _lcd_init
       _delay_ms
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
       _lcd_send_nibble
         _delay_cycles
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      28       5       31.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     70      74       1       91.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      34        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Apr 30 04:47:31 2019

                       l76 1DAC                         l79 1DB2             ?_lcd_send_byte 0009  
             ___awdiv@sign 000C        ___wmul@multiplicand 0011                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$XT 000000               ___ftadd@exp1 0039  
             ___ftadd@exp2 0038                __CFG_LVP$ON 000000               ___ftadd@sign 0037  
              __CFG_WDT$ON 000000                        l126 2FC0                        l247 1684  
                      l513 299E                        l610 306E                        l540 22AA  
                      l551 235A                        l560 2376                        l536 2280  
                      l481 2630                        l571 28DE                        l660 2C72  
                      l670 2D48                        l585 2508                        l578 247A  
                      l579 24A2               __CFG_CPB$OFF 000000                        _PR2 000FCB  
             __CFG_CPD$OFF 000000                        _lcd 000F83               ___awmod@sign 0006  
                      prod 000FF3                        wreg 000FE8                lcd_gotoxy@x 000C  
              lcd_gotoxy@y 000B               ___ftdiv@cntr 002D               ___ftdiv@sign 0032  
                     l2030 2F0A                       l2022 2FC6                       l2026 2EFE  
                     l2122 22B8                       l2060 2920                       l2116 228E  
                     l2204 27B8                       l2150 2326                       l2214 27E0  
                     l2302 2CEA                       l2072 296C                       l2064 292E  
                     l2144 230A                       l2208 27C8                       l3008 2AE0  
                     l3016 2A48                       l2320 2DCC                       l2240 2BA2  
                     l2074 298A                       l2066 2938                       l2146 2314  
                     l2138 22E8                       l2218 27F0                       l2330 2DE6  
                     l2250 2BC4                       l2234 2B92                       l2410 1D0C  
                     l2076 2994                       l2068 2956                       l2164 2392  
                     l2156 2348                       l2148 231E                       l2316 2DC4  
                     l2404 1C68                       l2342 2E66                       l2174 23C2  
                     l2158 2352                       l2190 2786                       l2334 2DEE  
                     l2326 2DDC                       l2246 2BB8                       l2262 2BEA  
                     l2422 30D8                       l2096 30AC                       l2344 2E78  
                     l2352 2E9C                       l2184 275E                       l2600 2B1E  
                     l2432 2414                       l2248 2BC0                       l3080 1F4A  
                     l3072 1EC2                       l2346 2E84                       l2610 2B7A  
                     l2266 2BF8                       l2258 2BE0                       l2290 2CBE  
                     l2282 2CA4                       l2348 2E90                       l2604 2B4E  
                     l2540 262A                       l2532 2606                       l2516 25C8  
                     l2508 2598                       l2372 21FC                       l2364 213C  
                     l3084 1F8E                       l3076 1F06                       l2438 2440  
                     l2294 2CD2                       l2286 2CB2                       l2278 2C98  
                     l2624 266E                       l2704 2D60                       l2528 25F6  
                     l2480 2502                       l2472 24DE                       l2288 2CBA  
                     l2392 1B18                       l2800 126E                       l3088 1FD2  
                     l2554 287A                       l2642 26D4                       l2706 2D6C  
                     l2538 261E                       l2298 2CDC                       l2386 1A74  
                     l2548 2852                       l2660 2724                       l2652 26FC  
                     l2468 24CE                       l2396 1B3C                       l2734 2E0E  
                     l2574 28B8                       l2654 2708                       l2646 26E4  
                     l2670 2C24                       l2494 2556                       l2478 24F6  
                     l2910 1660                       l2902 1640                       l2830 1396  
                     l2742 10DA                       l2656 270E                       l2592 2EC8  
                     l2672 2C30                       l2488 2538                       l2912 166E  
                     l2904 164A                       l2840 1408                       l2832 13C4  
                     l2824 1362                       l2816 12FE                       l2738 2E38  
                     l2682 2C64                       l2674 2C34                       l2690 2D06  
                     l2834 13D4                       l2754 111E                       l2762 117A  
                     l2692 2D12                       l2940 17E2                       l2924 16AA  
                     l2916 1688                       l2860 14E8                       l2844 142C  
                     l2828 1386                       l2772 11D2                       l2748 10F2  
                     l2694 2D16                       l2854 1480                       l2790 122E  
                     l2782 11F8                       l2774 11E8                       l2928 16FA  
                     l2880 1566                       l2872 1520                       l2784 121A  
                     l2768 119C                       l2698 2D3A                       l2962 1856  
                     l2954 181A                       l2946 17F8                       l2938 17D8  
                     l2858 14E4                       l2778 11F4                       l2980 18C6  
                     l2892 15AA                       l2884 1576                       l2876 1550  
                     l2948 1802                       l2990 18F4                       l2982 18CE  
                     l2974 189A                       l2958 1836                       l2894 15B0  
                     l2886 157C                       l2984 18D6                       l2976 18A2  
                     l2968 1878                       l2888 158A                       l2994 1914  
                     l2996 1918                       l2998 1932                       STR_1 1097  
                     STR_2 1077                       STR_3 10B5                       STR_4 10C4  
                     u2431 283A                       u2271 23F8                       u2451 2862  
                     u2531 2652                       u2291 2424                       u2550 268C  
                     u1655 2F30                       u1751 224C                       u1656 2F32  
                     u2800 12A6                       u3257 304E                       u1761 2260  
                     u3267 2F00                       u2555 2684                       u2805 129C  
                     u2680 2E30                       u1961 2746                       u2690 2E5A  
                     u1981 276E                       u2687 2E26                       u2697 2E50  
                     u2990 167E           ?_lcd_send_nibble 0001                       _main 1D30  
             ___ftpack@arg 0001               ___ftpack@exp 0004                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
                     prodh 000FF4                       prodl 000FF3                       start 0300  
            __CFG_IESO$OFF 000000               _sprintf$1122 0056              __CFG_MCLRE$ON 000000  
             ___ftmul@cntr 0022               ___param_bank 000010      set_pwm2_raw@raw_value 0001  
             ___ftmul@sign 0023               ___fttol@exp1 0048               ___fttol@lval 0044  
             main@distance 00A5       __end_of_delay_cycles 2FE2                      ?_main 0001  
          __end_of___awdiv 2C02           _set_pwm1_voltage 2A56            __end_of___ftadd 23E8  
          __end_of___awmod 2CF4            __end_of___ftdiv 2910            __end_of___ftneg 307C  
          __end_of___lldiv 2C84            __end_of___ftmul 282A            ___awdiv@divisor 0009  
                    _T1CON 000FCD            __end_of___llmod 2D5A            __end_of___ftsub 2EF2  
          __end_of___fttol 2736                      _T2CON 000FCA            ___awdiv@counter 000B  
         _set_pwm2_voltage 29BE                      _TMR1H 000FCF                      _TMR1L 000FCE  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000               ___lltoft@exp 0011             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000            __end_of_dpowers 1029  
                    _scale 1940            __end_of_isdigit 30E0              ___ftpack@sign 0005  
                    tablat 000FF5                      status 000FD8            __end_of_sprintf 1940  
           __CFG_PBADEN$ON 000000            __initialization 2FE2               __end_of_main 1FF6  
          ??_lcd_send_byte 000A                     ??_main 006F              ___fttol@sign1 0043  
            __activetblptr 000002       __size_of__tdiv_to_l_ 0132                     _ADCON0 000FC2  
                   _ADCON1 000FC1           ___llmod@dividend 0001                     ?_scale 0024  
                   _CCPR1L 000FBE                     _CCPR2L 000FBB           ___awdiv@dividend 0007  
         __end_of___ftpack 29BE           __end_of___lltoft 2DB6           __end_of___lwtoft 30A0  
         __end_of_delay_ms 2F26             __CFG_XINST$OFF 000000           __end_of__powers_ 1077  
         __end_of_lcd_init 2E0C           __end_of_lcd_putc 2EB2           __end_of_lcd_puts 2E62  
                   ___ftge 2AEE                     ___wmul 300C                  ??___awdiv 000B  
                ??___ftadd 0034             __CFG_STVREN$ON 000000                  ??___awmod 0005  
                ??___ftdiv 002A                  ??___ftneg 0004                  ??___lldiv 0009  
                ??___ftmul 001B                  ??___llmod 0009                  ??___ftsub 0040  
                ??___fttol 003E                     _fround 1FF6           ___awdiv@quotient 000D  
          ___awmod@divisor 0003            ___awmod@counter 0005      ___ftmul@f3_as_product 001F  
             __pdataCOMRAM 0071                  ??_isdigit 0001               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_sprintf 0050                 __accesstop 0080    __end_of__initialization 3002  
               ___ftadd@f1 002E                 ___ftadd@f2 0031                 ___ftge@ff1 0001  
               ___ftge@ff2 0004              ___rparam_used 000001                 ___ftdiv@f1 0024  
               ___ftdiv@f2 0027                 ___ftdiv@f3 002E                 ___ftneg@f1 0001  
               ___ftmul@f1 0015                 ___ftmul@f2 0018                 ___ftsub@f1 003A  
               ___ftsub@f2 003D                 ___fttol@f1 003A             __pcstackCOMRAM 0001  
    __size_of_delay_cycles 002E                 ___lltoft@c 0009              __end_of_scale 1D30  
               ___lwtoft@c 0009                 __div_to_l_ 251A          lcd_gotoxy@address 000D  
          __div_to_l_@exp1 000C            __div_to_l_@cntr 000B                    ??_scale 0027  
          __div_to_l_@quot 0007               sprintf@width 0061               _delay_cycles 2FB4  
 __end_of_set_pwm1_voltage 2AEE              __div_to_l_@f1 0001              __div_to_l_@f2 0004  
 __end_of_set_pwm2_voltage 2A56         __size_of_init_pwm1 0016             lcd_send_byte@n 0009  
                  ?___ftge 0001                    ?___wmul 000F           lcd_send_nibble@n 0008  
                  _CCP1CON 000FBD                    _CCP2CON 000FBA                    ?_fround 0024  
                ?___ftpack 0001                  ?___lltoft 0009                  ?___lwtoft 0009  
                ?_delay_ms 0001                 _lcd_gotoxy 30A0                  ?_lcd_init 0001  
                ?_lcd_putc 0001                  ?_lcd_puts 000F          __end_of__npowers_ 1050  
                  __Hparam 0000                 _scale$1121 0027                    __Lparam 0000  
 __size_of_lcd_send_nibble 0026            __size_of___ftge 0090                    ___awdiv 2B7E  
                  ___ftadd 223C                    ___awmod 2C84                    ___ftdiv 282A  
                  ___ftneg 3058                    ___lldiv 2C02            __size_of___wmul 0026  
                  ___ftmul 2736                    ___llmod 2CF4                    ___ftsub 2EB2  
                  ___fttol 2642              ?_set_pwm1_raw 0001               __psmallconst 1000  
            ?_set_pwm2_raw 0001                    __pcinit 2FE2                 ??___ftpack 0006  
          __size_of_fround 0246                    __ramtop 1000                 ??___lltoft 000D  
                  __ptext0 1D30                    __ptext1 10CE                    __ptext2 1940  
                  __ptext3 30C2                    __ptext4 1FF6                    __ptext5 300C  
                  __ptext6 2C84                    __ptext7 2B7E                    __ptext8 23E8  
                  __ptext9 251A                 ??___lwtoft 000C                  _T1CONbits 000FCD  
              ?__div_to_l_ 0001                    _dpowers 1001                  _T2CONbits 000FCA  
                  _isdigit 30C2          __end_of_init_pwm1 3114           ___awmod@dividend 0001  
               ??_delay_ms 0001                    _sprintf 10CE                 ??_lcd_init 000B  
               ??_lcd_putc 000E                 ??_lcd_puts 0011       end_of_initialization 3002  
            __Lmediumconst 0000       lcd_send_byte@cm_data 000A            ___lldiv@divisor 0005  
          ___lldiv@counter 000D                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE             ??_set_pwm1_raw 0003  
           ??_set_pwm2_raw 0003             __tdiv_to_l_@f1 0001             __tdiv_to_l_@f2 0004  
    __end_of_lcd_send_byte 2F58              ??__tdiv_to_l_ 0007                  _PORTBbits 000F81  
                _PORTDbits 000F83                 _setupPorts 30E0                  _TRISCbits 000F94  
              ?_lcd_gotoxy 000B            _LCD_INIT_STRING 0071                _CCP1CONbits 000FBD  
              ___ftdiv@exp 0031                _CCP2CONbits 000FBA        __size_of__div_to_l_ 0128  
              ___ftmul@exp 001E             __end_of___ftge 2B7E             __end_of___wmul 3032  
            __pidataCOMRAM 3114              delay_cycles@n 0004              delay_cycles@x 0005  
        ??_lcd_send_nibble 0007             __end_of_fround 223C        start_initialization 2FE2  
      __end_of__tdiv_to_l_ 251A            ___llmod@divisor 0005            ___llmod@counter 0009  
        ?_set_pwm1_voltage 0049          ?_set_pwm2_voltage 0049         ??_set_pwm1_voltage 004C  
       ??_set_pwm2_voltage 004C                   ??___ftge 0007        __size_of_lcd_gotoxy 0022  
                 ??___wmul 0013           __CFG_LPT1OSC$OFF 000000                   ??_fround 0027  
            sprintf@tmpval 0063                ?_setupPorts 0001                 fround@prec 002D  
        __size_of___ftpack 00AE          __size_of___lltoft 005C          __size_of___lwtoft 0024  
            __pcstackBANK0 0080          __size_of_delay_ms 0034       __end_of_set_pwm1_raw 2FB4  
     __end_of_set_pwm2_raw 2F86          __size_of_lcd_init 0056                sprintf@flag 005F  
        __size_of_lcd_putc 0050          __size_of_lcd_puts 0056                sprintf@fval 0069  
              sprintf@prec 006C                  _main$1118 00A0          __CFG_CCP2MX$PORTC 000000  
                 ?___awdiv 0007                   ?___ftadd 002E                   ?___awmod 0001  
                 ?___ftdiv 0024                   ?___ftneg 0001                   ?___lldiv 0001  
                 ?___ftmul 0015                   ?___llmod 0001                   ?___ftsub 003A  
                __npowers_ 1029                   ?___fttol 003A        set_pwm1_voltage@tmp 004C  
              __tdiv_to_l_ 23E8               ??__div_to_l_ 0007                __smallconst 1000  
                 ?_isdigit 0001      set_pwm1_voltage@value 0049                   ?_sprintf 0049  
                _init_pwm1 30FE             __size_of_scale 03F0             ___wmul@product 0013  
                delay_ms@n 0004                  delay_ms@x 0005        __size_of_setupPorts 001E  
       __end_of__div_to_l_ 2642           __CFG_WDTPS$32768 000000        set_pwm2_voltage@tmp 004C  
        ___wmul@multiplier 000F                  lcd_init@i 000B                  lcd_putc@c 000E  
                lcd_puts@s 000F               ??_lcd_gotoxy 000C                 ?_init_pwm1 0001  
                copy_data0 2FF6            _lcd_send_nibble 3032                   __Hrparam 0000  
    set_pwm1_raw@raw_value 0001                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
  set_pwm1_voltage@raw_val 004F         __end_of_lcd_gotoxy 30C2           __size_of___awdiv 0084  
         __size_of___ftadd 01AC           __size_of___awmod 0070           __size_of___ftdiv 00E6  
         __size_of___ftneg 0024           __size_of___lldiv 0082           __size_of___ftmul 00F4  
         __size_of___llmod 0066           __size_of___ftsub 0040           __size_of___fttol 00F4  
                 ___ftpack 2910                _fround$1120 0027                _fround$1119 002A  
                 ___lltoft 2D5A                _isdigit$793 0002                   ___lwtoft 307C  
               sprintf@exp 0067                 sprintf@val 005B      __size_of_set_pwm1_raw 002E  
    __size_of_set_pwm2_raw 002E           __size_of_isdigit 001E                   _delay_ms 2EF2  
                 __ptext10 2D5A                   __ptext11 2CF4                   __ptext20 2A56  
                 __ptext12 2C02                   __ptext21 2F86                   __ptext13 2EB2  
                 __ptext30 3032                   __ptext22 2642                   __ptext14 3058  
                 __ptext31 2FB4                   __ptext23 2736                   __ptext15 2AEE  
                 __ptext32 2EF2                   __ptext24 282A                   __ptext16 30E0  
                 __ptext33 30FE                   __ptext25 223C                   __ptext17 2DB6  
                 __ptext34 307C                   __ptext26 2E0C                   __ptext18 29BE  
                 __ptext35 2910                   __ptext27 2E62                   __ptext19 2F58  
                 __ptext28 30A0                   __ptext29 2F26                   __powers_ 1050  
                 _lcd_init 2DB6                   _lcd_putc 2E62                   _lcd_puts 2E0C  
         __size_of_sprintf 0872     __size_of_lcd_send_byte 0032              ?_delay_cycles 0001  
            __size_of_main 02C6               _set_pwm1_raw 2F86               _set_pwm2_raw 2F58  
                 main@buff 0080                   main@time 00A3    set_pwm2_voltage@raw_val 004F  
             ??_setupPorts 000C  __size_of_set_pwm1_voltage 0098  __size_of_set_pwm2_voltage 0098  
                 isdigit@c 0003                   scale@scl 002A                ??_init_pwm1 0001  
                sprintf@ap 0059    __end_of_lcd_send_nibble 3058           __tdiv_to_l_@exp1 000F  
                sprintf@sp 0049           __tdiv_to_l_@cntr 000E             ??_delay_cycles 0001  
         __tdiv_to_l_@quot 000A           ___lldiv@dividend 0001         __end_of_setupPorts 30FE  
            _lcd_send_byte 2F26               ?__tdiv_to_l_ 0001                   sprintf@c 006E  
                 sprintf@f 004B           ___lldiv@quotient 0009      set_pwm2_voltage@value 0049  
